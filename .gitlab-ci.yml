stages:
  - schedule
  - install
  - test
  - deploy

install dependencies:
  stage: install
  image: node:18
  script:
    - yarn install --frozen-lockfile
  artifacts:
    paths:
      - node_modules/
  except:
    - schedules

test:
  stage: test
  image: node:18
  script:
    - yarn test-ci
  dependencies:
    - install dependencies

lint:
  stage: test
  image: node:18
  script:
    - yarn lint
  dependencies:
    - install dependencies

build staging:
  stage: test
  image: node:18
  script:
    # we want the `development` configs on staging, even though we are optimizing the build for prod
    - cp .env.development .env.production
    - yarn build
  artifacts:
    when: always
    paths:
      - out
  dependencies:
    - install dependencies

build prod:
  stage: test
  image: node:18
  script:
    - yarn build
  artifacts:
    when: always
    paths:
      - out
  dependencies:
    - install dependencies

deploy staging:
  stage: deploy
  image: registry-gitlab.i.wish.com/contextlogic/leopard/aws-base-with-brotli:latest
  script:
    - sh scripts/deploy.sh -s=leopard-staging
  environment:
    name: staging
  when: manual
  tags: [leopard-staging]
  dependencies:
    - build staging

deploy prod:
  stage: deploy
  image: registry-gitlab.i.wish.com/contextlogic/leopard/aws-base-with-brotli:latest
  script:
    - sh scripts/deploy.sh -s=leopard-production
  environment:
    name: production
  when: manual
  tags: [leopard]
  dependencies:
    - build prod
# temp disabling lighthouse so we can remove docker - will re-write at a later date
# include:
#   - project: "contextlogic/includes"
#     ref: master
#     file: "/templates/job-build-and-tag/ecr-commit.yml"
#   - local: "pipeline/schedule.yml"
#   - local: "pipeline/test.yml"
