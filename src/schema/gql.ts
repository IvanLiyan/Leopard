/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation ProductEditState_EditOrCreateProduct($input: ProductUpsertInput!) {\n    productCatalog {\n      upsertProduct(input: $input) {\n        ok\n        message\n        productId\n      }\n    }\n  }\n": types.ProductEditState_EditOrCreateProductDocument,
    "\n  mutation ProductEditState_RemoveProduct($input: RemoveProductInput!) {\n    productCatalog {\n      removeProduct(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.ProductEditState_RemoveProductDocument,
    "\n  query EXISTING_COMPLIANCE_DOCUMENTS($id: String!) {\n    productCatalog {\n      product(id: $id) {\n        productComplianceDocuments {\n          fileName\n          fileUrl\n          documentLabel\n        }\n      }\n    }\n  }\n": types.Existing_Compliance_DocumentsDocument,
    "\n  mutation UPDATE_COMPLIANCE_DOCUMENTS(\n    $input: [ProductComplianceDocumentInput!]!\n  ) {\n    productCatalog {\n      uploadProductComplianceDocument(input: $input) {\n        ok\n        failure\n        fileUrls\n      }\n    }\n  }\n": types.Update_Compliance_DocumentsDocument,
    "\n  query BrandSearch_GetTrueBrands(\n    $count: Int!\n    $offset: Int!\n    $queryString: String!\n    $sort: BrandSort!\n  ) {\n    brand {\n      trueBrands(\n        count: $count\n        offset: $offset\n        queryString: $queryString\n        sort: $sort\n      ) {\n        id\n        displayName\n        logoUrl\n      }\n    }\n  }\n": types.BrandSearch_GetTrueBrandsDocument,
    "\n  query AddEdit_GetGtinProductQuery(\n    $gtins: [String!]!\n    $currency: PaymentCurrencyCode!\n  ) {\n    productCatalog {\n      gtinProductService {\n        product(gtins: $gtins) {\n          title\n          description\n          imageUrls\n          wishBrand {\n            displayName\n          }\n          variations {\n            gtin\n            color\n            size\n            imageUrls\n            length {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            width {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            height {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            weight {\n              value(targetUnit: GRAM)\n              unit\n            }\n            price {\n              convertedTo(currency: $currency, rate: MKL_POLICY) {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AddEdit_GetGtinProductQueryDocument,
    "\n  query GetBrandMatch($brandName: String!) {\n    brand {\n      trueBrands(brandName: $brandName, count: 1) {\n        id\n        displayName\n        logoUrl\n      }\n    }\n  }\n": types.GetBrandMatchDocument,
    "\n  query AddProduct_GetInitialDataQuery {\n    currentMerchant {\n      standardWarehouseId\n      primaryCurrency\n      canManageShipping\n      isCnForFulfillment\n      isCnMerchant\n      isStoreMerchant\n      shippingSettings(enabled: true) {\n        country {\n          name\n          code\n          gmvRank\n          regions {\n            code\n            name\n          }\n          wishExpress {\n            expectedTimeToDoor\n          }\n        }\n      }\n    }\n    currentUser {\n      gating {\n        useCalculatedShipping: isAllowed(name: \"use_calculated_shipping\")\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      product {\n        prop65Chemicals\n      }\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showRevampedAddEditProductUI: decideForName(\n          name: \"add_edit_product_ui_revamp\"\n        )\n        showInventoryOnHand: decideForName(name: \"show_inventory_on_hand\")\n      }\n    }\n    productCatalog {\n      productCount\n    }\n  }\n": types.AddProduct_GetInitialDataQueryDocument,
    "\n  query EditProduct_GetInitialDataQuery($productId: String) {\n    su {\n      isBd\n    }\n    currentMerchant {\n      isConsignmentMode\n      standardWarehouseId\n      primaryCurrency\n      canManageShipping\n      isCnForFulfillment\n      isCnMerchant\n      shippingSettings(enabled: true) {\n        country {\n          name\n          code\n          gmvRank\n          regions {\n            code\n            name\n          }\n          wishExpress {\n            expectedTimeToDoor\n          }\n        }\n      } \n    }\n    currentUser {\n      gating {\n        useCalculatedShipping: isAllowed(name: \"use_calculated_shipping\")\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      product {\n        prop65Chemicals\n      }\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showRevampedAddEditProductUI: decideForName(\n          name: \"add_edit_product_ui_revamp\"\n        )\n        showInventoryOnHand: decideForName(name: \"show_inventory_on_hand\")\n        showConsignmentOverwrite: decideForName(name: \"show_consignment_overwrite\")\n      }\n    }\n    policy {\n      productCategoryDispute {\n        disputes(\n          searchType: PRODUCT_ID\n          query: $productId\n          states: [PENDING_REVIEW, RESOLVED_UNCHANGED, RESOLVED_UPDATE]\n        ) {\n          id\n        }\n      }\n    }\n    productCatalog {\n      product(id: $productId) {\n        id\n        name\n        sku\n        description\n        enabled\n        reviewStatus\n        condition\n        maxQuantity\n        eligibleForCategoryDispute\n        warningType\n        chemicalNames\n        isConsignmentEligible\n        consignmentOriginalPid\n        consignmentReferenceLink\n        subcategory {\n          id\n          name\n          categoryChildren {\n            id\n            name\n          }\n          categoriesAlongPath {\n            id\n            name\n          }\n        }\n        createTime {\n          formatted(fmt: \"%s\")\n        }\n        lastUpdateTime {\n          formatted(fmt: \"%s\")\n        }\n        tags\n        upc\n        referenceWeight {\n          unit\n          value\n        }\n        referenceLength {\n          unit\n          value\n        }\n        referenceVolume {\n          unit\n          value\n        }\n        referenceArea {\n          unit\n          value\n        }\n        referenceUnit {\n          unit\n          value\n        }\n        variations {\n          id\n          sku\n          color\n          size\n          gtin\n          enabled\n          declaredValue {\n            amount\n          }\n          declaredName\n          declaredLocalName\n          pieces\n          hasPowder\n          hasLiquid\n          hasBattery\n          hasMetal\n          originCountry {\n            code\n          }\n          weight {\n            value(targetUnit: GRAM)\n          }\n          effectiveWeight {\n            value(targetUnit: GRAM)\n          }\n          height {\n            value(targetUnit: CENTIMETER)\n          }\n          width {\n            value(targetUnit: CENTIMETER)\n          }\n          length {\n            value(targetUnit: CENTIMETER)\n          }\n          customsHsCode\n          price {\n            amount\n            currencyCode\n          }\n          consignmentSupplyCost {\n            amount\n            currencyCode\n          }\n          image {\n            id\n            wishUrl\n            isCleanImage\n          }\n          inventory {\n            count\n            shippingType\n            warehouseId\n          }\n          quantityWeight {\n            value\n          }\n          quantityLength {\n            value\n          }\n          quantityVolume {\n            value\n          }\n          quantityArea {\n            value\n          }\n          quantityUnit {\n            value\n          }\n          attributes {\n            name\n            value\n          }\n          options {\n            name\n            value\n          }\n        }\n        mainImage {\n          id\n          wishUrl\n          isCleanImage\n        }\n        extraImages {\n          id\n          wishUrl\n          isCleanImage\n        }\n        requestedBrand {\n          id\n          displayName\n          logoUrl\n        }\n        shipping {\n          defaultShipping {\n            warehouseId\n            price {\n              amount\n              currencyCode\n            }\n          }\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              enabled\n              timeToDoor\n              wishExpressTtdRequirement\n              regionShipping {\n                enabled\n                timeToDoor\n                region {\n                  name\n                  code\n                }\n                price {\n                  amount\n                }\n              }\n              country {\n                code\n                name\n                gmvRank\n                regions {\n                  code\n                  name\n                }\n              }\n              price {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n        isRemovedByWish\n        categories {\n          name\n        }\n        attributes {\n          name\n          value\n        }\n      }\n    }\n  }\n": types.EditProduct_GetInitialDataQueryDocument,
    "\n  query GetListingQualityInsightsUrlQuery {\n    listingQualityInsights {\n        report {\n          presignedS3Url\n        }\n    }\n  }\n": types.GetListingQualityInsightsUrlQueryDocument,
    "\n  query AllProducts_ProductsContainerInitialDataQuery {\n    su {\n      isBd\n    }\n    currentMerchant {\n      isConsignmentMode\n      state\n      canAccessPaidPlacement\n      warehouses {\n        id\n        unitId\n        address {\n          country {\n            code\n          }\n        }\n      }\n    }\n    currentUser {\n      gating {\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showConsignmentOverwrite: decideForName(name: \"show_consignment_overwrite\")\n      }\n    }\n  }\n": types.AllProducts_ProductsContainerInitialDataQueryDocument,
    "\n  query AllProducts_GetProductCount(\n    $query: String\n    $merchantId: ObjectIdType\n    $searchType: ProductSearchType\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n  ) {\n    productCatalog {\n      productCountV2(\n        query: $query\n        merchantId: $merchantId\n        searchType: $searchType\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      )\n    }\n  }\n": types.AllProducts_GetProductCountDocument,
    "\n  query AllProducts_GetProducts(\n    $query: String\n    $searchType: ProductSearchType\n    $merchantId: ObjectIdType\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n    $warehouseId: String\n  ) {\n    productCatalog {\n      productsV2(\n        query: $query\n        searchType: $searchType\n        merchantId: $merchantId\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      ) {\n        id\n        name\n        sku\n        enabled\n        isRemovedByWish\n        isRemovedByMerchant\n        isRemoved\n        isPromoted\n        sales\n        wishes\n        isLtl\n        isReturnsEnabled\n        isWishExpress\n        categoryExperienceEligibility\n        subcategoryId\n        subcategory {\n          id\n          name\n          categoriesAlongPath {\n            id\n            name\n          }\n        }\n        variationOptions\n        listingState {\n          state\n          reason\n        }\n        mainImage {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        extraImages {\n          isCleanImage\n        }\n        hasBrand\n        shipping(warehouseId: $warehouseId) {\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              country {\n                code\n              }\n            }\n          }\n        }\n        categories {\n          name\n        }\n        lastUpdateTime {\n          formatted(fmt: \"MM-dd-YYYY z\")\n        }\n        createTime {\n          formatted(fmt: \"MM-dd-YYYY z\")\n        }\n        variationCount\n        variations(offset: 0, limit: 5) {\n          id\n          productId\n          size\n          color\n          enabled\n          sku\n          image {\n            wishUrl(size: TINY)\n          }\n          price {\n            amount\n            currencyCode\n            display\n          }\n          inventory {\n            warehouseId\n            count\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n": types.AllProducts_GetProductsDocument,
    "\n  query AllProducts_GetProductVariations($query: String, $limit: Int) {\n    productCatalog {\n      productsV2(limit: 1, searchType: ID, query: $query) {\n        variations(offset: 0, limit: $limit) {\n          id\n          productId\n          size\n          color\n          enabled\n          sku\n          image {\n            wishUrl\n          }\n          price {\n            amount\n            currencyCode\n            display\n          }\n          inventory {\n            warehouseId\n            count\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n": types.AllProducts_GetProductVariationsDocument,
    "\n  mutation AllProducts_UpsertProductsMutation($input: [ProductUpsertInput!]!) {\n    productCatalog {\n      upsertProducts(input: $input) {\n        ok\n        failures {\n          message\n          productId\n        }\n      }\n    }\n  }\n": types.AllProducts_UpsertProductsMutationDocument,
    "\n  mutation AllProducts_RemoveProductMutation($input: RemoveProductInput!) {\n    productCatalog {\n      removeProduct(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.AllProducts_RemoveProductMutationDocument,
    "\n  mutation Products_DownloadProductsMutation(\n    $input: DownloadBulkCsvProductsInput!\n  ) {\n    productCatalog {\n      downloadBulkCsvProducts(input: $input) {\n        downloadUrl\n        ok\n        errorMessage\n      }\n    }\n  }\n": types.Products_DownloadProductsMutationDocument,
    "\n  mutation AllProducts_DownloadProductsMutation(\n    $input: DownloadAllProductsInput!\n  ) {\n    productCatalog {\n      downloadAllProducts(input: $input) {\n        ok\n        errorMessage\n      }\n    }\n  }\n": types.AllProducts_DownloadProductsMutationDocument,
    "\n  mutation AllProducts_DeleteWarehouse($input: DeleteMerchantWarehouseInput!) {\n    currentMerchant {\n      warehouseSettings {\n        deleteWarehouse(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.AllProducts_DeleteWarehouseDocument,
    "\n  query AllProducts_GetProductsForExport(\n    $query: String\n    $searchType: ProductSearchType\n    $merchantId: ObjectIdType\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n    $warehouseId: String\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      csvProductColumnEnums\n      productsV2(\n        query: $query\n        searchType: $searchType\n        merchantId: $merchantId\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      ) {\n        id\n        name\n        description\n        wishes\n        sales\n        sku\n        upc\n        lastUpdateTime {\n          formatted(fmt: \"YYYY-MM-dd k:mm:ss z\")\n        }\n        createTime {\n          formatted(fmt: \"YYYY-MM-dd k:mm:ss z\")\n        }\n        msrp {\n          display\n        }\n        shipping(warehouseId: $warehouseId) {\n          defaultShipping {\n            warehouseId\n            price {\n              display\n            }\n            timeToDoor\n          }\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              country {\n                code\n              }\n              timeToDoor\n              enabled\n              price {\n                display\n              }\n            }\n          }\n        }\n        fpReviewStatus\n        listingState {\n          state\n        }\n        isPromoted\n        isLtl\n        mainImage {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        extraImages {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        trueTags {\n          name\n          id\n        }\n        condition\n        maxQuantity\n        referenceArea {\n          unit\n          value\n        }\n        referenceUnit {\n          unit\n          value\n        }\n        referenceWeight {\n          unit\n          value\n        }\n        referenceLength {\n          unit\n          value\n        }\n        referenceVolume {\n          unit\n          value\n        }\n        chemicalNames\n        warningType\n        requestedBrand {\n          id\n          name\n        }\n        categoryExperienceEligibility\n        subcategoryId\n        subcategory {\n          id\n          name\n        }\n        variationOptions\n        variations {\n          id\n          sku\n          size\n          color\n          gtin\n          inventory {\n            warehouseId\n            count\n          }\n          price {\n            display\n          }\n          image {\n            wishUrl(size: TINY)\n          }\n          customsHsCode\n          length {\n            unit\n            value\n          }\n          width {\n            unit\n            value\n          }\n          height {\n            unit\n            value\n          }\n          weight {\n            unit\n            value\n          }\n          declaredValue {\n            display\n          }\n          originCountry {\n            name\n          }\n          declaredLocalName\n          declaredName\n          hasLiquid\n          hasMetal\n          hasPowder\n          hasBattery\n          pieces\n          quantityArea {\n            unit\n            value\n          }\n          quantityUnit {\n            unit\n            value\n          }\n          quantityWeight {\n            unit\n            value\n          }\n          quantityLength {\n            unit\n            value\n          }\n          quantityVolume {\n            unit\n            value\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n": types.AllProducts_GetProductsForExportDocument,
    "\n  mutation UnderperformingProducts_DownloadProductsMutation (\n    $input: DownloadUnderPerformingProductsInput!\n  ) {\n    productCatalog {\n      downloadUnderPerformingProducts(input: $input) {\n        ok\n        errorMessage\n      }\n    }\n  }\n": types.UnderperformingProducts_DownloadProductsMutationDocument,
    "\n  query GET_DOWNLOAD_TOTAL_JOB_COUNTS (\n    $query: String\n  ) {\n    productCatalog {\n      downloadJobsCount(\n        query: $query\n      )\n    }\n  }\n": types.Get_Download_Total_Job_CountsDocument,
    "\n  query GetDownloadTotalJobs($offset: Int, $limit: Int, $query: String) {\n    productCatalog {\n      downloadJobs(\n        query: $query\n        offset: $offset\n        limit: $limit\n      ) {\n        id\n        submittedDate {\n          unix\n          formatted(fmt:\"MM/d/Y hh:mm:ss\")\n        }\n        completedDate {\n          unix\n          formatted(fmt:\"MM/d/Y hh:mm:ss\")\n        }\n        jobType\n        status\n        downloadLink\n      }\n    }\n  }\n": types.GetDownloadTotalJobsDocument,
    "\n  query AdminUsersTable_GetInternalUsersQuery(\n    $offset: Int!\n    $limit: Int!\n    $query: String\n    $sortField: UsersSortFieldType!\n    $sortOrder: SortOrderType!\n    $includeDisabledUsers: Boolean!\n    $roles: [RoleType!]!\n  ) {\n    identity {\n      users(\n        offset: $offset\n        limit: $limit\n        query: $query\n        sortField: $sortField\n        sortOrder: $sortOrder\n        includeDisabledUsers: $includeDisabledUsers\n        roles: $roles\n      ) {\n        username\n        name\n        email\n        id\n        bdMerchantCountry\n        roles {\n          name\n        }\n        manager {\n          name\n        }\n        serviceTypes\n        isEnabled\n        isSalesRep\n        canBeAssignedToLogicalQueue: hasPermission(\n          permissions: [HANDLE_CS_TICKETS]\n        )\n      }\n      usersCount(\n        query: $query\n        includeDisabledUsers: $includeDisabledUsers\n        roles: $roles\n      )\n    }\n  }\n": types.AdminUsersTable_GetInternalUsersQueryDocument,
    "\n  mutation AdminUsersTable_LoginAsUserMutation($input: ByUserIdInput!) {\n    authentication {\n      loginAs {\n        user(input: $input) {\n          ok\n          error\n        }\n      }\n    }\n  }\n": types.AdminUsersTable_LoginAsUserMutationDocument,
    "\n  query MerchantSupportConfigQuery {\n    currentUser {\n      displayName\n      email\n      supportConfig {\n        isEnBd\n        isNonEnBd\n      }\n      accountManager {\n        email\n      }\n    }\n  }\n": types.MerchantSupportConfigQueryDocument,
    "\n  mutation AppLocalSelector_ChangeLocaleMutation($input: ChangeLocaleInput!) {\n    locale {\n      changeLocale(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.AppLocalSelector_ChangeLocaleMutationDocument,
    "\n  query SearchStore_ObjectSearchQuery(\n    $objectId: ObjectIdType!\n    $currentPath: String\n  ) {\n    chrome {\n      objectSearch(objectId: $objectId, currentPath: $currentPath) {\n        type\n        title\n        description\n        imageUrl\n        url\n        nuggets\n      }\n    }\n  }\n": types.SearchStore_ObjectSearchQueryDocument,
    "\n  query Chrome_GetSideMenuCounts {\n    cs {\n      ticketCount(\n        states: [AWAITING_MERCHANT]\n        types: [ORDER, PRE_PURCHASE, POST_CUSTOMER_SUPPORT]\n      )\n    }\n    fulfillment {\n      actionRequiredOrderCount\n    }\n    logistics {\n      fbw {\n        lowInventoryCount\n        actionRequiredShippingPlans\n        totalActionRequired\n      }\n    }\n    marketing {\n      pendingCampaignCount\n      lowBudgetCampaignCount\n      actionRequiredCampaignCount\n    }\n    policy {\n      merchantIpWarningCount: merchantWarningCount(\n        states: [AWAITING_MERCHANT, NEW]\n        reasons: [COUNTERFEIT_GOODS, FINE_FOR_COUNTERFEIT_GOODS]\n      )\n      merchantActionRequiredCount: merchantWarningCount(\n        states: [AWAITING_MERCHANT, NEW]\n      )\n      dispute {\n        trackingDispute {\n          disputeCount(states: [AWAITING_MERCHANT])\n        }\n        refundDispute {\n          returnDisputeCount: disputeCount(\n            states: [AWAITING_MERCHANT]\n            reasons: [MERCHANT_REPORT_RETURN]\n          )\n          refundDisputeCount: disputeCount(\n            states: [AWAITING_MERCHANT]\n            reasons: [\n              MISLEADING_PRODUCT_TAG\n              PRODUCT_HIGH_REFUND_RATIO\n              DELIVERED_TO_WRONG_ADDRESS\n              EPC_OVERWEIGHT\n              FRAUDULENT_BEHAVIOR\n              VALID_TRACKING\n              INCOMPLETE_ORDER\n              NOT_DELIVERED_ON_TIME\n              STORE_UPLOADED_INVENTORY_RETURN\n              PRODUCT_LOW_RATING\n              RIGHT_OF_WITHDRAWAL\n              FBS_ITEM_NOT_PICKUP\n              CORRECT_SIZE\n              ITEM_IS_DAMAGED\n              EPC_OVERVALUE\n              RETURNED_TO_SENDER\n              ITEM_NOT_MATCH_LISTING\n              WISHBLUE_EPC_LATE_FULFULLMENT\n              OUT_OF_STOCK\n              ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE\n              FAKE_TRACKING\n              MERCHANT_HIGH_REFUND_EAT_COST\n              ITEM_IS_DANGEROUS\n              BANNED_MERCHANT\n              NOT_QUALIFIED_SHIPPING_PROVIDER\n              AUTHORIZED_TO_SELL\n              EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP\n              EPC_OVERSIZE\n              COUNTERFEIT_ITEM\n              DID_NOT_ACCEPT_TOS_ON_TIME\n              LATE_CONFIRMED_FULFILLMENT\n              MERCHANT_REPORT_FRAUD\n            ]\n          )\n        }\n      }\n    }\n  }\n": types.Chrome_GetSideMenuCountsDocument,
    "\n  query Chrome_GetAppTopbarData {\n    su {\n      hasPermission(\n        permissions: [\n          CAN_TOGGLE_ADMIN_EDIT_ON_STORE_USERS\n          CAN_TOGGLE_ADMIN_EDIT_ON_ALL_USERS\n        ]\n      )\n    }\n    currentMerchant {\n      id\n      isStoreMerchant\n      canAccessHome\n    }\n    currentUser {\n      firstName\n    }\n  }\n": types.Chrome_GetAppTopbarDataDocument,
    "\n  query Chrome_NotificationButtonData {\n    notifications {\n      notificationCount(viewed: false)\n    }\n  }\n": types.Chrome_NotificationButtonDataDocument,
    "\n  query Chrome_GetAlerts {\n    currentUser {\n      alerts {\n        link\n        description\n        date {\n          formatted(fmt: \"YYYY/MM/dd\")\n        }\n        sentiment\n      }\n    }\n  }\n": types.Chrome_GetAlertsDocument,
    "\n  query PasswordInput_CheckPasswordStrength($password: String!) {\n    authentication {\n      passwordEvaluation(password: $password) {\n        valid\n        errorMessage\n      }\n    }\n  }\n": types.PasswordInput_CheckPasswordStrengthDocument,
    "\n  query ProductDetailModal_GetProduct($id: String, $sku: String) {\n    productCatalog {\n      product(id: $id, sku: $sku) {\n        id\n        name\n        mainImage {\n          wishUrl\n        }\n        description\n        isRemoved\n        listingState{\n          state\n        }\n      }\n    }\n  }\n": types.ProductDetailModal_GetProductDocument,
    "\n  query ProductImage_GetProductImage($productId: String!) {\n    productCatalog {\n      product(id: $productId) {\n        mainImage {\n          wishUrl\n        }\n      }\n    }\n  }\n": types.ProductImage_GetProductImageDocument,
    "\n  query ChromeStore_InitialQuery {\n    chrome {\n      merchantGraph {\n        ...NodeElements\n        children {\n          ...NodeElements\n          children {\n            ...NodeElements\n            children {\n              ...NodeElements\n              children {\n                ...NodeElements\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ChromeStore_InitialQueryDocument,
    "\n  fragment NodeElements on ChromeNodeSchema {\n    url\n    path\n    label\n    overviewLabel\n    badge {\n      badgeType\n      expiryDate {\n        unix\n        datetime\n      }\n    }\n    nodeid\n    keywords\n    description\n    searchPhrase\n    showInSideMenu\n    openInNewTab\n    totalHits\n    mostRecentHit {\n      unix\n      mmddyyyy\n    }\n    countSelectors\n  }\n": types.NodeElementsFragmentDoc,
    "\n  query ExperimentStore_GetBucketForExperiment($name: String!) {\n    currentMerchant {\n      exp {\n        bucket(name: $name)\n      }\n    }\n  }\n": types.ExperimentStore_GetBucketForExperimentDocument,
    "\n  query ExperimentStore_GetDeciderKey($name: String!) {\n    platformConstants {\n      deciderKey {\n        decideForName(name: $name)\n      }\n    }\n  }\n": types.ExperimentStore_GetDeciderKeyDocument,
    "\n  query LocalizationStore_InitialQuery {\n    currentLocale\n    currentProperLocale\n    platformConstants {\n      availableLocales\n    }\n  }\n": types.LocalizationStore_InitialQueryDocument,
    "\n  query SardineStore_GetSardineConstants {\n    platformConstants {\n      sardineConstants {\n        sardineHost\n        sardineClientId\n        sardineSessionKey\n      }\n    }\n  }\n": types.SardineStore_GetSardineConstantsDocument,
    "\n  query UserStore_InitialQuery {\n    currentCountry {\n      code\n    }\n    currentMerchant {\n      id\n      isStoreMerchant\n      primaryCurrency\n      state\n    }\n    currentUser {\n      id\n      merchantId\n      firstName\n      lastName\n      displayName\n      email\n      phoneNumber\n      companyName\n      entityType\n      isStoreOrMerchantUser\n      isApiUser\n      isAdmin\n      roles {\n        name\n      }\n      businessAddress {\n        streetAddress1\n        streetAddress2\n        city\n        state\n        zipcode\n        country {\n          name\n          code\n        }\n      }\n    }\n    su {\n      id\n      isAdmin\n    }\n    recentUsers {\n      id\n      displayName\n      name\n      isStoreOrMerchantUser\n    }\n  }\n": types.UserStore_InitialQueryDocument,
    "\n  query Fashion_GetLeafCategories($l1CategoryId: Int!) {\n    taxonomy {\n      leafCategories(l1CategoryId: $l1CategoryId) {\n        id\n        name\n        categoriesAlongPath {\n          id\n          name\n        }\n        categoryChildren {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.Fashion_GetLeafCategoriesDocument,
    "\n  query Fashion_GetCategoryAttributes(\n    $categoryId: Int!\n  ) {\n    taxonomy {\n      attributes(categoryId: $categoryId) {\n        id\n        name\n        values {\n          id\n          value\n        }\n        description\n        dataType\n        dataTypeFormat\n        level\n        usage\n        isVariationAttribute\n        mode\n        maxMultiSelect\n        enabledForVariations\n      }\n    }\n  }\n": types.Fashion_GetCategoryAttributesDocument,
    "\n  query Fashion_TaxonomyCategoriesQuery(\n    $categoryId: Int!\n  ) {\n    taxonomy {\n      category(categoryId: $categoryId) {\n        id\n        name\n        categoriesAlongPath {\n          id\n          name\n        }\n        categoryChildren {\n          id\n          name\n          categoriesAlongPath {\n            id\n            name\n          }\n          categoryChildren {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.Fashion_TaxonomyCategoriesQueryDocument,
    "\n  query CategoryCSVHeadersQuery($categoryId: Int!, $treeVersion: String!) {\n    productCatalog {\n      csvProductTemplateWithTaxonomyColumnNames(\n        categoryId: $categoryId\n        treeVersion: $treeVersion\n      )\n    }\n  }\n": types.CategoryCsvHeadersQueryDocument,
    "\n  query CategoryAttributesCsvQuery($categoryId: Int!) {\n    taxonomy {\n      categoryAttributesCsv(categoryId: $categoryId)\n    }\n  }\n": types.CategoryAttributesCsvQueryDocument,
    "\n  query CategoryTreeJsonQuery {\n    productCatalog {\n      productCategoryTaxonomyTreeJson\n    }\n  }\n": types.CategoryTreeJsonQueryDocument,
    "\n  query VariationGrouping_GetTaxonomyVariationOptionsQuery(\n    $categoryId: Int!\n    $treeVersion: String\n  ) {\n    taxonomy {\n      variationOptions(categoryId: $categoryId, treeVersion: $treeVersion) {\n        id\n        name\n        values {\n          id\n          value\n        }\n      }\n    }\n  }\n": types.VariationGrouping_GetTaxonomyVariationOptionsQueryDocument,
    "\n  mutation Logger_WriteLog($input: LogToTreasureDataInput!) {\n    analytics {\n      log(input: $input) {\n        ok\n      }\n    }\n  }\n": types.Logger_WriteLogDocument,
    "\n  mutation Toolkit_InitialUpload($input: InitiateUploadInput!) {\n    uploads {\n      initiateUpload(input: $input) {\n        ok\n        message\n        uploadUrl\n        uploadHeaders\n        downloadUrl\n      }\n    }\n  }\n": types.Toolkit_InitialUploadDocument,
    "\n  query GetUserAnnouncementsV2_List(\n    $offset: Int!\n    $limit: Int!\n    $announcementType: AnnouncementType!\n  ) {\n    announcements {\n      forUsersV2 {\n        list(\n          announcementType: $announcementType\n          offset: $offset\n          limit: $limit\n        ) {\n          id\n          title\n          important\n          program {\n            text\n            type\n          }\n          publishDate {\n            inTimezone(identifier: \"UTC\") {\n              formatted(fmt: \"MMM d, y\")\n            }\n          }\n          categories {\n            text\n            type\n          }\n        }\n      }\n    }\n  }\n": types.GetUserAnnouncementsV2_ListDocument,
    "\n  query GetUserAnnouncementsV2_Modal(\n    $offset: Int!\n    $limit: Int!\n    $announcementType: AnnouncementType!\n  ) {\n    announcements {\n      forUsersV2 {\n        list(\n          announcementType: $announcementType\n          offset: $offset\n          limit: $limit\n        ) {\n          id\n          title\n          message\n        }\n      }\n    }\n  }\n": types.GetUserAnnouncementsV2_ModalDocument,
    "\n  query FlatRateShippingSettings_GetOptInStatus {\n    currentMerchant {\n      isFlatRateShippingOptedIn\n      canAccessFlatRateShippingOptInOptOut\n    }\n  }\n": types.FlatRateShippingSettings_GetOptInStatusDocument,
    "\n  query Home_GetInitialData {\n    announcements {\n      forUsers(announcementType: SYSTEM_UPDATE, limit: 5) {\n        id\n        ctaText\n        ctaLink\n        title\n        important\n        program {\n          text\n          type\n        }\n        createdAt {\n          inTimezone(identifier: \"UTC\") {\n            formatted(fmt: \"MMM d, y\")\n          }\n        }\n        categories {\n          text\n          type\n        }\n      }\n    }\n    currentUser {\n      onboarding {\n        steps(completed: false) {\n          title\n          description\n          illustration\n          ctaText\n          ctaLink\n          name\n        }\n        numStepsLeft\n        numSteps\n      }\n    }\n    currentMerchant {\n      sellerVerification {\n        status\n        kycVerification {\n          status\n        }\n        isKycVerification\n        gmvCapReached\n        impressionsPaused\n        paymentsBlocked\n        gmvCap {\n          display\n          amount\n        }\n        gmvCapGracePeriodEndDate {\n          unix\n        }\n        numSalesCap\n        actionRequired\n      }\n      storeStats {\n        rating {\n          averageProductRating\n          startDate {\n            formatted(fmt: \"%m/%d\")\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n          }\n        }\n      }\n      isStoreMerchant\n      isFactory\n      primaryCurrency\n      accountManager {\n        name\n        email\n        qqGroupNumber\n      } \n    }\n  }\n": types.Home_GetInitialDataDocument,
    "\n  query HomeBanner_GetInitialData {\n    currentUser {\n      utmSource\n      backToOnboardingReason\n      onboarding {\n        completed\n      }\n    }\n    currentMerchant {\n      id\n      state\n      isCnMerchant\n      allowMfp\n    }\n    payments {\n      currentMerchant {\n        paymentCycle\n        fullyEnrolledInPaymentCycle\n      }\n    }\n  }\n": types.HomeBanner_GetInitialDataDocument,
    "\n  query PlusPayments_GetAccountBalance($currency: PaymentCurrencyCode!) {\n    payments {\n      paymentInfo {\n        showLedgerUi\n        ledgerAccountBalances {\n          amount\n          currency\n          balanceType\n        }\n      }\n      currentMerchant {\n        confirmedAccountBalance: accountBalance(\n          currency: $currency\n          balanceType: CONFIRMED\n        ) {\n          display\n        }\n        pendingAccountBalance: accountBalance(\n          currency: $currency\n          balanceType: PENDING\n        ) {\n          display\n          amount\n        }\n      }\n    }\n  }\n": types.PlusPayments_GetAccountBalanceDocument,
    "\n  query MerchantHome_GetOrdersAndAnnouncements {\n    currentMerchant {\n      storeStats {\n        totalGmv {\n          amount\n        }\n      }\n    }\n    announcements {\n      forUsers(announcementType: BD_ANNOUNCEMENT) {\n        message\n        ctaText\n        ctaLink\n        title\n      }\n    }\n  }\n": types.MerchantHome_GetOrdersAndAnnouncementsDocument,
    "\n  query HomeListingFeeDataQuery {\n    currentMerchant {\n      merchantListingFee {\n        latestListingFeeDetails{\n          latestItems\n        }\n        currentCycleListingFeeDetails{\n          currentBasedWssTierLevel\n          currentBasedWssTierName\n          currentFreeThreshold\n          currentItemsOverThreshold\n          currentUnitPrice {\n              amount\n              currencyCode\n          }\n          currentFeeToPay{\n              amount\n              currencyCode\n          }\n          currentCyclePayTime{\n              formatted(fmt: \"MM/d/yy\")\n              __typename\n          }\n        }\n      }\n    }\n  }\n": types.HomeListingFeeDataQueryDocument,
    "\n  query MerchantOnboarding_GetSellerVerificationStatus {\n    currentMerchant {\n      sellerVerification {\n        status\n      }\n    }\n  }\n": types.MerchantOnboarding_GetSellerVerificationStatusDocument,
    "\n  query InfractionQuery(\n    $infractionId: ObjectIdType\n    $merchantId: ObjectIdType\n  ) {\n    policy {\n      merchantWarning(id: $infractionId) {\n        merchant {\n          primaryCurrency\n        }\n        state\n        resolved\n        wssImpact\n        merchantActions\n        outstandingMerchantActions\n        disputeCutoffDay\n        reason {\n          reason\n        }\n        productTrueTagInfo {\n          counterfeitViolation {\n            reason\n          }\n          inappropriateViolation {\n            reason\n          }\n          subreason {\n            subcategory\n          }\n        }\n        createdTime {\n          datetime\n        }\n        effectiveDisputeDeadlineDate {\n          datetime\n          unix\n        }\n        products {\n          name\n          id\n          sku\n          description\n          mainImage {\n            wishUrl(size: SMALL)\n          }\n        }\n        proofs {\n          type\n          id\n          note\n          disputeStatus\n          warningId\n        }\n        impacts {\n          type\n          startDate {\n            datetime\n          }\n          endDate {\n            datetime\n          }\n          countries {\n            name\n          }\n        }\n        order {\n          id\n          state\n          merchantTotal {\n            display\n          }\n          releasedTime {\n            datetime\n          }\n          refundedTime {\n            datetime\n          }\n          tracking {\n            confirmedFulfillmentDate {\n              datetime\n            }\n            deliveredDate {\n              datetime\n            }\n            checkpoints {\n              date {\n                unix\n              }\n              resultingTracking {\n                text\n              }\n            }\n          }\n          shippingDetails {\n            trackingId\n            provider {\n              name\n            }\n          }\n          refundItems {\n            reasonInfo {\n              text\n            }\n          }\n        }\n        trackingDispute {\n          id\n          state\n          messages {\n            ...TrackingMessageFields\n          }\n        }\n        takedownRequest {\n          name\n          contact\n          email\n          phoneNumber\n        }\n        replies {\n          ...ReplyFields\n        }\n      }\n    }\n    brand {\n      brandAuthorizations(merchantId: $merchantId) {\n        id\n        brand {\n          name\n        }\n      }\n    }\n    platformConstants {\n      countriesWeShipTo {\n        name\n        code\n      }\n    }\n  }\n": types.InfractionQueryDocument,
    "\n  fragment ReplyFields on MerchantWarningReplySchema {\n    senderType\n    senderName\n    message\n    translatedMessage\n    images\n    date {\n      unix\n    }\n    files {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n    idFiles {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n  }\n": types.ReplyFieldsFragmentDoc,
    "\n  fragment TrackingMessageFields on TrackingDisputeMessageSchema {\n    senderType\n    senderName\n    message\n    date {\n      unix\n    }\n    files {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n  }\n": types.TrackingMessageFieldsFragmentDoc,
    "\n  query MessagesQuery($infractionId: ObjectIdType) {\n    policy {\n      merchantWarning(id: $infractionId) {\n        trackingDispute {\n          messages {\n            ...TrackingMessageFields\n          }\n        }\n        replies {\n          ...ReplyFields\n        }\n      }\n    }\n  }\n": types.MessagesQueryDocument,
    "\n  mutation RequestPaymentReleaseMutation(\n    $infractionId: ObjectIdType\n    $idFiles: [FileInput!]\n    $agreementFiles: [FileInput!]\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: REQUEST_PAYMENT_RELEASE\n            warningId: $infractionId\n            requestPaymentInput: {\n              idFiles: $idFiles\n              agreementFiles: $agreementFiles\n            }\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.RequestPaymentReleaseMutationDocument,
    "\n  mutation SendMessageMutation(\n    $infractionId: ObjectIdType\n    $messageInput: ReplyInfractionInput!\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: REPLY\n            warningId: $infractionId\n            messageInput: $messageInput\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.SendMessageMutationDocument,
    "\n  mutation SubmitDisputeMutation(\n    $action: MerchantWarningAction!\n    $infractionId: ObjectIdType\n    $disputeInput: DisputeInfractionInput!\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: $action\n            warningId: $infractionId\n            disputeInput: $disputeInput\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.SubmitDisputeMutationDocument,
    "\n  query Tags {\n    platformConstants {\n      topLevelTags {\n        id\n        name\n      }\n    }\n  }\n": types.TagsDocument,
    "\n  mutation InfractionDisputeState_OrderInfractionDisputeMutation(\n    $input: UpsertOrderInfractionDisputeInput!\n  ) {\n    policy {\n      orderInfractionDispute {\n        upsertOrderInfractionDispute(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.InfractionDisputeState_OrderInfractionDisputeMutationDocument,
    "\n  query OrderDetails_InfractionDetails($id: String!) {\n    fulfillment {\n      order(id: $id) {\n        id\n        merchantTotal {\n          display\n        }\n        state\n        isWishExpress\n        isProcessing\n        showAplusShippingAddressTooltip\n        isAdvancedLogistics\n        isBlueFusion\n        fbwDetails {\n          isFbw\n        }\n        releasedTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n          timeUntil {\n            hours\n          }\n        }\n        orderTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        shippedDate {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        refundedTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        refundItems {\n          reasonInfo {\n            reason\n            text\n          }\n        }\n        shippingDetails {\n          trackingId\n          provider {\n            name\n            trackingUrl\n            providerUrl\n          }\n          country {\n            name\n          }\n          name\n          streetAddress1\n          streetAddress2\n          city\n          state\n          zipcode\n          phoneNumber\n        }\n        warehouse {\n          address {\n            name\n            streetAddress1\n            streetAddress2\n            city\n            state\n            zipcode\n            phoneNumber\n            country {\n              name\n            }\n          }\n        }\n        tracking {\n          confirmedFulfillmentDate {\n            formatted(fmt: \"M/d/YYYY h:mm a z\")\n          }\n          checkpoints {\n            date {\n              formatted(fmt: \"YYYY/M/d\")\n            }\n            resultingTracking {\n              state\n              text\n            }\n          }\n          deliveredDate {\n            formatted(fmt: \"M/d/YYYY h:mm a z\")\n          }\n        }\n        product {\n          id\n          name\n          smallPictureUrl\n        }\n        pastTracking {\n          trackingId\n          tracking {\n            checkpoints {\n              date {\n                formatted(fmt: \"YYYY/M/d\")\n              }\n              resultingTracking {\n                state\n                text\n              }\n            }\n          }\n          provider {\n            trackingUrl\n            providerUrl\n            name\n          }\n          lastUpdatedDate {\n            formatted(fmt: \"YYYY/d/M\")\n          }\n        }\n      }\n    }\n  }\n": types.OrderDetails_InfractionDetailsDocument,
    "\n  query OrderShippingProviders_InfractionDisputeForm(\n    $id: String!\n    $originCountryCode: CountryCode!\n  ) {\n    fulfillment {\n      order(id: $id) {\n        availableShippingProviders(originCountryCode: $originCountryCode) {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.OrderShippingProviders_InfractionDisputeFormDocument,
    "\n  mutation Authentication_TwoFactorGenTokenMutation(\n    $input: TwoFactorGenTokenInput!\n  ) {\n    authentication {\n      gen2faCode(input: $input) {\n        obfuscatedPhoneNumber\n        allowTfaPhone\n        isMerchant\n        bdEmail\n        isInternalEmployee\n        ok\n        error\n      }\n    }\n  }\n": types.Authentication_TwoFactorGenTokenMutationDocument,
    "\n  mutation Authentication_GenWechatQrMutation($input: GenWechatQrInput!) {\n    authentication {\n      genWechatQr(input: $input) {\n        ticket\n      }\n    }\n  }\n": types.Authentication_GenWechatQrMutationDocument,
    "\n  mutation Authentication_LoginMutation($input: LoginMutationInput!) {\n    authentication {\n      login(input: $input) {\n        loginOk\n        error\n        errorState\n        obfuscatedPhoneNumber\n        sessionKey\n        preferQr\n        wechatBound\n      }\n    }\n  }\n": types.Authentication_LoginMutationDocument,
    "\n  query Authentication_Okta_Url_Query {\n    platformConstants {\n      oktaOauthUri\n    }\n  }\n": types.Authentication_Okta_Url_QueryDocument,
    "\n  mutation Authentication_WechatCheckScanMutation(\n    $input: WechatCheckScanInput!\n  ) {\n    authentication {\n      checkWechatScan(input: $input) {\n        expireIn\n        scanned\n        ok\n        error\n      }\n    }\n  }\n": types.Authentication_WechatCheckScanMutationDocument,
    "\n  mutation Questionnaire_MerchantLeadSubmit(\n    $input: MerchantLeadSubmissionInput!\n  ) {\n    authentication {\n      merchantLeadSubmission(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.Questionnaire_MerchantLeadSubmitDocument,
    "\n  mutation MmsWelcome_SubmitMmsMerchantLeadMutation(\n    $input: MMSLeadSubmissionInput!\n  ) {\n    authentication {\n      mmsLeadSubmission(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n": types.MmsWelcome_SubmitMmsMerchantLeadMutationDocument,
    "\nquery MerchantListingFee {\n  currentMerchant {\n    merchantListingFee {\n      feePolicyConfig {\n          wssTierLevel\n          wssTierName\n          freeThreshold\n          excessItemUnitPrice{\n              amount\n              currencyCode\n          }\n      }\n      latestListingFeeDetails{\n          latestItems\n      }\n      currentCycleListingFeeDetails{\n        currentBasedWssTierLevel\n        currentBasedWssTierName\n        currentFreeThreshold\n        currentItemsOverThreshold\n        currentUnitPrice {\n            amount\n            currencyCode\n        }\n        currentFeeToPay{\n            amount\n            currencyCode\n        }\n        currentCyclePayTime{\n            formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentPeakItems\n        currentPeakTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentCycleStartTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentCycleEndTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n      }\n    }\n  }\n } \n": types.MerchantListingFeeDocument,
    "\n  mutation NoticePortal_CreateNotice($input: CreateNoticeInput!) {\n    dsa {\n      public {\n        createNotice(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.NoticePortal_CreateNoticeDocument,
    "\n  query Refund_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          refund {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            refunds\n            refundRate\n            refundRatePercentile\n            itemNotMatchingListingPercentage\n            itemNotFitPercentage\n            shippingTakeTooLongPercentage\n            itemDamagedPercentage\n            receivedWrongItemPercentage\n            itemReturnedPercentage\n            itemNotWorkPercentage\n            failToFulfillPercentage\n            deliverWrongAddressPercentage\n            incompleteOrderPercentage\n          }\n        }\n      }\n    }\n  }\n": types.Refund_PerformanceAggregateDataQueryDocument,
    "\n  query Refund_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            refund {\n              refunds\n              itemNotMatchingListingPercentage\n              itemNotFitPercentage\n              shippingTakeTooLongPercentage\n              itemDamagedPercentage\n              receivedWrongItemPercentage\n              itemReturnedPercentage\n              itemNotWorkPercentage\n              failToFulfillPercentage\n              deliverWrongAddressPercentage\n              incompleteOrderPercentage\n            }\n          }\n        }\n        isReturnsEnabled\n      }\n    }\n  }\n": types.Refund_PerformanceBreakdownDataQueryDocument,
    "\n  query CEG_AverageFulfillmentTime_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageFulfillmentTime {\n            days\n          }\n        }\n      }\n    }\n  }\n": types.Ceg_AverageFulfillmentTime_DataQueryDocument,
    "\n  query CEG_AverageRating_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageRating30d\n        }\n      }\n    }\n  }\n": types.Ceg_AverageRating_DataQueryDocument,
    "\n  query CEG_AverageShippingDelay_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageShippingDelay {\n            days\n          }\n        }\n      }\n    }\n  }\n": types.Ceg_AverageShippingDelay_DataQueryDocument,
    "\n  query CEG_AverageShippingTime_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageShippingTime {\n            days\n          }\n        }\n      }\n    }\n  }\n": types.Ceg_AverageShippingTime_DataQueryDocument,
    "\n  query CEG_RefundRate_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          refundRate30d\n        }\n      }\n    }\n  }\n": types.Ceg_RefundRate_DataQueryDocument,
    "\n  query ShippingPerformanceShippingDataQuery($weeks: Int!) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          tracking {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            ordersFulfilled\n            averageClaimedFulfillmentTime {\n              hours\n            }\n            averageFulfillmentTime {\n              hours\n            }\n            ordersWithValidTracking\n            validTrackingRate\n            preFulfillmentCancellations\n            preFulfillmentCancellationRate\n            lateConfirmedFulfillment\n            lateConfirmedFulfillmentRate\n          }\n          delivery {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            ordersConfirmedDelivered\n            ordersConfirmedDeliveredRate\n            shippingTime {\n              days\n            }\n            timeToDoor {\n              days\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ShippingPerformanceShippingDataQueryDocument,
    "\n  query CustomerService_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          cs {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            gmv {\n              amount\n              currencyCode\n            }\n            orders\n            orders30d\n            refund30d\n            refundRatio30d\n            orders93d\n            refund93d\n            refundRatio93d\n            chargeback\n            chargebackRatio\n            chargebackAmount {\n              amount\n              currencyCode\n            }\n            chargebackAmountRatio\n            tickets\n            ticketRatio\n            lateResponseRate30d\n            averageTicketResponseTime {\n              hours\n            }\n            customerSatisfaction\n          }\n        }\n      }\n    }\n  }\n": types.CustomerService_PerformanceAggregateDataQueryDocument,
    "\n  query CustomerService_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            cs {\n              gmv {\n                amount\n                currencyCode\n              }\n              orders\n              orders30d\n              refund30d\n              refundRatio30d\n              orders93d\n              refund93d\n              refundRatio93d\n              averageRating30d\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CustomerService_PerformanceBreakdownDataQueryDocument,
    "\n  query Product_PerformanceProductDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          product {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            activeProducts\n            activeSkus\n            skusPerProduct\n            averagePrice {\n              amount\n              currencyCode\n            }\n            averageShippingPrice {\n              amount\n              currencyCode\n            }\n            priceToShippingRatio\n            averageAdditonalImagesPerProduct\n            productImpressions\n            gmv {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Product_PerformanceProductDataQueryDocument,
    "\n  query Rating_PerformanceAggregateDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            storeRatings\n            averageStoreRating\n            averageProductRating\n            lowStoreRatingPercentage\n            productRatings\n            lowProductRatingPercentage\n            average30dStoreRating\n          }\n        }\n      }\n    }\n  }\n": types.Rating_PerformanceAggregateDataQueryDocument,
    "\n  query Rating_PerformanceWeeklyStoreRatingDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            averageStoreRating\n          }\n        }\n      }\n    }\n  }\n": types.Rating_PerformanceWeeklyStoreRatingDataQueryDocument,
    "\n  query Rating_PerformanceWeeklyProductRatingDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            averageProductRating\n          }\n        }\n      }\n    }\n  }\n": types.Rating_PerformanceWeeklyProductRatingDataQueryDocument,
    "\n  query Rating_PerformanceStoreRatingBreakdownDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            storeRatingsBreakdown {\n              oneStarRatings\n              twoStarRatings\n              threeStarRatings\n              fourStarRatings\n              fiveStarRatings\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Rating_PerformanceStoreRatingBreakdownDataQueryDocument,
    "\n  query Rating_PerformanceProductRatingnBreakdownDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            productRatingsBreakdown {\n              oneStarRatings\n              twoStarRatings\n              threeStarRatings\n              fourStarRatings\n              fiveStarRatings\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Rating_PerformanceProductRatingnBreakdownDataQueryDocument,
    "\n  query Rating_ProductRatingListingDataQuery(\n    $offset: Int\n    $limit: Int\n    $listingTab: ProductRatingListingTab\n  ) {\n    currentMerchant {\n      storeStats {\n        productRatingsCount\n        productRatings(\n          offset: $offset\n          limit: $limit\n          listingTab: $listingTab\n        ) {\n          productId\n          average30dRating\n          ratings\n          sales\n        }\n      }\n    }\n  }\n": types.Rating_ProductRatingListingDataQueryDocument,
    "\n  query Rating_StoreRatingListingDataQuery(\n    $offset: Int\n    $limit: Int\n    $filterByStars: Int\n  ) {\n    currentMerchant {\n      storeStats {\n        storeRatingsCount(filterByStars: $filterByStars)\n        storeRatings(\n          offset: $offset\n          limit: $limit\n          filterByStars: $filterByStars\n        ) {\n          orderIds\n          date\n          rating\n          comment\n          refundReason\n        }\n      }\n    }\n  }\n": types.Rating_StoreRatingListingDataQueryDocument,
    "\n  query Sales_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          sales {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            productImpressions\n            addToCart\n            addToCartConversion\n            orders\n            checkoutConversion\n            gmv {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Sales_PerformanceAggregateDataQueryDocument,
    "\n  query Sales_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            sales {\n              productImpressions\n              addToCart\n              addToCartConversion\n              orders\n              checkoutConversion\n              gmv {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Sales_PerformanceBreakdownDataQueryDocument,
    "\n  query PerformanceOverviewPageInitialDataQuery {\n    policy {\n      misleadingProducts: merchantWarningCount(\n        reasons: [PRODUCT_IS_INAPPROPRIATE]\n        isMisleading: true\n        states: AWAITING_MERCHANT\n      )\n      ipInfringementProducts: merchantWarningCount(\n        reasons: [FINE_FOR_COUNTERFEIT_GOODS]\n        states: AWAITING_MERCHANT\n      )\n      prohibitedProducts: merchantWarningCount(\n        reasons: [PRODUCT_IS_INAPPROPRIATE, CN_PROHIBITED_PRODUCTS]\n        states: AWAITING_MERCHANT\n      )\n    }\n    currentMerchant {\n      id\n      state\n      storeStats {\n        updateTime {\n          formatted(fmt: \"%m/%d/%Y\")\n          timezone\n        }\n        tracking {\n          validTrackingRate\n          lateConfirmedFulfillmentRate\n          averageFulfillmentTime {\n            hours\n          }\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        delivery {\n          timeToDoor {\n            days\n          }\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        refunds {\n          refundRate\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        rating {\n          averageProductRating\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        cs {\n          lateResponseRate30d\n          customerSatisfactionScore\n          averageTicketResponseTime {\n            hours\n          }\n          startDate {\n            iso8061\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            iso8061\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n      }\n    }\n  }\n": types.PerformanceOverviewPageInitialDataQueryDocument,
    "\n  query ProductsMetricsTableComponentQuery {\n    currentMerchant {\n      state\n    }\n  }\n": types.ProductsMetricsTableComponentQueryDocument,
    "\n  query ProductsMetricsTableTableQuery(\n    $offset: Int!\n    $limit: Int!\n    $days: Int!\n    $searchType: ProductSearchType\n    $query: String\n  ) {\n    productCatalog {\n      productCountV2(searchType: $searchType, query: $query, state: ACTIVE)\n      productsV2(\n        limit: $limit\n        offset: $offset\n        searchType: $searchType\n        query: $query\n        sort: { order: DESC, field: SALES }\n        state: ACTIVE\n      ) {\n        sku\n        name\n        id\n        variations {\n          price {\n            amount\n            display\n          }\n        }\n        stats {\n          totals(coreMetricsOnly: true, days: $days) {\n            gmv {\n              amount\n              display\n            }\n            orders\n            impressions\n          }\n        }\n      }\n    }\n  }\n": types.ProductsMetricsTableTableQueryDocument,
    "\nquery ProductsMetricsPerformanceTableQuery($offset: Int!, $limit: Int!, $days: Int!, $searchType: ProductSearchType, $query: String, $withPerformance: Boolean!, $sort: PerformanceProductSort) {\n  productCatalog {\n    productCountV3(withPerformance: $withPerformance)\n    productsV3(\n      limit: $limit\n      offset: $offset\n      sort: $sort\n      withPerformance: $withPerformance\n      days: $days\n      searchType: $searchType\n      query: $query\n    ) {\n      sku\n      name\n      id\n      variations {\n        price {\n          amount\n          display\n        }\n      }\n      stats {\n        totals(coreMetricsOnly: true, days: $days) {\n          gmv {\n            amount\n            display\n          }\n          orders\n          impressions\n        }\n      }\n    }\n  }\n}\n": types.ProductsMetricsPerformanceTableQueryDocument,
    "\n  query TierPreviewBannerQuery {\n    currentMerchant {\n      wishSellerStandard {\n        level\n        stats {\n          levelPreview\n        }\n      }\n    }\n  }\n": types.TierPreviewBannerQueryDocument,
    "\n  query UnderperformingProductsHeaderQuery($days: Int) {\n    currentMerchant {\n      wishSellerStandard {\n        stats {\n          badProductRate\n          badProductCount\n          productWithOrdersCount\n          date {\n            unix\n          }\n        }\n        recentStats(days: $days) {\n          badProductRate\n          date {\n            unix\n          }\n        }\n        monthlyUpdateStats {\n          badProductRate\n        }\n      }\n    }\n  }\n": types.UnderperformingProductsHeaderQueryDocument,
    "\n  query UnderperformingProductsPerformanceScaleQuery {\n    currentMerchant {\n      wishSellerStandard {\n        stats {\n          badProductRate\n        }\n      }\n    }\n  }\n": types.UnderperformingProductsPerformanceScaleQueryDocument,
    "\n  query UnderperformingProductsTableQuery {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productQualityRefund(isBadByRefund: true) {\n            totalCount\n          }\n          productRating(isBadByRating: true) {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n": types.UnderperformingProductsTableQueryDocument,
    "\n  query ProductCatalogProductStats_ProductChart($id: String!, $days: Int!) {\n    productCatalog {\n      product(id: $id) {\n        stats {\n          daily(coreMetricsOnly: true, days: $days) {\n            orders\n            impressions\n            startDate {\n              formatted(fmt: \"%m/%d\")\n              fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n              inTimezone(identifier: \"America/Los_Angeles\") {\n                formatted(fmt: \"%m/%d\")\n                fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ProductCatalogProductStats_ProductChartDocument,
    "\n  query StoreSalesStats_StoreSalesCharts($days: Int!) {\n    currentMerchant {\n      storeStats {\n        totals(coreMetricsOnly: true, days: $days) {\n          gmv {\n            amount\n            display\n            currencyCode\n          }\n          impressions\n          pageViews\n          addToCarts\n          orders\n        }\n        daily(coreMetricsOnly: true, days: $days) {\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n              fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n            }\n          }\n          gmv {\n            amount\n            display\n            currencyCode\n          }\n          impressions\n          orders\n        }\n      }\n    }\n  }\n": types.StoreSalesStats_StoreSalesChartsDocument,
    "\n  query WSSInsight_InfractionWindow {\n    currentMerchant {\n      wishSellerStandard {\n        policyInfractionWindowStartDate {\n          unix\n        }\n        policyInfractionWindowEndDate {\n          unix\n        }\n        fulfillmentInfractionWindowStartDate {\n          unix\n        }\n        fulfillmentInfractionWindowEndDate {\n          unix\n        }\n      }\n    }\n  }\n": types.WssInsight_InfractionWindowDocument,
    "\n  query WSSOrdersDeepDive($days: Int) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          totalRatingsReceived\n          fulfillmentRateDenominator\n          refundRateDenominator\n          hasFulfillmentSpeedOrderCount\n          validTrackingRateDenominator\n          qualityRefundCount\n          orderUnfulfilled {\n            totalCount\n          }\n          orderInvalidTracking {\n            totalCount\n          }\n          orderLogisticsRefund {\n            totalCount\n          }\n        }\n        stats {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n          date {\n            unix\n          }\n        }\n        monthlyUpdateStats {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n        }\n        recentStats(days: $days) {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n          date {\n            unix\n          }\n        }\n      }\n    }\n  }\n": types.WssOrdersDeepDiveDocument,
    "\n  query OrderMetricsDeepDive_UserRating(\n    $offset: Int\n    $limit: Int\n    $sortField: SortProductRatingField\n    $sortOrder: SortByOrder\n    $productIds: [ObjectIdType!]\n    $isBadByRating: Boolean\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productRating(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productIds: $productIds\n            isBadByRating: $isBadByRating\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              receivedRatings\n              averageRating\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_UserRatingDocument,
    "\n  query OrderMetricsDeepDive_OrderFulfillmentRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $unfulfilledReasons: [WSSSUnfulfilledReasons!]\n    $destinations: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderUnfulfilled(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            unfulfilledReasons: $unfulfilledReasons\n            destinations: $destinations\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              orderId\n              transactionDate {\n                unix\n              }\n              unfulfilledReason\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_OrderFulfillmentRateDocument,
    "\n  query OrderMetricsDeepDive_WSSDestinationOptions(\n    $pageType: WSSDeepDivePageType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          destinations(pageType: $pageType)\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_WssDestinationOptionsDocument,
    "\n  query OrderMetricsDeepDive_WSSCarrierOptions(\n    $pageType: WSSDeepDivePageType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          carriers(pageType: $pageType)\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_WssCarrierOptionsDocument,
    "\n  query OrderMetricsDeepDive_WSSUnfulfilledReasonOptions {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          unfulfilledReasons\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_WssUnfulfilledReasonOptionsDocument,
    "\n  query OrderMetricsDeepDive_WSSLogisticsRefundReasonOptions {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          logisticsRefundReasons\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_WssLogisticsRefundReasonOptionsDocument,
    "\n  query OrderMetricsDeepDive_WSSQualityRefundReasonOptions(\n    $productId: ObjectIdType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          qualityRefundReasons(productId: $productId)\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_WssQualityRefundReasonOptionsDocument,
    "\n  query OrderMetricsDeepDive_ProductQualityRefund(\n    $offset: Int\n    $limit: Int\n    $sortField: SortProductQualityRefundField\n    $sortOrder: SortByOrder\n    $productIds: [ObjectIdType!]\n    $isBadByRefund: Boolean\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productQualityRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productIds: $productIds\n            isBadByRefund: $isBadByRefund\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              receivedOrders\n              qualityRefundIssued\n              qualityRefundRate\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_ProductQualityRefundDocument,
    "\n  query OrderMetricsDeepDive_OrderQualityRefund(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $productId: ObjectIdType\n    $refundReasons: [WSSQualityRefundReason!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderQualityRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productId: $productId\n            refundReasons: $refundReasons\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              refundReason\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_OrderQualityRefundDocument,
    "\n  query OrderMetricsDeepDive_QualityRefundBreakdown($productId: ObjectIdType) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          qualityRefundBreakdown(productId: $productId) {\n            productId\n            reason\n            count\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_QualityRefundBreakdownDocument,
    "\n  query OrderMetricsDeepDive_ConfirmedFulfillmentSpeed(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderFulfillmentSpeed\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $destinations: [String!]\n    $carriers: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderFulfillmentSpeed(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            destinations: $destinations\n            carriers: $carriers\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              trackingId\n              carrier\n              fulfillmentSpeed {\n                days\n                hours\n                minutes\n                seconds\n              }\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_ConfirmedFulfillmentSpeedDocument,
    "\n  query OrderMetricsDeepDive_ValidTrackingRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $destinations: [String!]\n    $carriers: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          destinationsInFulfillment\n          carriersInFulfillment\n          orderInvalidTracking(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            destinations: $destinations\n            carriers: $carriers\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_ValidTrackingRateDocument,
    "\n  query OrderMetricsDeepDive_LogisticsRefundRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $carriers: [String!]\n    $refundReasons: [WSSLogisticsRefundReason!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderLogisticsRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            carriers: $carriers\n            refundReasons: $refundReasons\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              refundReason\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrderMetricsDeepDive_LogisticsRefundRateDocument,
    "\n  query MerchantScore_ThingsToWatch {\n    currentMerchant {\n      wishSellerStandard {\n        thingsToWatchBoard {\n          dataSlice {\n            metricType\n            metricTrend\n            metricValue\n            recordTime {\n              unix\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MerchantScore_ThingsToWatchDocument,
    "\n  query MerchantScore_MerchantScoreSection {\n    currentMerchant {\n      id\n      wishSellerStandard {\n        prevLevel\n        level\n        rawLevel\n        layer1Level\n        isInactiveToBan\n        lastTierUpdateDate {\n          unix\n        }\n        nextMonthlyTierUpdateDate {\n          unix\n        }\n        endDateForLastMonthlyUpdateCalcWindow {\n          unix\n        }\n        policyInfractionWindowStartDate {\n          unix\n        }\n        policyInfractionWindowEndDate {\n          unix\n        }\n        fulfillmentInfractionWindowStartDate {\n          unix\n        }\n        fulfillmentInfractionWindowEndDate {\n          unix\n        }\n        stats {\n          userRating\n          orderFultillmentRate\n          validTrackingRate\n          productQualityRefundRate\n          productLogisticsRefundRate\n          badProductRate\n          fulfillmentSpeed {\n            days\n            hours\n            minutes\n            seconds\n          }\n          maturedOrderCount\n          ninetyDayOrderCount\n          date {\n            unix\n          }\n        }\n        lastUpdatedStats {\n          mmddyyyy\n        }\n        monthlyUpdateStats {\n          userRating\n          orderFultillmentRate\n          validTrackingRate\n          productQualityRefundRate\n          productLogisticsRefundRate\n          badProductRate\n          fulfillmentSpeed {\n            days\n            hours\n            minutes\n            seconds\n          }\n          maturedOrderCount\n          ninetyDayOrderCount\n          date {\n            unix\n          }\n        }\n        complianceUpdateStats {\n          misleadingTrackingCount\n          prohibitedProductCount\n          misleadingListingCount\n          orderCancellationCount\n          unfulfilledOrderCount\n          lateConfirmedFulfillmentCount\n          date {\n            unix\n          }\n        }\n      }\n    }\n  }\n": types.MerchantScore_MerchantScoreSectionDocument,
    "\nquery ListingFeePolicyConfig {\n  currentMerchant {\n    merchantListingFee {\n      feePolicyConfig {\n        wssTierLevel\n        wssTierName\n        freeThreshold\n        excessItemUnitPrice {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n": types.ListingFeePolicyConfigDocument,
    "\n  mutation AddEprMutation($input: CreateUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          createUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n": types.AddEprMutationDocument,
    "\n  mutation EditEprMutation($input: UpdateUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          updateUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n": types.EditEprMutationDocument,
    "\n  mutation DeleteEprMutation($input: DeleteUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          deleteUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n": types.DeleteEprMutationDocument,
    "\n  query EprNonCompliantSummaryQuery {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            summaryRecords {\n              country {\n                name\n                code\n              }\n              eprCategoryName\n              nonCompliantProductCount\n            }\n          }\n        }\n      }\n    }\n  }\n": types.EprNonCompliantSummaryQueryDocument,
    "\n  query EprNonCompliantCountriesAvailableQuery {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            summaryRecords {\n              country {\n                name\n                code\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.EprNonCompliantCountriesAvailableQueryDocument,
    "\n  query EprNonCompliantProductsQuery(\n    $countryCode: CountryCode!\n    $eprCategories: [Int!]\n    $productId: String\n    $offset: Int\n    $limit: Int\n  ) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            productRecordTotal(\n              countryCode: $countryCode\n              eprCategories: $eprCategories\n              productId: $productId\n            )\n            productRecords(\n              countryCode: $countryCode\n              eprCategories: $eprCategories\n              productId: $productId\n              offset: $offset\n              limit: $limit\n            ) {\n              productId\n              country {\n                name\n                code\n              }\n              taxonomyCategoryNames\n              eprCategoryNames\n            }\n          }\n        }\n      }\n    }\n  }\n": types.EprNonCompliantProductsQueryDocument,
    "\n  query ExtendedProducerResponsibilityPageQuery($countryCode: CountryCode!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          country(countryCode: $countryCode) {\n            hasAcceptedTos\n            categories {\n              eprId: id # using id as a name breaks Apollo's caching\n              category\n              categoryName\n              uin\n              responsibleEntityName\n              status\n              inScopePidCount\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ExtendedProducerResponsibilityPageQueryDocument,
    "\n  query ProductComplianceCenterQuery {\n    policy {\n      productCompliance {\n        productsWithEuResponsiblePerson: linkCount(\n          categories: [TOYS, ELECTRICAL_PRODUCTS, PPE, ELECTRONICS]\n          euComplianceCategories: [\n            FOOD\n            EEE\n            ENVIRONMENT\n            OTHER\n            CHEMICAL\n            COSMETICS\n            TOYS\n          ]\n          states: [HAS_RP]\n          complianceTypes: [EU_COMPLIANCE]\n        )\n        productsWithoutEuResponsiblePerson: linkCount(\n          categories: [TOYS, ELECTRICAL_PRODUCTS, PPE, ELECTRONICS]\n          euComplianceCategories: [\n            FOOD\n            EEE\n            ENVIRONMENT\n            OTHER\n            CHEMICAL\n            COSMETICS\n            TOYS\n          ]\n          states: [NO_RP]\n          complianceTypes: [EU_COMPLIANCE]\n        )\n        extendedProducerResponsibility {\n          countries {\n            country {\n              name\n              code\n            }\n            categoriesWithEpr\n            categoriesWithoutEpr\n            hasAcceptedTos\n          }\n          eprNonCompliantSummary {\n            summaryRecords {\n              nonCompliantProductCount\n            }\n          }\n        }\n        euComplianceInScope\n      }\n    }\n  }\n": types.ProductComplianceCenterQueryDocument,
    "\n  query TosModalQuery($countryCode: CountryCode!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          country(countryCode: $countryCode) {\n            tos\n          }\n        }\n      }\n    }\n  }\n": types.TosModalQueryDocument,
    "\n  mutation AcceptTosMutation($input: AcceptTosInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          acceptTos(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n": types.AcceptTosMutationDocument,
    "\n  query ProductCsvHistory_GetNewBulkJobsDetail(\n      $bulkCsvJobId: String!\n    ) {\n      productCatalog {\n        newBulkCsvJobDetail(bulkCsvJobId: $bulkCsvJobId) {\n          id\n          startTime {\n            unix\n          }\n          completedTime {\n            unix\n          }\n          fileName\n          fileLink\n          feedType\n          status\n          totalCount\n          aliveCount\n          errorsCount\n          processingCount\n          underReviewCount\n          noChangesCount\n        }\n      }\n    } \n": types.ProductCsvHistory_GetNewBulkJobsDetailDocument,
    "\n  query ProductCsvHistory_GetNewBulkAddEditJobsV2(\n      $offset: Int!,\n      $limit: Int!,\n      $feedType: ProductCSVJobType\n    ) {\n      productCatalog {\n        newBulkCsvJobs(offset: $offset, limit: $limit, feedType: $feedType) {\n          id\n          startTime {\n            unix\n          }\n          completedTime {\n            unix\n          }\n          fileName\n          feedType\n          status\n          version\n        }\n        newBulkCsvJobsCount(feedType: $feedType)\n      }\n    } \n": types.ProductCsvHistory_GetNewBulkAddEditJobsV2Document,
    "\n  query CSV_GetTaxonomyTreeCsvRows {\n    taxonomy {\n      taxonomyTreeCsv\n    }\n  }\n": types.Csv_GetTaxonomyTreeCsvRowsDocument,
    "\n  mutation CSV_UpsertProductCsvMutation(\n    $input: UpsertProductsFromCSVFileInput!\n  ) {\n    productCatalog {\n      upsertProductCsvFile(input: $input) {\n        ok\n        message\n        jobId\n      }\n    }\n  }\n": types.Csv_UpsertProductCsvMutationDocument,
    "\n  mutation downloadProductCatalog($input: DownloadAllProductsInput!) {\n    productCatalog {\n      downloadAllProducts(input: $input) {\n        errorMessage\n        ok\n      }\n    }\n  }\n": types.DownloadProductCatalogDocument,
    "\n  query DownloadAllHeaders($subcategoryIds: [Int!]) {\n    productCatalog {\n      csvAllHeaderNames(subcategoryIds: $subcategoryIds)\n    }\n  }\n": types.DownloadAllHeadersDocument,
    "\n  query DownloadEditVariationHeaders($subcategoryIds: [Int!]) {\n    productCatalog {\n      csvEditVariationsHeaderNames(subcategoryIds: $subcategoryIds)\n    }\n  }\n": types.DownloadEditVariationHeadersDocument,
    "\n  query DownloadShippingHeaders {\n    productCatalog {\n      csvShippingHeaderNames\n    }\n  }\n": types.DownloadShippingHeadersDocument,
    "\n  query DownloadPriceInventoryHeaders {\n    productCatalog {\n      csvPriceInventoryHeaderNames\n    }\n  }\n": types.DownloadPriceInventoryHeadersDocument,
    "\n  query DownloadTitleImageDescHeaders {\n    productCatalog {\n      csvTitleImagesDescriptionHeaderNames\n    }\n  }\n": types.DownloadTitleImageDescHeadersDocument,
    "\n  query DownloadEnableDisableHeaders {\n    productCatalog {\n      csvEnableDisableHeaderNames\n    }\n  }\n": types.DownloadEnableDisableHeadersDocument,
    "\n  query DownloadCsvConsignmentHeaders {\n    productCatalog {\n      csvConsignmentHeaderNames\n    }\n  }\n": types.DownloadCsvConsignmentHeadersDocument,
    "\n  query merchantConsignmentModeQuery {\n    currentMerchant {\n      isConsignmentMode\n    }\n  }\n": types.MerchantConsignmentModeQueryDocument,
    "\n  mutation CreateProductDownloadsJobForMerchantPromotionsMutation(\n    $input: CreateProductsDownloadJobInput!\n  ) {\n    mfp {\n      createProductsDownloadJob(input: $input) {\n        ok\n        message\n        jobId\n      }\n    }\n  }\n": types.CreateProductDownloadsJobForMerchantPromotionsMutationDocument,
    "\n  query EligibleCountriesQuery {\n    currentMerchant {\n      shippingSettings {\n        country {\n          code\n          name\n        }\n      }\n    }\n  }\n": types.EligibleCountriesQueryDocument,
    "\n  query MfpTools_GetEligibleProductsGeneric(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $offset: Int\n    $limit: Int\n    $eventId: ObjectIdType\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      eligibleProducts: genericEligibleProducts(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        offset: $offset\n        limit: $limit\n        eventId: $eventId\n        currency: $merchantCurrency\n      )\n    }\n  }\n": types.MfpTools_GetEligibleProductsGenericDocument,
    "\n  query MfpTools_GetEligibleProducts(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $offset: Int\n    $limit: Int\n    $eventId: ObjectIdType\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      eligibleProducts(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        offset: $offset\n        limit: $limit\n        eventId: $eventId\n      ) {\n        product {\n          id\n          name\n          sales\n          sku\n          flatRateShippingCountryCandidates {\n            country {\n              code\n            }\n            price {\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n          }\n          shipping {\n            defaultShipping {\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            warehouseCountryShipping {\n              countryShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n                country {\n                  code\n                }\n              }\n            }\n          }\n          categories {\n            id\n            name\n          }\n          l1Category {\n            id\n            name\n          }\n        }\n        variations {\n          id\n          inventory {\n            count\n          }\n          color\n          size\n          price {\n            amount\n            currencyCode\n            display\n            convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n              amount\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MfpTools_GetEligibleProductsDocument,
    "\n  query MfpTools_GetEligibleProductsCount(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $eventId: ObjectIdType\n  ) {\n    mfp {\n      eligibleProductsCount(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        eventId: $eventId\n      )\n    }\n  }\n": types.MfpTools_GetEligibleProductsCountDocument,
    "\n  query GetWhitelistProducts_ProductWhitelistingSection(\n    $productIds: [ObjectIdType!]\n    $offset: Int\n    $limit: Int\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      activeWhitelistProducts(\n        productIds: $productIds\n        offset: $offset\n        limit: $limit\n      ) {\n        product {\n          id\n          name\n          sales\n          sku\n          flatRateShippingCountryCandidates {\n            country {\n              code\n            }\n            price {\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n          }\n          shipping {\n            defaultShipping {\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            warehouseCountryShipping {\n              countryShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n                country {\n                  code\n                }\n              }\n            }\n          }\n          categories {\n            id\n            name\n          }\n          l1Category {\n            id\n            name\n          }\n        }\n        variations {\n          id\n          inventory {\n            count\n          }\n          color\n          size\n          price {\n            amount\n            currencyCode\n            display\n            convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n              amount\n            }\n          }\n        }\n        startTime {\n          formatted(fmt: \"YYYY-MM-dd h:mm a z\")\n          unix\n        }\n        endTime {\n          formatted(fmt: \"YYYY-MM-dd h:mm a z\")\n          unix\n        }\n      }\n      activeWhitelistProductsCount(productIds: $productIds)\n    }\n  }\n": types.GetWhitelistProducts_ProductWhitelistingSectionDocument,
    "\n  query MfpTools_GetPrefillCampaignQuery(\n    $id: String\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      campaigns(\n        searchType: CAMPAIGN_ID\n        searchQuery: $id\n        offset: 0\n        limit: 1\n      ) {\n        name\n        id\n        state\n        startTime {\n          unix\n        }\n        endTime {\n          unix\n        }\n        countries {\n          code\n        }\n        promotionType\n        unqualifiedProductVariations {\n          variation {\n            id\n            productId\n          }\n        }\n        flashSaleDetails {\n          maxQuantity\n          discountPercentage\n          product {\n            id\n            name\n            sales\n            sku\n            categories {\n              id\n              name\n            }\n            flatRateShippingCountryCandidates {\n              country {\n                code\n              }\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            shipping {\n              defaultShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n              }\n              warehouseCountryShipping {\n                countryShipping {\n                  price {\n                    convertedTo(\n                      currency: $merchantCurrency\n                      rate: WISH_LATEST\n                    ) {\n                      amount\n                    }\n                  }\n                  country {\n                    code\n                  }\n                }\n              }\n            }\n            variations {\n              id\n              color\n              size\n              productId\n              price {\n                amount\n                currencyCode\n                display\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n              inventory {\n                count\n              }\n            }\n          }\n          variation {\n            id\n            color\n            size\n            productId\n            price {\n              amount\n              currencyCode\n              display\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n            inventory {\n              count\n            }\n          }\n        }\n        discountDetails {\n          maxQuantity\n          discountPercentage\n          product {\n            id\n            name\n            sales\n            sku\n            flatRateShippingCountryCandidates {\n              country {\n                code\n              }\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            shipping {\n              defaultShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n              }\n              warehouseCountryShipping {\n                countryShipping {\n                  price {\n                    convertedTo(\n                      currency: $merchantCurrency\n                      rate: WISH_LATEST\n                    ) {\n                      amount\n                    }\n                  }\n                  country {\n                    code\n                  }\n                }\n              }\n            }\n            categories {\n              id\n              name\n            }\n            variations {\n              id\n              color\n              size\n              productId\n              price {\n                amount\n                currencyCode\n                display\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n              inventory {\n                count\n              }\n            }\n          }\n          variation {\n            id\n            color\n            size\n            productId\n            price {\n              amount\n              currencyCode\n              display\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n            inventory {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MfpTools_GetPrefillCampaignQueryDocument,
    "\n  query MfpTools_GetCampaignEvents(\n    $offset: Int\n    $limit: Int\n    $sort: CampaignEventSort\n    $startAtMin: DatetimeInput\n    $submitAtMin: DatetimeInput\n    $promotionTypes: [MFPCampaignPromotionType!]\n  ) {\n    mfp {\n      campaignEvents(\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        startAtMin: $startAtMin\n        submitAtMin: $submitAtMin\n        promotionTypes: $promotionTypes\n      ) {\n        id\n        name\n        description\n        minDiscountPercentage\n        promotionType\n        startTime {\n          formatted(fmt: \"MMM d\")\n          unix\n        }\n        endTime {\n          formatted(fmt: \"MMM d\")\n          unix\n        }\n        submissionDeadline {\n          formatted(fmt: \"MMM d, YYYY\")\n          unix\n        }\n        productCategoryRestrictions {\n          id\n          name\n        }\n        countries {\n          code\n        }\n      }\n      campaignEventsCount(\n        startAtMin: $startAtMin\n        submitAtMin: $submitAtMin\n        promotionTypes: $promotionTypes\n      )\n    }\n  }\n": types.MfpTools_GetCampaignEventsDocument,
    "\n  mutation SellerIdentity_AcceptMerchantPolicy(\n    $input: AcceptMerchantPolicyInput!\n  ) {\n    currentMerchant {\n      merchantTermsAgreed {\n        acceptMerchantPolicy(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.SellerIdentity_AcceptMerchantPolicyDocument,
    "\n  query getMerchantBankVerificationStateReason {\n    currentMerchant {\n      bankAccountVerification {\n        state\n        stateReason\n        dueDate{\n          formatted(fmt:\"%m/%d/%Y\")\n        }\n        bankAccountDocuments{\n          id\n          state\n          comment\n        }\n      }\n    }\n  }\n": types.GetMerchantBankVerificationStateReasonDocument,
    "\n  query getMerchantTaxIdentityVerificationState($verificationType: MerchantIdentityVerificationType) {\n    currentMerchant {\n      id\n      countryOfDomicile {\n        code\n      }\n      merchantIdentityVerification(verificationType: $verificationType) {\n        state\n        latestMerchantIdentityDocument {\n          id\n          state\n          stateReason\n          comment\n        }\n        stateReason\n        dueDate{\n          formatted(fmt:\"%m/%d/%Y\")\n        }\n      }\n    }\n    currentUser{\n      entityType\n    }\n  }\n": types.GetMerchantTaxIdentityVerificationStateDocument,
    "\n  query getSellerIdentityRejectReasons($verificationType: MerchantIdentityVerificationType) {\n    merchantIdentity {\n      rejectReasons(verificationType: $verificationType)\n    }\n  }\n": types.GetSellerIdentityRejectReasonsDocument,
    "\n  mutation SellerIdentity_UploadBankDocuments(\n    $input: UploadBankAccountDocumentInput!\n  ) {\n    currentMerchant {\n      bankAccountVerification {\n        uploadDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n": types.SellerIdentity_UploadBankDocumentsDocument,
    "\nmutation uploadMerchantIdentityDocument($input:UploadMerchantIdentityDocumentInput!) {\n  currentMerchant {\n      merchantIdentityVerification {\n          uploadDocument(input: $input) {\n              ok\n              message\n          }\n      }\n  }\n}\n": types.UploadMerchantIdentityDocumentDocument,
    "\n      query AdminCheck {\n        su {\n          id\n        }\n        currentUser {\n          isAdmin\n        }\n      }\n    ": types.AdminCheckDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ProductEditState_EditOrCreateProduct($input: ProductUpsertInput!) {\n    productCatalog {\n      upsertProduct(input: $input) {\n        ok\n        message\n        productId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductEditState_EditOrCreateProduct($input: ProductUpsertInput!) {\n    productCatalog {\n      upsertProduct(input: $input) {\n        ok\n        message\n        productId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ProductEditState_RemoveProduct($input: RemoveProductInput!) {\n    productCatalog {\n      removeProduct(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ProductEditState_RemoveProduct($input: RemoveProductInput!) {\n    productCatalog {\n      removeProduct(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EXISTING_COMPLIANCE_DOCUMENTS($id: String!) {\n    productCatalog {\n      product(id: $id) {\n        productComplianceDocuments {\n          fileName\n          fileUrl\n          documentLabel\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EXISTING_COMPLIANCE_DOCUMENTS($id: String!) {\n    productCatalog {\n      product(id: $id) {\n        productComplianceDocuments {\n          fileName\n          fileUrl\n          documentLabel\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UPDATE_COMPLIANCE_DOCUMENTS(\n    $input: [ProductComplianceDocumentInput!]!\n  ) {\n    productCatalog {\n      uploadProductComplianceDocument(input: $input) {\n        ok\n        failure\n        fileUrls\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UPDATE_COMPLIANCE_DOCUMENTS(\n    $input: [ProductComplianceDocumentInput!]!\n  ) {\n    productCatalog {\n      uploadProductComplianceDocument(input: $input) {\n        ok\n        failure\n        fileUrls\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BrandSearch_GetTrueBrands(\n    $count: Int!\n    $offset: Int!\n    $queryString: String!\n    $sort: BrandSort!\n  ) {\n    brand {\n      trueBrands(\n        count: $count\n        offset: $offset\n        queryString: $queryString\n        sort: $sort\n      ) {\n        id\n        displayName\n        logoUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query BrandSearch_GetTrueBrands(\n    $count: Int!\n    $offset: Int!\n    $queryString: String!\n    $sort: BrandSort!\n  ) {\n    brand {\n      trueBrands(\n        count: $count\n        offset: $offset\n        queryString: $queryString\n        sort: $sort\n      ) {\n        id\n        displayName\n        logoUrl\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AddEdit_GetGtinProductQuery(\n    $gtins: [String!]!\n    $currency: PaymentCurrencyCode!\n  ) {\n    productCatalog {\n      gtinProductService {\n        product(gtins: $gtins) {\n          title\n          description\n          imageUrls\n          wishBrand {\n            displayName\n          }\n          variations {\n            gtin\n            color\n            size\n            imageUrls\n            length {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            width {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            height {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            weight {\n              value(targetUnit: GRAM)\n              unit\n            }\n            price {\n              convertedTo(currency: $currency, rate: MKL_POLICY) {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AddEdit_GetGtinProductQuery(\n    $gtins: [String!]!\n    $currency: PaymentCurrencyCode!\n  ) {\n    productCatalog {\n      gtinProductService {\n        product(gtins: $gtins) {\n          title\n          description\n          imageUrls\n          wishBrand {\n            displayName\n          }\n          variations {\n            gtin\n            color\n            size\n            imageUrls\n            length {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            width {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            height {\n              value(targetUnit: CENTIMETER)\n              unit\n            }\n            weight {\n              value(targetUnit: GRAM)\n              unit\n            }\n            price {\n              convertedTo(currency: $currency, rate: MKL_POLICY) {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBrandMatch($brandName: String!) {\n    brand {\n      trueBrands(brandName: $brandName, count: 1) {\n        id\n        displayName\n        logoUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBrandMatch($brandName: String!) {\n    brand {\n      trueBrands(brandName: $brandName, count: 1) {\n        id\n        displayName\n        logoUrl\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AddProduct_GetInitialDataQuery {\n    currentMerchant {\n      standardWarehouseId\n      primaryCurrency\n      canManageShipping\n      isCnForFulfillment\n      isCnMerchant\n      isStoreMerchant\n      shippingSettings(enabled: true) {\n        country {\n          name\n          code\n          gmvRank\n          regions {\n            code\n            name\n          }\n          wishExpress {\n            expectedTimeToDoor\n          }\n        }\n      }\n    }\n    currentUser {\n      gating {\n        useCalculatedShipping: isAllowed(name: \"use_calculated_shipping\")\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      product {\n        prop65Chemicals\n      }\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showRevampedAddEditProductUI: decideForName(\n          name: \"add_edit_product_ui_revamp\"\n        )\n        showInventoryOnHand: decideForName(name: \"show_inventory_on_hand\")\n      }\n    }\n    productCatalog {\n      productCount\n    }\n  }\n"): (typeof documents)["\n  query AddProduct_GetInitialDataQuery {\n    currentMerchant {\n      standardWarehouseId\n      primaryCurrency\n      canManageShipping\n      isCnForFulfillment\n      isCnMerchant\n      isStoreMerchant\n      shippingSettings(enabled: true) {\n        country {\n          name\n          code\n          gmvRank\n          regions {\n            code\n            name\n          }\n          wishExpress {\n            expectedTimeToDoor\n          }\n        }\n      }\n    }\n    currentUser {\n      gating {\n        useCalculatedShipping: isAllowed(name: \"use_calculated_shipping\")\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      product {\n        prop65Chemicals\n      }\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showRevampedAddEditProductUI: decideForName(\n          name: \"add_edit_product_ui_revamp\"\n        )\n        showInventoryOnHand: decideForName(name: \"show_inventory_on_hand\")\n      }\n    }\n    productCatalog {\n      productCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EditProduct_GetInitialDataQuery($productId: String) {\n    su {\n      isBd\n    }\n    currentMerchant {\n      isConsignmentMode\n      standardWarehouseId\n      primaryCurrency\n      canManageShipping\n      isCnForFulfillment\n      isCnMerchant\n      shippingSettings(enabled: true) {\n        country {\n          name\n          code\n          gmvRank\n          regions {\n            code\n            name\n          }\n          wishExpress {\n            expectedTimeToDoor\n          }\n        }\n      } \n    }\n    currentUser {\n      gating {\n        useCalculatedShipping: isAllowed(name: \"use_calculated_shipping\")\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      product {\n        prop65Chemicals\n      }\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showRevampedAddEditProductUI: decideForName(\n          name: \"add_edit_product_ui_revamp\"\n        )\n        showInventoryOnHand: decideForName(name: \"show_inventory_on_hand\")\n        showConsignmentOverwrite: decideForName(name: \"show_consignment_overwrite\")\n      }\n    }\n    policy {\n      productCategoryDispute {\n        disputes(\n          searchType: PRODUCT_ID\n          query: $productId\n          states: [PENDING_REVIEW, RESOLVED_UNCHANGED, RESOLVED_UPDATE]\n        ) {\n          id\n        }\n      }\n    }\n    productCatalog {\n      product(id: $productId) {\n        id\n        name\n        sku\n        description\n        enabled\n        reviewStatus\n        condition\n        maxQuantity\n        eligibleForCategoryDispute\n        warningType\n        chemicalNames\n        isConsignmentEligible\n        consignmentOriginalPid\n        consignmentReferenceLink\n        subcategory {\n          id\n          name\n          categoryChildren {\n            id\n            name\n          }\n          categoriesAlongPath {\n            id\n            name\n          }\n        }\n        createTime {\n          formatted(fmt: \"%s\")\n        }\n        lastUpdateTime {\n          formatted(fmt: \"%s\")\n        }\n        tags\n        upc\n        referenceWeight {\n          unit\n          value\n        }\n        referenceLength {\n          unit\n          value\n        }\n        referenceVolume {\n          unit\n          value\n        }\n        referenceArea {\n          unit\n          value\n        }\n        referenceUnit {\n          unit\n          value\n        }\n        variations {\n          id\n          sku\n          color\n          size\n          gtin\n          enabled\n          declaredValue {\n            amount\n          }\n          declaredName\n          declaredLocalName\n          pieces\n          hasPowder\n          hasLiquid\n          hasBattery\n          hasMetal\n          originCountry {\n            code\n          }\n          weight {\n            value(targetUnit: GRAM)\n          }\n          effectiveWeight {\n            value(targetUnit: GRAM)\n          }\n          height {\n            value(targetUnit: CENTIMETER)\n          }\n          width {\n            value(targetUnit: CENTIMETER)\n          }\n          length {\n            value(targetUnit: CENTIMETER)\n          }\n          customsHsCode\n          price {\n            amount\n            currencyCode\n          }\n          consignmentSupplyCost {\n            amount\n            currencyCode\n          }\n          image {\n            id\n            wishUrl\n            isCleanImage\n          }\n          inventory {\n            count\n            shippingType\n            warehouseId\n          }\n          quantityWeight {\n            value\n          }\n          quantityLength {\n            value\n          }\n          quantityVolume {\n            value\n          }\n          quantityArea {\n            value\n          }\n          quantityUnit {\n            value\n          }\n          attributes {\n            name\n            value\n          }\n          options {\n            name\n            value\n          }\n        }\n        mainImage {\n          id\n          wishUrl\n          isCleanImage\n        }\n        extraImages {\n          id\n          wishUrl\n          isCleanImage\n        }\n        requestedBrand {\n          id\n          displayName\n          logoUrl\n        }\n        shipping {\n          defaultShipping {\n            warehouseId\n            price {\n              amount\n              currencyCode\n            }\n          }\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              enabled\n              timeToDoor\n              wishExpressTtdRequirement\n              regionShipping {\n                enabled\n                timeToDoor\n                region {\n                  name\n                  code\n                }\n                price {\n                  amount\n                }\n              }\n              country {\n                code\n                name\n                gmvRank\n                regions {\n                  code\n                  name\n                }\n              }\n              price {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n        isRemovedByWish\n        categories {\n          name\n        }\n        attributes {\n          name\n          value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EditProduct_GetInitialDataQuery($productId: String) {\n    su {\n      isBd\n    }\n    currentMerchant {\n      isConsignmentMode\n      standardWarehouseId\n      primaryCurrency\n      canManageShipping\n      isCnForFulfillment\n      isCnMerchant\n      shippingSettings(enabled: true) {\n        country {\n          name\n          code\n          gmvRank\n          regions {\n            code\n            name\n          }\n          wishExpress {\n            expectedTimeToDoor\n          }\n        }\n      } \n    }\n    currentUser {\n      gating {\n        useCalculatedShipping: isAllowed(name: \"use_calculated_shipping\")\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      product {\n        prop65Chemicals\n      }\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showRevampedAddEditProductUI: decideForName(\n          name: \"add_edit_product_ui_revamp\"\n        )\n        showInventoryOnHand: decideForName(name: \"show_inventory_on_hand\")\n        showConsignmentOverwrite: decideForName(name: \"show_consignment_overwrite\")\n      }\n    }\n    policy {\n      productCategoryDispute {\n        disputes(\n          searchType: PRODUCT_ID\n          query: $productId\n          states: [PENDING_REVIEW, RESOLVED_UNCHANGED, RESOLVED_UPDATE]\n        ) {\n          id\n        }\n      }\n    }\n    productCatalog {\n      product(id: $productId) {\n        id\n        name\n        sku\n        description\n        enabled\n        reviewStatus\n        condition\n        maxQuantity\n        eligibleForCategoryDispute\n        warningType\n        chemicalNames\n        isConsignmentEligible\n        consignmentOriginalPid\n        consignmentReferenceLink\n        subcategory {\n          id\n          name\n          categoryChildren {\n            id\n            name\n          }\n          categoriesAlongPath {\n            id\n            name\n          }\n        }\n        createTime {\n          formatted(fmt: \"%s\")\n        }\n        lastUpdateTime {\n          formatted(fmt: \"%s\")\n        }\n        tags\n        upc\n        referenceWeight {\n          unit\n          value\n        }\n        referenceLength {\n          unit\n          value\n        }\n        referenceVolume {\n          unit\n          value\n        }\n        referenceArea {\n          unit\n          value\n        }\n        referenceUnit {\n          unit\n          value\n        }\n        variations {\n          id\n          sku\n          color\n          size\n          gtin\n          enabled\n          declaredValue {\n            amount\n          }\n          declaredName\n          declaredLocalName\n          pieces\n          hasPowder\n          hasLiquid\n          hasBattery\n          hasMetal\n          originCountry {\n            code\n          }\n          weight {\n            value(targetUnit: GRAM)\n          }\n          effectiveWeight {\n            value(targetUnit: GRAM)\n          }\n          height {\n            value(targetUnit: CENTIMETER)\n          }\n          width {\n            value(targetUnit: CENTIMETER)\n          }\n          length {\n            value(targetUnit: CENTIMETER)\n          }\n          customsHsCode\n          price {\n            amount\n            currencyCode\n          }\n          consignmentSupplyCost {\n            amount\n            currencyCode\n          }\n          image {\n            id\n            wishUrl\n            isCleanImage\n          }\n          inventory {\n            count\n            shippingType\n            warehouseId\n          }\n          quantityWeight {\n            value\n          }\n          quantityLength {\n            value\n          }\n          quantityVolume {\n            value\n          }\n          quantityArea {\n            value\n          }\n          quantityUnit {\n            value\n          }\n          attributes {\n            name\n            value\n          }\n          options {\n            name\n            value\n          }\n        }\n        mainImage {\n          id\n          wishUrl\n          isCleanImage\n        }\n        extraImages {\n          id\n          wishUrl\n          isCleanImage\n        }\n        requestedBrand {\n          id\n          displayName\n          logoUrl\n        }\n        shipping {\n          defaultShipping {\n            warehouseId\n            price {\n              amount\n              currencyCode\n            }\n          }\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              enabled\n              timeToDoor\n              wishExpressTtdRequirement\n              regionShipping {\n                enabled\n                timeToDoor\n                region {\n                  name\n                  code\n                }\n                price {\n                  amount\n                }\n              }\n              country {\n                code\n                name\n                gmvRank\n                regions {\n                  code\n                  name\n                }\n              }\n              price {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n        isRemovedByWish\n        categories {\n          name\n        }\n        attributes {\n          name\n          value\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetListingQualityInsightsUrlQuery {\n    listingQualityInsights {\n        report {\n          presignedS3Url\n        }\n    }\n  }\n"): (typeof documents)["\n  query GetListingQualityInsightsUrlQuery {\n    listingQualityInsights {\n        report {\n          presignedS3Url\n        }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllProducts_ProductsContainerInitialDataQuery {\n    su {\n      isBd\n    }\n    currentMerchant {\n      isConsignmentMode\n      state\n      canAccessPaidPlacement\n      warehouses {\n        id\n        unitId\n        address {\n          country {\n            code\n          }\n        }\n      }\n    }\n    currentUser {\n      gating {\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showConsignmentOverwrite: decideForName(name: \"show_consignment_overwrite\")\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllProducts_ProductsContainerInitialDataQuery {\n    su {\n      isBd\n    }\n    currentMerchant {\n      isConsignmentMode\n      state\n      canAccessPaidPlacement\n      warehouses {\n        id\n        unitId\n        address {\n          country {\n            code\n          }\n        }\n      }\n    }\n    currentUser {\n      gating {\n        showVariationGroupingMUG: isAllowed(name: \"variation_options\")\n      }\n    }\n    platformConstants {\n      deciderKey {\n        showVariationGroupingDkey: decideForName(name: \"variation_grouping_ui\")\n        showConsignmentOverwrite: decideForName(name: \"show_consignment_overwrite\")\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllProducts_GetProductCount(\n    $query: String\n    $merchantId: ObjectIdType\n    $searchType: ProductSearchType\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n  ) {\n    productCatalog {\n      productCountV2(\n        query: $query\n        merchantId: $merchantId\n        searchType: $searchType\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      )\n    }\n  }\n"): (typeof documents)["\n  query AllProducts_GetProductCount(\n    $query: String\n    $merchantId: ObjectIdType\n    $searchType: ProductSearchType\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n  ) {\n    productCatalog {\n      productCountV2(\n        query: $query\n        merchantId: $merchantId\n        searchType: $searchType\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllProducts_GetProducts(\n    $query: String\n    $searchType: ProductSearchType\n    $merchantId: ObjectIdType\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n    $warehouseId: String\n  ) {\n    productCatalog {\n      productsV2(\n        query: $query\n        searchType: $searchType\n        merchantId: $merchantId\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      ) {\n        id\n        name\n        sku\n        enabled\n        isRemovedByWish\n        isRemovedByMerchant\n        isRemoved\n        isPromoted\n        sales\n        wishes\n        isLtl\n        isReturnsEnabled\n        isWishExpress\n        categoryExperienceEligibility\n        subcategoryId\n        subcategory {\n          id\n          name\n          categoriesAlongPath {\n            id\n            name\n          }\n        }\n        variationOptions\n        listingState {\n          state\n          reason\n        }\n        mainImage {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        extraImages {\n          isCleanImage\n        }\n        hasBrand\n        shipping(warehouseId: $warehouseId) {\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              country {\n                code\n              }\n            }\n          }\n        }\n        categories {\n          name\n        }\n        lastUpdateTime {\n          formatted(fmt: \"MM-dd-YYYY z\")\n        }\n        createTime {\n          formatted(fmt: \"MM-dd-YYYY z\")\n        }\n        variationCount\n        variations(offset: 0, limit: 5) {\n          id\n          productId\n          size\n          color\n          enabled\n          sku\n          image {\n            wishUrl(size: TINY)\n          }\n          price {\n            amount\n            currencyCode\n            display\n          }\n          inventory {\n            warehouseId\n            count\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllProducts_GetProducts(\n    $query: String\n    $searchType: ProductSearchType\n    $merchantId: ObjectIdType\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n    $warehouseId: String\n  ) {\n    productCatalog {\n      productsV2(\n        query: $query\n        searchType: $searchType\n        merchantId: $merchantId\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      ) {\n        id\n        name\n        sku\n        enabled\n        isRemovedByWish\n        isRemovedByMerchant\n        isRemoved\n        isPromoted\n        sales\n        wishes\n        isLtl\n        isReturnsEnabled\n        isWishExpress\n        categoryExperienceEligibility\n        subcategoryId\n        subcategory {\n          id\n          name\n          categoriesAlongPath {\n            id\n            name\n          }\n        }\n        variationOptions\n        listingState {\n          state\n          reason\n        }\n        mainImage {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        extraImages {\n          isCleanImage\n        }\n        hasBrand\n        shipping(warehouseId: $warehouseId) {\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              country {\n                code\n              }\n            }\n          }\n        }\n        categories {\n          name\n        }\n        lastUpdateTime {\n          formatted(fmt: \"MM-dd-YYYY z\")\n        }\n        createTime {\n          formatted(fmt: \"MM-dd-YYYY z\")\n        }\n        variationCount\n        variations(offset: 0, limit: 5) {\n          id\n          productId\n          size\n          color\n          enabled\n          sku\n          image {\n            wishUrl(size: TINY)\n          }\n          price {\n            amount\n            currencyCode\n            display\n          }\n          inventory {\n            warehouseId\n            count\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllProducts_GetProductVariations($query: String, $limit: Int) {\n    productCatalog {\n      productsV2(limit: 1, searchType: ID, query: $query) {\n        variations(offset: 0, limit: $limit) {\n          id\n          productId\n          size\n          color\n          enabled\n          sku\n          image {\n            wishUrl\n          }\n          price {\n            amount\n            currencyCode\n            display\n          }\n          inventory {\n            warehouseId\n            count\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllProducts_GetProductVariations($query: String, $limit: Int) {\n    productCatalog {\n      productsV2(limit: 1, searchType: ID, query: $query) {\n        variations(offset: 0, limit: $limit) {\n          id\n          productId\n          size\n          color\n          enabled\n          sku\n          image {\n            wishUrl\n          }\n          price {\n            amount\n            currencyCode\n            display\n          }\n          inventory {\n            warehouseId\n            count\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AllProducts_UpsertProductsMutation($input: [ProductUpsertInput!]!) {\n    productCatalog {\n      upsertProducts(input: $input) {\n        ok\n        failures {\n          message\n          productId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AllProducts_UpsertProductsMutation($input: [ProductUpsertInput!]!) {\n    productCatalog {\n      upsertProducts(input: $input) {\n        ok\n        failures {\n          message\n          productId\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AllProducts_RemoveProductMutation($input: RemoveProductInput!) {\n    productCatalog {\n      removeProduct(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AllProducts_RemoveProductMutation($input: RemoveProductInput!) {\n    productCatalog {\n      removeProduct(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Products_DownloadProductsMutation(\n    $input: DownloadBulkCsvProductsInput!\n  ) {\n    productCatalog {\n      downloadBulkCsvProducts(input: $input) {\n        downloadUrl\n        ok\n        errorMessage\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Products_DownloadProductsMutation(\n    $input: DownloadBulkCsvProductsInput!\n  ) {\n    productCatalog {\n      downloadBulkCsvProducts(input: $input) {\n        downloadUrl\n        ok\n        errorMessage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AllProducts_DownloadProductsMutation(\n    $input: DownloadAllProductsInput!\n  ) {\n    productCatalog {\n      downloadAllProducts(input: $input) {\n        ok\n        errorMessage\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AllProducts_DownloadProductsMutation(\n    $input: DownloadAllProductsInput!\n  ) {\n    productCatalog {\n      downloadAllProducts(input: $input) {\n        ok\n        errorMessage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AllProducts_DeleteWarehouse($input: DeleteMerchantWarehouseInput!) {\n    currentMerchant {\n      warehouseSettings {\n        deleteWarehouse(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AllProducts_DeleteWarehouse($input: DeleteMerchantWarehouseInput!) {\n    currentMerchant {\n      warehouseSettings {\n        deleteWarehouse(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllProducts_GetProductsForExport(\n    $query: String\n    $searchType: ProductSearchType\n    $merchantId: ObjectIdType\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n    $warehouseId: String\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      csvProductColumnEnums\n      productsV2(\n        query: $query\n        searchType: $searchType\n        merchantId: $merchantId\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      ) {\n        id\n        name\n        description\n        wishes\n        sales\n        sku\n        upc\n        lastUpdateTime {\n          formatted(fmt: \"YYYY-MM-dd k:mm:ss z\")\n        }\n        createTime {\n          formatted(fmt: \"YYYY-MM-dd k:mm:ss z\")\n        }\n        msrp {\n          display\n        }\n        shipping(warehouseId: $warehouseId) {\n          defaultShipping {\n            warehouseId\n            price {\n              display\n            }\n            timeToDoor\n          }\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              country {\n                code\n              }\n              timeToDoor\n              enabled\n              price {\n                display\n              }\n            }\n          }\n        }\n        fpReviewStatus\n        listingState {\n          state\n        }\n        isPromoted\n        isLtl\n        mainImage {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        extraImages {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        trueTags {\n          name\n          id\n        }\n        condition\n        maxQuantity\n        referenceArea {\n          unit\n          value\n        }\n        referenceUnit {\n          unit\n          value\n        }\n        referenceWeight {\n          unit\n          value\n        }\n        referenceLength {\n          unit\n          value\n        }\n        referenceVolume {\n          unit\n          value\n        }\n        chemicalNames\n        warningType\n        requestedBrand {\n          id\n          name\n        }\n        categoryExperienceEligibility\n        subcategoryId\n        subcategory {\n          id\n          name\n        }\n        variationOptions\n        variations {\n          id\n          sku\n          size\n          color\n          gtin\n          inventory {\n            warehouseId\n            count\n          }\n          price {\n            display\n          }\n          image {\n            wishUrl(size: TINY)\n          }\n          customsHsCode\n          length {\n            unit\n            value\n          }\n          width {\n            unit\n            value\n          }\n          height {\n            unit\n            value\n          }\n          weight {\n            unit\n            value\n          }\n          declaredValue {\n            display\n          }\n          originCountry {\n            name\n          }\n          declaredLocalName\n          declaredName\n          hasLiquid\n          hasMetal\n          hasPowder\n          hasBattery\n          pieces\n          quantityArea {\n            unit\n            value\n          }\n          quantityUnit {\n            unit\n            value\n          }\n          quantityWeight {\n            unit\n            value\n          }\n          quantityLength {\n            unit\n            value\n          }\n          quantityVolume {\n            unit\n            value\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllProducts_GetProductsForExport(\n    $query: String\n    $searchType: ProductSearchType\n    $merchantId: ObjectIdType\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $isEnabled: Boolean\n    $state: ProductListingState\n    $fpReviewStatus: ProductFPReviewStatus\n    $isWishExpress: Boolean\n    $hasBrand: Boolean\n    $isPromoted: Boolean\n    $isCleanImage: Boolean\n    $isReturnEnrolled: Boolean\n    $warehouseId: String\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      csvProductColumnEnums\n      productsV2(\n        query: $query\n        searchType: $searchType\n        merchantId: $merchantId\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        isEnabled: $isEnabled\n        state: $state\n        fpReviewStatus: $fpReviewStatus\n        isWishExpress: $isWishExpress\n        hasBrand: $hasBrand\n        isPromoted: $isPromoted\n        isCleanImage: $isCleanImage\n        isReturnEnrolled: $isReturnEnrolled\n      ) {\n        id\n        name\n        description\n        wishes\n        sales\n        sku\n        upc\n        lastUpdateTime {\n          formatted(fmt: \"YYYY-MM-dd k:mm:ss z\")\n        }\n        createTime {\n          formatted(fmt: \"YYYY-MM-dd k:mm:ss z\")\n        }\n        msrp {\n          display\n        }\n        shipping(warehouseId: $warehouseId) {\n          defaultShipping {\n            warehouseId\n            price {\n              display\n            }\n            timeToDoor\n          }\n          warehouseCountryShipping {\n            shippingType\n            countryShipping {\n              country {\n                code\n              }\n              timeToDoor\n              enabled\n              price {\n                display\n              }\n            }\n          }\n        }\n        fpReviewStatus\n        listingState {\n          state\n        }\n        isPromoted\n        isLtl\n        mainImage {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        extraImages {\n          wishUrl(size: TINY)\n          isCleanImage\n        }\n        trueTags {\n          name\n          id\n        }\n        condition\n        maxQuantity\n        referenceArea {\n          unit\n          value\n        }\n        referenceUnit {\n          unit\n          value\n        }\n        referenceWeight {\n          unit\n          value\n        }\n        referenceLength {\n          unit\n          value\n        }\n        referenceVolume {\n          unit\n          value\n        }\n        chemicalNames\n        warningType\n        requestedBrand {\n          id\n          name\n        }\n        categoryExperienceEligibility\n        subcategoryId\n        subcategory {\n          id\n          name\n        }\n        variationOptions\n        variations {\n          id\n          sku\n          size\n          color\n          gtin\n          inventory {\n            warehouseId\n            count\n          }\n          price {\n            display\n          }\n          image {\n            wishUrl(size: TINY)\n          }\n          customsHsCode\n          length {\n            unit\n            value\n          }\n          width {\n            unit\n            value\n          }\n          height {\n            unit\n            value\n          }\n          weight {\n            unit\n            value\n          }\n          declaredValue {\n            display\n          }\n          originCountry {\n            name\n          }\n          declaredLocalName\n          declaredName\n          hasLiquid\n          hasMetal\n          hasPowder\n          hasBattery\n          pieces\n          quantityArea {\n            unit\n            value\n          }\n          quantityUnit {\n            unit\n            value\n          }\n          quantityWeight {\n            unit\n            value\n          }\n          quantityLength {\n            unit\n            value\n          }\n          quantityVolume {\n            unit\n            value\n          }\n          options {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UnderperformingProducts_DownloadProductsMutation (\n    $input: DownloadUnderPerformingProductsInput!\n  ) {\n    productCatalog {\n      downloadUnderPerformingProducts(input: $input) {\n        ok\n        errorMessage\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UnderperformingProducts_DownloadProductsMutation (\n    $input: DownloadUnderPerformingProductsInput!\n  ) {\n    productCatalog {\n      downloadUnderPerformingProducts(input: $input) {\n        ok\n        errorMessage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_DOWNLOAD_TOTAL_JOB_COUNTS (\n    $query: String\n  ) {\n    productCatalog {\n      downloadJobsCount(\n        query: $query\n      )\n    }\n  }\n"): (typeof documents)["\n  query GET_DOWNLOAD_TOTAL_JOB_COUNTS (\n    $query: String\n  ) {\n    productCatalog {\n      downloadJobsCount(\n        query: $query\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDownloadTotalJobs($offset: Int, $limit: Int, $query: String) {\n    productCatalog {\n      downloadJobs(\n        query: $query\n        offset: $offset\n        limit: $limit\n      ) {\n        id\n        submittedDate {\n          unix\n          formatted(fmt:\"MM/d/Y hh:mm:ss\")\n        }\n        completedDate {\n          unix\n          formatted(fmt:\"MM/d/Y hh:mm:ss\")\n        }\n        jobType\n        status\n        downloadLink\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDownloadTotalJobs($offset: Int, $limit: Int, $query: String) {\n    productCatalog {\n      downloadJobs(\n        query: $query\n        offset: $offset\n        limit: $limit\n      ) {\n        id\n        submittedDate {\n          unix\n          formatted(fmt:\"MM/d/Y hh:mm:ss\")\n        }\n        completedDate {\n          unix\n          formatted(fmt:\"MM/d/Y hh:mm:ss\")\n        }\n        jobType\n        status\n        downloadLink\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminUsersTable_GetInternalUsersQuery(\n    $offset: Int!\n    $limit: Int!\n    $query: String\n    $sortField: UsersSortFieldType!\n    $sortOrder: SortOrderType!\n    $includeDisabledUsers: Boolean!\n    $roles: [RoleType!]!\n  ) {\n    identity {\n      users(\n        offset: $offset\n        limit: $limit\n        query: $query\n        sortField: $sortField\n        sortOrder: $sortOrder\n        includeDisabledUsers: $includeDisabledUsers\n        roles: $roles\n      ) {\n        username\n        name\n        email\n        id\n        bdMerchantCountry\n        roles {\n          name\n        }\n        manager {\n          name\n        }\n        serviceTypes\n        isEnabled\n        isSalesRep\n        canBeAssignedToLogicalQueue: hasPermission(\n          permissions: [HANDLE_CS_TICKETS]\n        )\n      }\n      usersCount(\n        query: $query\n        includeDisabledUsers: $includeDisabledUsers\n        roles: $roles\n      )\n    }\n  }\n"): (typeof documents)["\n  query AdminUsersTable_GetInternalUsersQuery(\n    $offset: Int!\n    $limit: Int!\n    $query: String\n    $sortField: UsersSortFieldType!\n    $sortOrder: SortOrderType!\n    $includeDisabledUsers: Boolean!\n    $roles: [RoleType!]!\n  ) {\n    identity {\n      users(\n        offset: $offset\n        limit: $limit\n        query: $query\n        sortField: $sortField\n        sortOrder: $sortOrder\n        includeDisabledUsers: $includeDisabledUsers\n        roles: $roles\n      ) {\n        username\n        name\n        email\n        id\n        bdMerchantCountry\n        roles {\n          name\n        }\n        manager {\n          name\n        }\n        serviceTypes\n        isEnabled\n        isSalesRep\n        canBeAssignedToLogicalQueue: hasPermission(\n          permissions: [HANDLE_CS_TICKETS]\n        )\n      }\n      usersCount(\n        query: $query\n        includeDisabledUsers: $includeDisabledUsers\n        roles: $roles\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminUsersTable_LoginAsUserMutation($input: ByUserIdInput!) {\n    authentication {\n      loginAs {\n        user(input: $input) {\n          ok\n          error\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUsersTable_LoginAsUserMutation($input: ByUserIdInput!) {\n    authentication {\n      loginAs {\n        user(input: $input) {\n          ok\n          error\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantSupportConfigQuery {\n    currentUser {\n      displayName\n      email\n      supportConfig {\n        isEnBd\n        isNonEnBd\n      }\n      accountManager {\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query MerchantSupportConfigQuery {\n    currentUser {\n      displayName\n      email\n      supportConfig {\n        isEnBd\n        isNonEnBd\n      }\n      accountManager {\n        email\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AppLocalSelector_ChangeLocaleMutation($input: ChangeLocaleInput!) {\n    locale {\n      changeLocale(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AppLocalSelector_ChangeLocaleMutation($input: ChangeLocaleInput!) {\n    locale {\n      changeLocale(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchStore_ObjectSearchQuery(\n    $objectId: ObjectIdType!\n    $currentPath: String\n  ) {\n    chrome {\n      objectSearch(objectId: $objectId, currentPath: $currentPath) {\n        type\n        title\n        description\n        imageUrl\n        url\n        nuggets\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchStore_ObjectSearchQuery(\n    $objectId: ObjectIdType!\n    $currentPath: String\n  ) {\n    chrome {\n      objectSearch(objectId: $objectId, currentPath: $currentPath) {\n        type\n        title\n        description\n        imageUrl\n        url\n        nuggets\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Chrome_GetSideMenuCounts {\n    cs {\n      ticketCount(\n        states: [AWAITING_MERCHANT]\n        types: [ORDER, PRE_PURCHASE, POST_CUSTOMER_SUPPORT]\n      )\n    }\n    fulfillment {\n      actionRequiredOrderCount\n    }\n    logistics {\n      fbw {\n        lowInventoryCount\n        actionRequiredShippingPlans\n        totalActionRequired\n      }\n    }\n    marketing {\n      pendingCampaignCount\n      lowBudgetCampaignCount\n      actionRequiredCampaignCount\n    }\n    policy {\n      merchantIpWarningCount: merchantWarningCount(\n        states: [AWAITING_MERCHANT, NEW]\n        reasons: [COUNTERFEIT_GOODS, FINE_FOR_COUNTERFEIT_GOODS]\n      )\n      merchantActionRequiredCount: merchantWarningCount(\n        states: [AWAITING_MERCHANT, NEW]\n      )\n      dispute {\n        trackingDispute {\n          disputeCount(states: [AWAITING_MERCHANT])\n        }\n        refundDispute {\n          returnDisputeCount: disputeCount(\n            states: [AWAITING_MERCHANT]\n            reasons: [MERCHANT_REPORT_RETURN]\n          )\n          refundDisputeCount: disputeCount(\n            states: [AWAITING_MERCHANT]\n            reasons: [\n              MISLEADING_PRODUCT_TAG\n              PRODUCT_HIGH_REFUND_RATIO\n              DELIVERED_TO_WRONG_ADDRESS\n              EPC_OVERWEIGHT\n              FRAUDULENT_BEHAVIOR\n              VALID_TRACKING\n              INCOMPLETE_ORDER\n              NOT_DELIVERED_ON_TIME\n              STORE_UPLOADED_INVENTORY_RETURN\n              PRODUCT_LOW_RATING\n              RIGHT_OF_WITHDRAWAL\n              FBS_ITEM_NOT_PICKUP\n              CORRECT_SIZE\n              ITEM_IS_DAMAGED\n              EPC_OVERVALUE\n              RETURNED_TO_SENDER\n              ITEM_NOT_MATCH_LISTING\n              WISHBLUE_EPC_LATE_FULFULLMENT\n              OUT_OF_STOCK\n              ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE\n              FAKE_TRACKING\n              MERCHANT_HIGH_REFUND_EAT_COST\n              ITEM_IS_DANGEROUS\n              BANNED_MERCHANT\n              NOT_QUALIFIED_SHIPPING_PROVIDER\n              AUTHORIZED_TO_SELL\n              EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP\n              EPC_OVERSIZE\n              COUNTERFEIT_ITEM\n              DID_NOT_ACCEPT_TOS_ON_TIME\n              LATE_CONFIRMED_FULFILLMENT\n              MERCHANT_REPORT_FRAUD\n            ]\n          )\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Chrome_GetSideMenuCounts {\n    cs {\n      ticketCount(\n        states: [AWAITING_MERCHANT]\n        types: [ORDER, PRE_PURCHASE, POST_CUSTOMER_SUPPORT]\n      )\n    }\n    fulfillment {\n      actionRequiredOrderCount\n    }\n    logistics {\n      fbw {\n        lowInventoryCount\n        actionRequiredShippingPlans\n        totalActionRequired\n      }\n    }\n    marketing {\n      pendingCampaignCount\n      lowBudgetCampaignCount\n      actionRequiredCampaignCount\n    }\n    policy {\n      merchantIpWarningCount: merchantWarningCount(\n        states: [AWAITING_MERCHANT, NEW]\n        reasons: [COUNTERFEIT_GOODS, FINE_FOR_COUNTERFEIT_GOODS]\n      )\n      merchantActionRequiredCount: merchantWarningCount(\n        states: [AWAITING_MERCHANT, NEW]\n      )\n      dispute {\n        trackingDispute {\n          disputeCount(states: [AWAITING_MERCHANT])\n        }\n        refundDispute {\n          returnDisputeCount: disputeCount(\n            states: [AWAITING_MERCHANT]\n            reasons: [MERCHANT_REPORT_RETURN]\n          )\n          refundDisputeCount: disputeCount(\n            states: [AWAITING_MERCHANT]\n            reasons: [\n              MISLEADING_PRODUCT_TAG\n              PRODUCT_HIGH_REFUND_RATIO\n              DELIVERED_TO_WRONG_ADDRESS\n              EPC_OVERWEIGHT\n              FRAUDULENT_BEHAVIOR\n              VALID_TRACKING\n              INCOMPLETE_ORDER\n              NOT_DELIVERED_ON_TIME\n              STORE_UPLOADED_INVENTORY_RETURN\n              PRODUCT_LOW_RATING\n              RIGHT_OF_WITHDRAWAL\n              FBS_ITEM_NOT_PICKUP\n              CORRECT_SIZE\n              ITEM_IS_DAMAGED\n              EPC_OVERVALUE\n              RETURNED_TO_SENDER\n              ITEM_NOT_MATCH_LISTING\n              WISHBLUE_EPC_LATE_FULFULLMENT\n              OUT_OF_STOCK\n              ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE\n              FAKE_TRACKING\n              MERCHANT_HIGH_REFUND_EAT_COST\n              ITEM_IS_DANGEROUS\n              BANNED_MERCHANT\n              NOT_QUALIFIED_SHIPPING_PROVIDER\n              AUTHORIZED_TO_SELL\n              EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP\n              EPC_OVERSIZE\n              COUNTERFEIT_ITEM\n              DID_NOT_ACCEPT_TOS_ON_TIME\n              LATE_CONFIRMED_FULFILLMENT\n              MERCHANT_REPORT_FRAUD\n            ]\n          )\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Chrome_GetAppTopbarData {\n    su {\n      hasPermission(\n        permissions: [\n          CAN_TOGGLE_ADMIN_EDIT_ON_STORE_USERS\n          CAN_TOGGLE_ADMIN_EDIT_ON_ALL_USERS\n        ]\n      )\n    }\n    currentMerchant {\n      id\n      isStoreMerchant\n      canAccessHome\n    }\n    currentUser {\n      firstName\n    }\n  }\n"): (typeof documents)["\n  query Chrome_GetAppTopbarData {\n    su {\n      hasPermission(\n        permissions: [\n          CAN_TOGGLE_ADMIN_EDIT_ON_STORE_USERS\n          CAN_TOGGLE_ADMIN_EDIT_ON_ALL_USERS\n        ]\n      )\n    }\n    currentMerchant {\n      id\n      isStoreMerchant\n      canAccessHome\n    }\n    currentUser {\n      firstName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Chrome_NotificationButtonData {\n    notifications {\n      notificationCount(viewed: false)\n    }\n  }\n"): (typeof documents)["\n  query Chrome_NotificationButtonData {\n    notifications {\n      notificationCount(viewed: false)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Chrome_GetAlerts {\n    currentUser {\n      alerts {\n        link\n        description\n        date {\n          formatted(fmt: \"YYYY/MM/dd\")\n        }\n        sentiment\n      }\n    }\n  }\n"): (typeof documents)["\n  query Chrome_GetAlerts {\n    currentUser {\n      alerts {\n        link\n        description\n        date {\n          formatted(fmt: \"YYYY/MM/dd\")\n        }\n        sentiment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PasswordInput_CheckPasswordStrength($password: String!) {\n    authentication {\n      passwordEvaluation(password: $password) {\n        valid\n        errorMessage\n      }\n    }\n  }\n"): (typeof documents)["\n  query PasswordInput_CheckPasswordStrength($password: String!) {\n    authentication {\n      passwordEvaluation(password: $password) {\n        valid\n        errorMessage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductDetailModal_GetProduct($id: String, $sku: String) {\n    productCatalog {\n      product(id: $id, sku: $sku) {\n        id\n        name\n        mainImage {\n          wishUrl\n        }\n        description\n        isRemoved\n        listingState{\n          state\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductDetailModal_GetProduct($id: String, $sku: String) {\n    productCatalog {\n      product(id: $id, sku: $sku) {\n        id\n        name\n        mainImage {\n          wishUrl\n        }\n        description\n        isRemoved\n        listingState{\n          state\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductImage_GetProductImage($productId: String!) {\n    productCatalog {\n      product(id: $productId) {\n        mainImage {\n          wishUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductImage_GetProductImage($productId: String!) {\n    productCatalog {\n      product(id: $productId) {\n        mainImage {\n          wishUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ChromeStore_InitialQuery {\n    chrome {\n      merchantGraph {\n        ...NodeElements\n        children {\n          ...NodeElements\n          children {\n            ...NodeElements\n            children {\n              ...NodeElements\n              children {\n                ...NodeElements\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ChromeStore_InitialQuery {\n    chrome {\n      merchantGraph {\n        ...NodeElements\n        children {\n          ...NodeElements\n          children {\n            ...NodeElements\n            children {\n              ...NodeElements\n              children {\n                ...NodeElements\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NodeElements on ChromeNodeSchema {\n    url\n    path\n    label\n    overviewLabel\n    badge {\n      badgeType\n      expiryDate {\n        unix\n        datetime\n      }\n    }\n    nodeid\n    keywords\n    description\n    searchPhrase\n    showInSideMenu\n    openInNewTab\n    totalHits\n    mostRecentHit {\n      unix\n      mmddyyyy\n    }\n    countSelectors\n  }\n"): (typeof documents)["\n  fragment NodeElements on ChromeNodeSchema {\n    url\n    path\n    label\n    overviewLabel\n    badge {\n      badgeType\n      expiryDate {\n        unix\n        datetime\n      }\n    }\n    nodeid\n    keywords\n    description\n    searchPhrase\n    showInSideMenu\n    openInNewTab\n    totalHits\n    mostRecentHit {\n      unix\n      mmddyyyy\n    }\n    countSelectors\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExperimentStore_GetBucketForExperiment($name: String!) {\n    currentMerchant {\n      exp {\n        bucket(name: $name)\n      }\n    }\n  }\n"): (typeof documents)["\n  query ExperimentStore_GetBucketForExperiment($name: String!) {\n    currentMerchant {\n      exp {\n        bucket(name: $name)\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExperimentStore_GetDeciderKey($name: String!) {\n    platformConstants {\n      deciderKey {\n        decideForName(name: $name)\n      }\n    }\n  }\n"): (typeof documents)["\n  query ExperimentStore_GetDeciderKey($name: String!) {\n    platformConstants {\n      deciderKey {\n        decideForName(name: $name)\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LocalizationStore_InitialQuery {\n    currentLocale\n    currentProperLocale\n    platformConstants {\n      availableLocales\n    }\n  }\n"): (typeof documents)["\n  query LocalizationStore_InitialQuery {\n    currentLocale\n    currentProperLocale\n    platformConstants {\n      availableLocales\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SardineStore_GetSardineConstants {\n    platformConstants {\n      sardineConstants {\n        sardineHost\n        sardineClientId\n        sardineSessionKey\n      }\n    }\n  }\n"): (typeof documents)["\n  query SardineStore_GetSardineConstants {\n    platformConstants {\n      sardineConstants {\n        sardineHost\n        sardineClientId\n        sardineSessionKey\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserStore_InitialQuery {\n    currentCountry {\n      code\n    }\n    currentMerchant {\n      id\n      isStoreMerchant\n      primaryCurrency\n      state\n    }\n    currentUser {\n      id\n      merchantId\n      firstName\n      lastName\n      displayName\n      email\n      phoneNumber\n      companyName\n      entityType\n      isStoreOrMerchantUser\n      isApiUser\n      isAdmin\n      roles {\n        name\n      }\n      businessAddress {\n        streetAddress1\n        streetAddress2\n        city\n        state\n        zipcode\n        country {\n          name\n          code\n        }\n      }\n    }\n    su {\n      id\n      isAdmin\n    }\n    recentUsers {\n      id\n      displayName\n      name\n      isStoreOrMerchantUser\n    }\n  }\n"): (typeof documents)["\n  query UserStore_InitialQuery {\n    currentCountry {\n      code\n    }\n    currentMerchant {\n      id\n      isStoreMerchant\n      primaryCurrency\n      state\n    }\n    currentUser {\n      id\n      merchantId\n      firstName\n      lastName\n      displayName\n      email\n      phoneNumber\n      companyName\n      entityType\n      isStoreOrMerchantUser\n      isApiUser\n      isAdmin\n      roles {\n        name\n      }\n      businessAddress {\n        streetAddress1\n        streetAddress2\n        city\n        state\n        zipcode\n        country {\n          name\n          code\n        }\n      }\n    }\n    su {\n      id\n      isAdmin\n    }\n    recentUsers {\n      id\n      displayName\n      name\n      isStoreOrMerchantUser\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Fashion_GetLeafCategories($l1CategoryId: Int!) {\n    taxonomy {\n      leafCategories(l1CategoryId: $l1CategoryId) {\n        id\n        name\n        categoriesAlongPath {\n          id\n          name\n        }\n        categoryChildren {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Fashion_GetLeafCategories($l1CategoryId: Int!) {\n    taxonomy {\n      leafCategories(l1CategoryId: $l1CategoryId) {\n        id\n        name\n        categoriesAlongPath {\n          id\n          name\n        }\n        categoryChildren {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Fashion_GetCategoryAttributes(\n    $categoryId: Int!\n  ) {\n    taxonomy {\n      attributes(categoryId: $categoryId) {\n        id\n        name\n        values {\n          id\n          value\n        }\n        description\n        dataType\n        dataTypeFormat\n        level\n        usage\n        isVariationAttribute\n        mode\n        maxMultiSelect\n        enabledForVariations\n      }\n    }\n  }\n"): (typeof documents)["\n  query Fashion_GetCategoryAttributes(\n    $categoryId: Int!\n  ) {\n    taxonomy {\n      attributes(categoryId: $categoryId) {\n        id\n        name\n        values {\n          id\n          value\n        }\n        description\n        dataType\n        dataTypeFormat\n        level\n        usage\n        isVariationAttribute\n        mode\n        maxMultiSelect\n        enabledForVariations\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Fashion_TaxonomyCategoriesQuery(\n    $categoryId: Int!\n  ) {\n    taxonomy {\n      category(categoryId: $categoryId) {\n        id\n        name\n        categoriesAlongPath {\n          id\n          name\n        }\n        categoryChildren {\n          id\n          name\n          categoriesAlongPath {\n            id\n            name\n          }\n          categoryChildren {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Fashion_TaxonomyCategoriesQuery(\n    $categoryId: Int!\n  ) {\n    taxonomy {\n      category(categoryId: $categoryId) {\n        id\n        name\n        categoriesAlongPath {\n          id\n          name\n        }\n        categoryChildren {\n          id\n          name\n          categoriesAlongPath {\n            id\n            name\n          }\n          categoryChildren {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CategoryCSVHeadersQuery($categoryId: Int!, $treeVersion: String!) {\n    productCatalog {\n      csvProductTemplateWithTaxonomyColumnNames(\n        categoryId: $categoryId\n        treeVersion: $treeVersion\n      )\n    }\n  }\n"): (typeof documents)["\n  query CategoryCSVHeadersQuery($categoryId: Int!, $treeVersion: String!) {\n    productCatalog {\n      csvProductTemplateWithTaxonomyColumnNames(\n        categoryId: $categoryId\n        treeVersion: $treeVersion\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CategoryAttributesCsvQuery($categoryId: Int!) {\n    taxonomy {\n      categoryAttributesCsv(categoryId: $categoryId)\n    }\n  }\n"): (typeof documents)["\n  query CategoryAttributesCsvQuery($categoryId: Int!) {\n    taxonomy {\n      categoryAttributesCsv(categoryId: $categoryId)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CategoryTreeJsonQuery {\n    productCatalog {\n      productCategoryTaxonomyTreeJson\n    }\n  }\n"): (typeof documents)["\n  query CategoryTreeJsonQuery {\n    productCatalog {\n      productCategoryTaxonomyTreeJson\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VariationGrouping_GetTaxonomyVariationOptionsQuery(\n    $categoryId: Int!\n    $treeVersion: String\n  ) {\n    taxonomy {\n      variationOptions(categoryId: $categoryId, treeVersion: $treeVersion) {\n        id\n        name\n        values {\n          id\n          value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query VariationGrouping_GetTaxonomyVariationOptionsQuery(\n    $categoryId: Int!\n    $treeVersion: String\n  ) {\n    taxonomy {\n      variationOptions(categoryId: $categoryId, treeVersion: $treeVersion) {\n        id\n        name\n        values {\n          id\n          value\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Logger_WriteLog($input: LogToTreasureDataInput!) {\n    analytics {\n      log(input: $input) {\n        ok\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Logger_WriteLog($input: LogToTreasureDataInput!) {\n    analytics {\n      log(input: $input) {\n        ok\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Toolkit_InitialUpload($input: InitiateUploadInput!) {\n    uploads {\n      initiateUpload(input: $input) {\n        ok\n        message\n        uploadUrl\n        uploadHeaders\n        downloadUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Toolkit_InitialUpload($input: InitiateUploadInput!) {\n    uploads {\n      initiateUpload(input: $input) {\n        ok\n        message\n        uploadUrl\n        uploadHeaders\n        downloadUrl\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserAnnouncementsV2_List(\n    $offset: Int!\n    $limit: Int!\n    $announcementType: AnnouncementType!\n  ) {\n    announcements {\n      forUsersV2 {\n        list(\n          announcementType: $announcementType\n          offset: $offset\n          limit: $limit\n        ) {\n          id\n          title\n          important\n          program {\n            text\n            type\n          }\n          publishDate {\n            inTimezone(identifier: \"UTC\") {\n              formatted(fmt: \"MMM d, y\")\n            }\n          }\n          categories {\n            text\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserAnnouncementsV2_List(\n    $offset: Int!\n    $limit: Int!\n    $announcementType: AnnouncementType!\n  ) {\n    announcements {\n      forUsersV2 {\n        list(\n          announcementType: $announcementType\n          offset: $offset\n          limit: $limit\n        ) {\n          id\n          title\n          important\n          program {\n            text\n            type\n          }\n          publishDate {\n            inTimezone(identifier: \"UTC\") {\n              formatted(fmt: \"MMM d, y\")\n            }\n          }\n          categories {\n            text\n            type\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserAnnouncementsV2_Modal(\n    $offset: Int!\n    $limit: Int!\n    $announcementType: AnnouncementType!\n  ) {\n    announcements {\n      forUsersV2 {\n        list(\n          announcementType: $announcementType\n          offset: $offset\n          limit: $limit\n        ) {\n          id\n          title\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserAnnouncementsV2_Modal(\n    $offset: Int!\n    $limit: Int!\n    $announcementType: AnnouncementType!\n  ) {\n    announcements {\n      forUsersV2 {\n        list(\n          announcementType: $announcementType\n          offset: $offset\n          limit: $limit\n        ) {\n          id\n          title\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FlatRateShippingSettings_GetOptInStatus {\n    currentMerchant {\n      isFlatRateShippingOptedIn\n      canAccessFlatRateShippingOptInOptOut\n    }\n  }\n"): (typeof documents)["\n  query FlatRateShippingSettings_GetOptInStatus {\n    currentMerchant {\n      isFlatRateShippingOptedIn\n      canAccessFlatRateShippingOptInOptOut\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Home_GetInitialData {\n    announcements {\n      forUsers(announcementType: SYSTEM_UPDATE, limit: 5) {\n        id\n        ctaText\n        ctaLink\n        title\n        important\n        program {\n          text\n          type\n        }\n        createdAt {\n          inTimezone(identifier: \"UTC\") {\n            formatted(fmt: \"MMM d, y\")\n          }\n        }\n        categories {\n          text\n          type\n        }\n      }\n    }\n    currentUser {\n      onboarding {\n        steps(completed: false) {\n          title\n          description\n          illustration\n          ctaText\n          ctaLink\n          name\n        }\n        numStepsLeft\n        numSteps\n      }\n    }\n    currentMerchant {\n      sellerVerification {\n        status\n        kycVerification {\n          status\n        }\n        isKycVerification\n        gmvCapReached\n        impressionsPaused\n        paymentsBlocked\n        gmvCap {\n          display\n          amount\n        }\n        gmvCapGracePeriodEndDate {\n          unix\n        }\n        numSalesCap\n        actionRequired\n      }\n      storeStats {\n        rating {\n          averageProductRating\n          startDate {\n            formatted(fmt: \"%m/%d\")\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n          }\n        }\n      }\n      isStoreMerchant\n      isFactory\n      primaryCurrency\n      accountManager {\n        name\n        email\n        qqGroupNumber\n      } \n    }\n  }\n"): (typeof documents)["\n  query Home_GetInitialData {\n    announcements {\n      forUsers(announcementType: SYSTEM_UPDATE, limit: 5) {\n        id\n        ctaText\n        ctaLink\n        title\n        important\n        program {\n          text\n          type\n        }\n        createdAt {\n          inTimezone(identifier: \"UTC\") {\n            formatted(fmt: \"MMM d, y\")\n          }\n        }\n        categories {\n          text\n          type\n        }\n      }\n    }\n    currentUser {\n      onboarding {\n        steps(completed: false) {\n          title\n          description\n          illustration\n          ctaText\n          ctaLink\n          name\n        }\n        numStepsLeft\n        numSteps\n      }\n    }\n    currentMerchant {\n      sellerVerification {\n        status\n        kycVerification {\n          status\n        }\n        isKycVerification\n        gmvCapReached\n        impressionsPaused\n        paymentsBlocked\n        gmvCap {\n          display\n          amount\n        }\n        gmvCapGracePeriodEndDate {\n          unix\n        }\n        numSalesCap\n        actionRequired\n      }\n      storeStats {\n        rating {\n          averageProductRating\n          startDate {\n            formatted(fmt: \"%m/%d\")\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n          }\n        }\n      }\n      isStoreMerchant\n      isFactory\n      primaryCurrency\n      accountManager {\n        name\n        email\n        qqGroupNumber\n      } \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HomeBanner_GetInitialData {\n    currentUser {\n      utmSource\n      backToOnboardingReason\n      onboarding {\n        completed\n      }\n    }\n    currentMerchant {\n      id\n      state\n      isCnMerchant\n      allowMfp\n    }\n    payments {\n      currentMerchant {\n        paymentCycle\n        fullyEnrolledInPaymentCycle\n      }\n    }\n  }\n"): (typeof documents)["\n  query HomeBanner_GetInitialData {\n    currentUser {\n      utmSource\n      backToOnboardingReason\n      onboarding {\n        completed\n      }\n    }\n    currentMerchant {\n      id\n      state\n      isCnMerchant\n      allowMfp\n    }\n    payments {\n      currentMerchant {\n        paymentCycle\n        fullyEnrolledInPaymentCycle\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PlusPayments_GetAccountBalance($currency: PaymentCurrencyCode!) {\n    payments {\n      paymentInfo {\n        showLedgerUi\n        ledgerAccountBalances {\n          amount\n          currency\n          balanceType\n        }\n      }\n      currentMerchant {\n        confirmedAccountBalance: accountBalance(\n          currency: $currency\n          balanceType: CONFIRMED\n        ) {\n          display\n        }\n        pendingAccountBalance: accountBalance(\n          currency: $currency\n          balanceType: PENDING\n        ) {\n          display\n          amount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PlusPayments_GetAccountBalance($currency: PaymentCurrencyCode!) {\n    payments {\n      paymentInfo {\n        showLedgerUi\n        ledgerAccountBalances {\n          amount\n          currency\n          balanceType\n        }\n      }\n      currentMerchant {\n        confirmedAccountBalance: accountBalance(\n          currency: $currency\n          balanceType: CONFIRMED\n        ) {\n          display\n        }\n        pendingAccountBalance: accountBalance(\n          currency: $currency\n          balanceType: PENDING\n        ) {\n          display\n          amount\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantHome_GetOrdersAndAnnouncements {\n    currentMerchant {\n      storeStats {\n        totalGmv {\n          amount\n        }\n      }\n    }\n    announcements {\n      forUsers(announcementType: BD_ANNOUNCEMENT) {\n        message\n        ctaText\n        ctaLink\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  query MerchantHome_GetOrdersAndAnnouncements {\n    currentMerchant {\n      storeStats {\n        totalGmv {\n          amount\n        }\n      }\n    }\n    announcements {\n      forUsers(announcementType: BD_ANNOUNCEMENT) {\n        message\n        ctaText\n        ctaLink\n        title\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HomeListingFeeDataQuery {\n    currentMerchant {\n      merchantListingFee {\n        latestListingFeeDetails{\n          latestItems\n        }\n        currentCycleListingFeeDetails{\n          currentBasedWssTierLevel\n          currentBasedWssTierName\n          currentFreeThreshold\n          currentItemsOverThreshold\n          currentUnitPrice {\n              amount\n              currencyCode\n          }\n          currentFeeToPay{\n              amount\n              currencyCode\n          }\n          currentCyclePayTime{\n              formatted(fmt: \"MM/d/yy\")\n              __typename\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query HomeListingFeeDataQuery {\n    currentMerchant {\n      merchantListingFee {\n        latestListingFeeDetails{\n          latestItems\n        }\n        currentCycleListingFeeDetails{\n          currentBasedWssTierLevel\n          currentBasedWssTierName\n          currentFreeThreshold\n          currentItemsOverThreshold\n          currentUnitPrice {\n              amount\n              currencyCode\n          }\n          currentFeeToPay{\n              amount\n              currencyCode\n          }\n          currentCyclePayTime{\n              formatted(fmt: \"MM/d/yy\")\n              __typename\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantOnboarding_GetSellerVerificationStatus {\n    currentMerchant {\n      sellerVerification {\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query MerchantOnboarding_GetSellerVerificationStatus {\n    currentMerchant {\n      sellerVerification {\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query InfractionQuery(\n    $infractionId: ObjectIdType\n    $merchantId: ObjectIdType\n  ) {\n    policy {\n      merchantWarning(id: $infractionId) {\n        merchant {\n          primaryCurrency\n        }\n        state\n        resolved\n        wssImpact\n        merchantActions\n        outstandingMerchantActions\n        disputeCutoffDay\n        reason {\n          reason\n        }\n        productTrueTagInfo {\n          counterfeitViolation {\n            reason\n          }\n          inappropriateViolation {\n            reason\n          }\n          subreason {\n            subcategory\n          }\n        }\n        createdTime {\n          datetime\n        }\n        effectiveDisputeDeadlineDate {\n          datetime\n          unix\n        }\n        products {\n          name\n          id\n          sku\n          description\n          mainImage {\n            wishUrl(size: SMALL)\n          }\n        }\n        proofs {\n          type\n          id\n          note\n          disputeStatus\n          warningId\n        }\n        impacts {\n          type\n          startDate {\n            datetime\n          }\n          endDate {\n            datetime\n          }\n          countries {\n            name\n          }\n        }\n        order {\n          id\n          state\n          merchantTotal {\n            display\n          }\n          releasedTime {\n            datetime\n          }\n          refundedTime {\n            datetime\n          }\n          tracking {\n            confirmedFulfillmentDate {\n              datetime\n            }\n            deliveredDate {\n              datetime\n            }\n            checkpoints {\n              date {\n                unix\n              }\n              resultingTracking {\n                text\n              }\n            }\n          }\n          shippingDetails {\n            trackingId\n            provider {\n              name\n            }\n          }\n          refundItems {\n            reasonInfo {\n              text\n            }\n          }\n        }\n        trackingDispute {\n          id\n          state\n          messages {\n            ...TrackingMessageFields\n          }\n        }\n        takedownRequest {\n          name\n          contact\n          email\n          phoneNumber\n        }\n        replies {\n          ...ReplyFields\n        }\n      }\n    }\n    brand {\n      brandAuthorizations(merchantId: $merchantId) {\n        id\n        brand {\n          name\n        }\n      }\n    }\n    platformConstants {\n      countriesWeShipTo {\n        name\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  query InfractionQuery(\n    $infractionId: ObjectIdType\n    $merchantId: ObjectIdType\n  ) {\n    policy {\n      merchantWarning(id: $infractionId) {\n        merchant {\n          primaryCurrency\n        }\n        state\n        resolved\n        wssImpact\n        merchantActions\n        outstandingMerchantActions\n        disputeCutoffDay\n        reason {\n          reason\n        }\n        productTrueTagInfo {\n          counterfeitViolation {\n            reason\n          }\n          inappropriateViolation {\n            reason\n          }\n          subreason {\n            subcategory\n          }\n        }\n        createdTime {\n          datetime\n        }\n        effectiveDisputeDeadlineDate {\n          datetime\n          unix\n        }\n        products {\n          name\n          id\n          sku\n          description\n          mainImage {\n            wishUrl(size: SMALL)\n          }\n        }\n        proofs {\n          type\n          id\n          note\n          disputeStatus\n          warningId\n        }\n        impacts {\n          type\n          startDate {\n            datetime\n          }\n          endDate {\n            datetime\n          }\n          countries {\n            name\n          }\n        }\n        order {\n          id\n          state\n          merchantTotal {\n            display\n          }\n          releasedTime {\n            datetime\n          }\n          refundedTime {\n            datetime\n          }\n          tracking {\n            confirmedFulfillmentDate {\n              datetime\n            }\n            deliveredDate {\n              datetime\n            }\n            checkpoints {\n              date {\n                unix\n              }\n              resultingTracking {\n                text\n              }\n            }\n          }\n          shippingDetails {\n            trackingId\n            provider {\n              name\n            }\n          }\n          refundItems {\n            reasonInfo {\n              text\n            }\n          }\n        }\n        trackingDispute {\n          id\n          state\n          messages {\n            ...TrackingMessageFields\n          }\n        }\n        takedownRequest {\n          name\n          contact\n          email\n          phoneNumber\n        }\n        replies {\n          ...ReplyFields\n        }\n      }\n    }\n    brand {\n      brandAuthorizations(merchantId: $merchantId) {\n        id\n        brand {\n          name\n        }\n      }\n    }\n    platformConstants {\n      countriesWeShipTo {\n        name\n        code\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReplyFields on MerchantWarningReplySchema {\n    senderType\n    senderName\n    message\n    translatedMessage\n    images\n    date {\n      unix\n    }\n    files {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n    idFiles {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n  }\n"): (typeof documents)["\n  fragment ReplyFields on MerchantWarningReplySchema {\n    senderType\n    senderName\n    message\n    translatedMessage\n    images\n    date {\n      unix\n    }\n    files {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n    idFiles {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TrackingMessageFields on TrackingDisputeMessageSchema {\n    senderType\n    senderName\n    message\n    date {\n      unix\n    }\n    files {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n  }\n"): (typeof documents)["\n  fragment TrackingMessageFields on TrackingDisputeMessageSchema {\n    senderType\n    senderName\n    message\n    date {\n      unix\n    }\n    files {\n      displayFilename\n      fileUrl\n      isImageFile\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MessagesQuery($infractionId: ObjectIdType) {\n    policy {\n      merchantWarning(id: $infractionId) {\n        trackingDispute {\n          messages {\n            ...TrackingMessageFields\n          }\n        }\n        replies {\n          ...ReplyFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MessagesQuery($infractionId: ObjectIdType) {\n    policy {\n      merchantWarning(id: $infractionId) {\n        trackingDispute {\n          messages {\n            ...TrackingMessageFields\n          }\n        }\n        replies {\n          ...ReplyFields\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RequestPaymentReleaseMutation(\n    $infractionId: ObjectIdType\n    $idFiles: [FileInput!]\n    $agreementFiles: [FileInput!]\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: REQUEST_PAYMENT_RELEASE\n            warningId: $infractionId\n            requestPaymentInput: {\n              idFiles: $idFiles\n              agreementFiles: $agreementFiles\n            }\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RequestPaymentReleaseMutation(\n    $infractionId: ObjectIdType\n    $idFiles: [FileInput!]\n    $agreementFiles: [FileInput!]\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: REQUEST_PAYMENT_RELEASE\n            warningId: $infractionId\n            requestPaymentInput: {\n              idFiles: $idFiles\n              agreementFiles: $agreementFiles\n            }\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SendMessageMutation(\n    $infractionId: ObjectIdType\n    $messageInput: ReplyInfractionInput!\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: REPLY\n            warningId: $infractionId\n            messageInput: $messageInput\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SendMessageMutation(\n    $infractionId: ObjectIdType\n    $messageInput: ReplyInfractionInput!\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: REPLY\n            warningId: $infractionId\n            messageInput: $messageInput\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SubmitDisputeMutation(\n    $action: MerchantWarningAction!\n    $infractionId: ObjectIdType\n    $disputeInput: DisputeInfractionInput!\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: $action\n            warningId: $infractionId\n            disputeInput: $disputeInput\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SubmitDisputeMutation(\n    $action: MerchantWarningAction!\n    $infractionId: ObjectIdType\n    $disputeInput: DisputeInfractionInput!\n  ) {\n    policy {\n      merchantWarning {\n        upsertMerchantWarning(\n          input: {\n            action: $action\n            warningId: $infractionId\n            disputeInput: $disputeInput\n          }\n        ) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Tags {\n    platformConstants {\n      topLevelTags {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query Tags {\n    platformConstants {\n      topLevelTags {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InfractionDisputeState_OrderInfractionDisputeMutation(\n    $input: UpsertOrderInfractionDisputeInput!\n  ) {\n    policy {\n      orderInfractionDispute {\n        upsertOrderInfractionDispute(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InfractionDisputeState_OrderInfractionDisputeMutation(\n    $input: UpsertOrderInfractionDisputeInput!\n  ) {\n    policy {\n      orderInfractionDispute {\n        upsertOrderInfractionDispute(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderDetails_InfractionDetails($id: String!) {\n    fulfillment {\n      order(id: $id) {\n        id\n        merchantTotal {\n          display\n        }\n        state\n        isWishExpress\n        isProcessing\n        showAplusShippingAddressTooltip\n        isAdvancedLogistics\n        isBlueFusion\n        fbwDetails {\n          isFbw\n        }\n        releasedTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n          timeUntil {\n            hours\n          }\n        }\n        orderTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        shippedDate {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        refundedTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        refundItems {\n          reasonInfo {\n            reason\n            text\n          }\n        }\n        shippingDetails {\n          trackingId\n          provider {\n            name\n            trackingUrl\n            providerUrl\n          }\n          country {\n            name\n          }\n          name\n          streetAddress1\n          streetAddress2\n          city\n          state\n          zipcode\n          phoneNumber\n        }\n        warehouse {\n          address {\n            name\n            streetAddress1\n            streetAddress2\n            city\n            state\n            zipcode\n            phoneNumber\n            country {\n              name\n            }\n          }\n        }\n        tracking {\n          confirmedFulfillmentDate {\n            formatted(fmt: \"M/d/YYYY h:mm a z\")\n          }\n          checkpoints {\n            date {\n              formatted(fmt: \"YYYY/M/d\")\n            }\n            resultingTracking {\n              state\n              text\n            }\n          }\n          deliveredDate {\n            formatted(fmt: \"M/d/YYYY h:mm a z\")\n          }\n        }\n        product {\n          id\n          name\n          smallPictureUrl\n        }\n        pastTracking {\n          trackingId\n          tracking {\n            checkpoints {\n              date {\n                formatted(fmt: \"YYYY/M/d\")\n              }\n              resultingTracking {\n                state\n                text\n              }\n            }\n          }\n          provider {\n            trackingUrl\n            providerUrl\n            name\n          }\n          lastUpdatedDate {\n            formatted(fmt: \"YYYY/d/M\")\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderDetails_InfractionDetails($id: String!) {\n    fulfillment {\n      order(id: $id) {\n        id\n        merchantTotal {\n          display\n        }\n        state\n        isWishExpress\n        isProcessing\n        showAplusShippingAddressTooltip\n        isAdvancedLogistics\n        isBlueFusion\n        fbwDetails {\n          isFbw\n        }\n        releasedTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n          timeUntil {\n            hours\n          }\n        }\n        orderTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        shippedDate {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        refundedTime {\n          formatted(fmt: \"M/d/YYYY h:mm a z\")\n        }\n        refundItems {\n          reasonInfo {\n            reason\n            text\n          }\n        }\n        shippingDetails {\n          trackingId\n          provider {\n            name\n            trackingUrl\n            providerUrl\n          }\n          country {\n            name\n          }\n          name\n          streetAddress1\n          streetAddress2\n          city\n          state\n          zipcode\n          phoneNumber\n        }\n        warehouse {\n          address {\n            name\n            streetAddress1\n            streetAddress2\n            city\n            state\n            zipcode\n            phoneNumber\n            country {\n              name\n            }\n          }\n        }\n        tracking {\n          confirmedFulfillmentDate {\n            formatted(fmt: \"M/d/YYYY h:mm a z\")\n          }\n          checkpoints {\n            date {\n              formatted(fmt: \"YYYY/M/d\")\n            }\n            resultingTracking {\n              state\n              text\n            }\n          }\n          deliveredDate {\n            formatted(fmt: \"M/d/YYYY h:mm a z\")\n          }\n        }\n        product {\n          id\n          name\n          smallPictureUrl\n        }\n        pastTracking {\n          trackingId\n          tracking {\n            checkpoints {\n              date {\n                formatted(fmt: \"YYYY/M/d\")\n              }\n              resultingTracking {\n                state\n                text\n              }\n            }\n          }\n          provider {\n            trackingUrl\n            providerUrl\n            name\n          }\n          lastUpdatedDate {\n            formatted(fmt: \"YYYY/d/M\")\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderShippingProviders_InfractionDisputeForm(\n    $id: String!\n    $originCountryCode: CountryCode!\n  ) {\n    fulfillment {\n      order(id: $id) {\n        availableShippingProviders(originCountryCode: $originCountryCode) {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderShippingProviders_InfractionDisputeForm(\n    $id: String!\n    $originCountryCode: CountryCode!\n  ) {\n    fulfillment {\n      order(id: $id) {\n        availableShippingProviders(originCountryCode: $originCountryCode) {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Authentication_TwoFactorGenTokenMutation(\n    $input: TwoFactorGenTokenInput!\n  ) {\n    authentication {\n      gen2faCode(input: $input) {\n        obfuscatedPhoneNumber\n        allowTfaPhone\n        isMerchant\n        bdEmail\n        isInternalEmployee\n        ok\n        error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Authentication_TwoFactorGenTokenMutation(\n    $input: TwoFactorGenTokenInput!\n  ) {\n    authentication {\n      gen2faCode(input: $input) {\n        obfuscatedPhoneNumber\n        allowTfaPhone\n        isMerchant\n        bdEmail\n        isInternalEmployee\n        ok\n        error\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Authentication_GenWechatQrMutation($input: GenWechatQrInput!) {\n    authentication {\n      genWechatQr(input: $input) {\n        ticket\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Authentication_GenWechatQrMutation($input: GenWechatQrInput!) {\n    authentication {\n      genWechatQr(input: $input) {\n        ticket\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Authentication_LoginMutation($input: LoginMutationInput!) {\n    authentication {\n      login(input: $input) {\n        loginOk\n        error\n        errorState\n        obfuscatedPhoneNumber\n        sessionKey\n        preferQr\n        wechatBound\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Authentication_LoginMutation($input: LoginMutationInput!) {\n    authentication {\n      login(input: $input) {\n        loginOk\n        error\n        errorState\n        obfuscatedPhoneNumber\n        sessionKey\n        preferQr\n        wechatBound\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Authentication_Okta_Url_Query {\n    platformConstants {\n      oktaOauthUri\n    }\n  }\n"): (typeof documents)["\n  query Authentication_Okta_Url_Query {\n    platformConstants {\n      oktaOauthUri\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Authentication_WechatCheckScanMutation(\n    $input: WechatCheckScanInput!\n  ) {\n    authentication {\n      checkWechatScan(input: $input) {\n        expireIn\n        scanned\n        ok\n        error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Authentication_WechatCheckScanMutation(\n    $input: WechatCheckScanInput!\n  ) {\n    authentication {\n      checkWechatScan(input: $input) {\n        expireIn\n        scanned\n        ok\n        error\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Questionnaire_MerchantLeadSubmit(\n    $input: MerchantLeadSubmissionInput!\n  ) {\n    authentication {\n      merchantLeadSubmission(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Questionnaire_MerchantLeadSubmit(\n    $input: MerchantLeadSubmissionInput!\n  ) {\n    authentication {\n      merchantLeadSubmission(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MmsWelcome_SubmitMmsMerchantLeadMutation(\n    $input: MMSLeadSubmissionInput!\n  ) {\n    authentication {\n      mmsLeadSubmission(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MmsWelcome_SubmitMmsMerchantLeadMutation(\n    $input: MMSLeadSubmissionInput!\n  ) {\n    authentication {\n      mmsLeadSubmission(input: $input) {\n        ok\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MerchantListingFee {\n  currentMerchant {\n    merchantListingFee {\n      feePolicyConfig {\n          wssTierLevel\n          wssTierName\n          freeThreshold\n          excessItemUnitPrice{\n              amount\n              currencyCode\n          }\n      }\n      latestListingFeeDetails{\n          latestItems\n      }\n      currentCycleListingFeeDetails{\n        currentBasedWssTierLevel\n        currentBasedWssTierName\n        currentFreeThreshold\n        currentItemsOverThreshold\n        currentUnitPrice {\n            amount\n            currencyCode\n        }\n        currentFeeToPay{\n            amount\n            currencyCode\n        }\n        currentCyclePayTime{\n            formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentPeakItems\n        currentPeakTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentCycleStartTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentCycleEndTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n      }\n    }\n  }\n } \n"): (typeof documents)["\nquery MerchantListingFee {\n  currentMerchant {\n    merchantListingFee {\n      feePolicyConfig {\n          wssTierLevel\n          wssTierName\n          freeThreshold\n          excessItemUnitPrice{\n              amount\n              currencyCode\n          }\n      }\n      latestListingFeeDetails{\n          latestItems\n      }\n      currentCycleListingFeeDetails{\n        currentBasedWssTierLevel\n        currentBasedWssTierName\n        currentFreeThreshold\n        currentItemsOverThreshold\n        currentUnitPrice {\n            amount\n            currencyCode\n        }\n        currentFeeToPay{\n            amount\n            currencyCode\n        }\n        currentCyclePayTime{\n            formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentPeakItems\n        currentPeakTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentCycleStartTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n        currentCycleEndTime {\n          formatted(fmt: \"%m/%d/%Y\")\n        }\n      }\n    }\n  }\n } \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation NoticePortal_CreateNotice($input: CreateNoticeInput!) {\n    dsa {\n      public {\n        createNotice(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NoticePortal_CreateNotice($input: CreateNoticeInput!) {\n    dsa {\n      public {\n        createNotice(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Refund_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          refund {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            refunds\n            refundRate\n            refundRatePercentile\n            itemNotMatchingListingPercentage\n            itemNotFitPercentage\n            shippingTakeTooLongPercentage\n            itemDamagedPercentage\n            receivedWrongItemPercentage\n            itemReturnedPercentage\n            itemNotWorkPercentage\n            failToFulfillPercentage\n            deliverWrongAddressPercentage\n            incompleteOrderPercentage\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Refund_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          refund {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            refunds\n            refundRate\n            refundRatePercentile\n            itemNotMatchingListingPercentage\n            itemNotFitPercentage\n            shippingTakeTooLongPercentage\n            itemDamagedPercentage\n            receivedWrongItemPercentage\n            itemReturnedPercentage\n            itemNotWorkPercentage\n            failToFulfillPercentage\n            deliverWrongAddressPercentage\n            incompleteOrderPercentage\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Refund_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            refund {\n              refunds\n              itemNotMatchingListingPercentage\n              itemNotFitPercentage\n              shippingTakeTooLongPercentage\n              itemDamagedPercentage\n              receivedWrongItemPercentage\n              itemReturnedPercentage\n              itemNotWorkPercentage\n              failToFulfillPercentage\n              deliverWrongAddressPercentage\n              incompleteOrderPercentage\n            }\n          }\n        }\n        isReturnsEnabled\n      }\n    }\n  }\n"): (typeof documents)["\n  query Refund_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            refund {\n              refunds\n              itemNotMatchingListingPercentage\n              itemNotFitPercentage\n              shippingTakeTooLongPercentage\n              itemDamagedPercentage\n              receivedWrongItemPercentage\n              itemReturnedPercentage\n              itemNotWorkPercentage\n              failToFulfillPercentage\n              deliverWrongAddressPercentage\n              incompleteOrderPercentage\n            }\n          }\n        }\n        isReturnsEnabled\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CEG_AverageFulfillmentTime_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageFulfillmentTime {\n            days\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CEG_AverageFulfillmentTime_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageFulfillmentTime {\n            days\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CEG_AverageRating_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageRating30d\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CEG_AverageRating_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageRating30d\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CEG_AverageShippingDelay_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageShippingDelay {\n            days\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CEG_AverageShippingDelay_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageShippingDelay {\n            days\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CEG_AverageShippingTime_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageShippingTime {\n            days\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CEG_AverageShippingTime_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          averageShippingTime {\n            days\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CEG_RefundRate_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          refundRate30d\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CEG_RefundRate_DataQuery($days: Int!, $offsetDays: Int!) {\n    currentMerchant {\n      storeStats {\n        daily(days: $days, offsetDays: $offsetDays) {\n          startDate {\n            mmddyyyy\n          }\n          endDate {\n            mmddyyyy\n          }\n          refundRate30d\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ShippingPerformanceShippingDataQuery($weeks: Int!) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          tracking {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            ordersFulfilled\n            averageClaimedFulfillmentTime {\n              hours\n            }\n            averageFulfillmentTime {\n              hours\n            }\n            ordersWithValidTracking\n            validTrackingRate\n            preFulfillmentCancellations\n            preFulfillmentCancellationRate\n            lateConfirmedFulfillment\n            lateConfirmedFulfillmentRate\n          }\n          delivery {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            ordersConfirmedDelivered\n            ordersConfirmedDeliveredRate\n            shippingTime {\n              days\n            }\n            timeToDoor {\n              days\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShippingPerformanceShippingDataQuery($weeks: Int!) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          tracking {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            ordersFulfilled\n            averageClaimedFulfillmentTime {\n              hours\n            }\n            averageFulfillmentTime {\n              hours\n            }\n            ordersWithValidTracking\n            validTrackingRate\n            preFulfillmentCancellations\n            preFulfillmentCancellationRate\n            lateConfirmedFulfillment\n            lateConfirmedFulfillmentRate\n          }\n          delivery {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            ordersConfirmedDelivered\n            ordersConfirmedDeliveredRate\n            shippingTime {\n              days\n            }\n            timeToDoor {\n              days\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CustomerService_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          cs {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            gmv {\n              amount\n              currencyCode\n            }\n            orders\n            orders30d\n            refund30d\n            refundRatio30d\n            orders93d\n            refund93d\n            refundRatio93d\n            chargeback\n            chargebackRatio\n            chargebackAmount {\n              amount\n              currencyCode\n            }\n            chargebackAmountRatio\n            tickets\n            ticketRatio\n            lateResponseRate30d\n            averageTicketResponseTime {\n              hours\n            }\n            customerSatisfaction\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CustomerService_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          cs {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            gmv {\n              amount\n              currencyCode\n            }\n            orders\n            orders30d\n            refund30d\n            refundRatio30d\n            orders93d\n            refund93d\n            refundRatio93d\n            chargeback\n            chargebackRatio\n            chargebackAmount {\n              amount\n              currencyCode\n            }\n            chargebackAmountRatio\n            tickets\n            ticketRatio\n            lateResponseRate30d\n            averageTicketResponseTime {\n              hours\n            }\n            customerSatisfaction\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CustomerService_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            cs {\n              gmv {\n                amount\n                currencyCode\n              }\n              orders\n              orders30d\n              refund30d\n              refundRatio30d\n              orders93d\n              refund93d\n              refundRatio93d\n              averageRating30d\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CustomerService_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            cs {\n              gmv {\n                amount\n                currencyCode\n              }\n              orders\n              orders30d\n              refund30d\n              refundRatio30d\n              orders93d\n              refund93d\n              refundRatio93d\n              averageRating30d\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Product_PerformanceProductDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          product {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            activeProducts\n            activeSkus\n            skusPerProduct\n            averagePrice {\n              amount\n              currencyCode\n            }\n            averageShippingPrice {\n              amount\n              currencyCode\n            }\n            priceToShippingRatio\n            averageAdditonalImagesPerProduct\n            productImpressions\n            gmv {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Product_PerformanceProductDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          product {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            activeProducts\n            activeSkus\n            skusPerProduct\n            averagePrice {\n              amount\n              currencyCode\n            }\n            averageShippingPrice {\n              amount\n              currencyCode\n            }\n            priceToShippingRatio\n            averageAdditonalImagesPerProduct\n            productImpressions\n            gmv {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Rating_PerformanceAggregateDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            storeRatings\n            averageStoreRating\n            averageProductRating\n            lowStoreRatingPercentage\n            productRatings\n            lowProductRatingPercentage\n            average30dStoreRating\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Rating_PerformanceAggregateDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            storeRatings\n            averageStoreRating\n            averageProductRating\n            lowStoreRatingPercentage\n            productRatings\n            lowProductRatingPercentage\n            average30dStoreRating\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Rating_PerformanceWeeklyStoreRatingDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            averageStoreRating\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Rating_PerformanceWeeklyStoreRatingDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            averageStoreRating\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Rating_PerformanceWeeklyProductRatingDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            averageProductRating\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Rating_PerformanceWeeklyProductRatingDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            averageProductRating\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Rating_PerformanceStoreRatingBreakdownDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            storeRatingsBreakdown {\n              oneStarRatings\n              twoStarRatings\n              threeStarRatings\n              fourStarRatings\n              fiveStarRatings\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Rating_PerformanceStoreRatingBreakdownDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            storeRatingsBreakdown {\n              oneStarRatings\n              twoStarRatings\n              threeStarRatings\n              fourStarRatings\n              fiveStarRatings\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Rating_PerformanceProductRatingnBreakdownDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            productRatingsBreakdown {\n              oneStarRatings\n              twoStarRatings\n              threeStarRatings\n              fourStarRatings\n              fiveStarRatings\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Rating_PerformanceProductRatingnBreakdownDataQuery($weeks: Int) {\n    currentMerchant {\n      storeStats {\n        weekly(weeks: $weeks) {\n          rating {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            productRatingsBreakdown {\n              oneStarRatings\n              twoStarRatings\n              threeStarRatings\n              fourStarRatings\n              fiveStarRatings\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Rating_ProductRatingListingDataQuery(\n    $offset: Int\n    $limit: Int\n    $listingTab: ProductRatingListingTab\n  ) {\n    currentMerchant {\n      storeStats {\n        productRatingsCount\n        productRatings(\n          offset: $offset\n          limit: $limit\n          listingTab: $listingTab\n        ) {\n          productId\n          average30dRating\n          ratings\n          sales\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Rating_ProductRatingListingDataQuery(\n    $offset: Int\n    $limit: Int\n    $listingTab: ProductRatingListingTab\n  ) {\n    currentMerchant {\n      storeStats {\n        productRatingsCount\n        productRatings(\n          offset: $offset\n          limit: $limit\n          listingTab: $listingTab\n        ) {\n          productId\n          average30dRating\n          ratings\n          sales\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Rating_StoreRatingListingDataQuery(\n    $offset: Int\n    $limit: Int\n    $filterByStars: Int\n  ) {\n    currentMerchant {\n      storeStats {\n        storeRatingsCount(filterByStars: $filterByStars)\n        storeRatings(\n          offset: $offset\n          limit: $limit\n          filterByStars: $filterByStars\n        ) {\n          orderIds\n          date\n          rating\n          comment\n          refundReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Rating_StoreRatingListingDataQuery(\n    $offset: Int\n    $limit: Int\n    $filterByStars: Int\n  ) {\n    currentMerchant {\n      storeStats {\n        storeRatingsCount(filterByStars: $filterByStars)\n        storeRatings(\n          offset: $offset\n          limit: $limit\n          filterByStars: $filterByStars\n        ) {\n          orderIds\n          date\n          rating\n          comment\n          refundReason\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Sales_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          sales {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            productImpressions\n            addToCart\n            addToCartConversion\n            orders\n            checkoutConversion\n            gmv {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Sales_PerformanceAggregateDataQuery($weeks: Int!) {\n    currentMerchant {\n      primaryCurrency\n      storeStats {\n        weekly(weeks: $weeks) {\n          sales {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            productImpressions\n            addToCart\n            addToCartConversion\n            orders\n            checkoutConversion\n            gmv {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Sales_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            sales {\n              productImpressions\n              addToCart\n              addToCartConversion\n              orders\n              checkoutConversion\n              gmv {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Sales_PerformanceBreakdownDataQuery(\n    $offset: Int\n    $limit: Int\n    $sort: ProductSort\n    $weeks_from_the_latest: Int\n  ) {\n    currentMerchant {\n      primaryCurrency\n    }\n    productCatalog {\n      productCountV2(isEnabled: true)\n      productsV2(limit: $limit, offset: $offset, sort: $sort, isEnabled: true) {\n        id\n        stats {\n          weekly(weeksFromTheLatest: $weeks_from_the_latest) {\n            startDate {\n              mmddyyyy\n            }\n            endDate {\n              mmddyyyy\n            }\n            sales {\n              productImpressions\n              addToCart\n              addToCartConversion\n              orders\n              checkoutConversion\n              gmv {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PerformanceOverviewPageInitialDataQuery {\n    policy {\n      misleadingProducts: merchantWarningCount(\n        reasons: [PRODUCT_IS_INAPPROPRIATE]\n        isMisleading: true\n        states: AWAITING_MERCHANT\n      )\n      ipInfringementProducts: merchantWarningCount(\n        reasons: [FINE_FOR_COUNTERFEIT_GOODS]\n        states: AWAITING_MERCHANT\n      )\n      prohibitedProducts: merchantWarningCount(\n        reasons: [PRODUCT_IS_INAPPROPRIATE, CN_PROHIBITED_PRODUCTS]\n        states: AWAITING_MERCHANT\n      )\n    }\n    currentMerchant {\n      id\n      state\n      storeStats {\n        updateTime {\n          formatted(fmt: \"%m/%d/%Y\")\n          timezone\n        }\n        tracking {\n          validTrackingRate\n          lateConfirmedFulfillmentRate\n          averageFulfillmentTime {\n            hours\n          }\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        delivery {\n          timeToDoor {\n            days\n          }\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        refunds {\n          refundRate\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        rating {\n          averageProductRating\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        cs {\n          lateResponseRate30d\n          customerSatisfactionScore\n          averageTicketResponseTime {\n            hours\n          }\n          startDate {\n            iso8061\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            iso8061\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PerformanceOverviewPageInitialDataQuery {\n    policy {\n      misleadingProducts: merchantWarningCount(\n        reasons: [PRODUCT_IS_INAPPROPRIATE]\n        isMisleading: true\n        states: AWAITING_MERCHANT\n      )\n      ipInfringementProducts: merchantWarningCount(\n        reasons: [FINE_FOR_COUNTERFEIT_GOODS]\n        states: AWAITING_MERCHANT\n      )\n      prohibitedProducts: merchantWarningCount(\n        reasons: [PRODUCT_IS_INAPPROPRIATE, CN_PROHIBITED_PRODUCTS]\n        states: AWAITING_MERCHANT\n      )\n    }\n    currentMerchant {\n      id\n      state\n      storeStats {\n        updateTime {\n          formatted(fmt: \"%m/%d/%Y\")\n          timezone\n        }\n        tracking {\n          validTrackingRate\n          lateConfirmedFulfillmentRate\n          averageFulfillmentTime {\n            hours\n          }\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        delivery {\n          timeToDoor {\n            days\n          }\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        refunds {\n          refundRate\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        rating {\n          averageProductRating\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n        cs {\n          lateResponseRate30d\n          customerSatisfactionScore\n          averageTicketResponseTime {\n            hours\n          }\n          startDate {\n            iso8061\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n          endDate {\n            iso8061\n            formatted(fmt: \"%m/%d\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductsMetricsTableComponentQuery {\n    currentMerchant {\n      state\n    }\n  }\n"): (typeof documents)["\n  query ProductsMetricsTableComponentQuery {\n    currentMerchant {\n      state\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductsMetricsTableTableQuery(\n    $offset: Int!\n    $limit: Int!\n    $days: Int!\n    $searchType: ProductSearchType\n    $query: String\n  ) {\n    productCatalog {\n      productCountV2(searchType: $searchType, query: $query, state: ACTIVE)\n      productsV2(\n        limit: $limit\n        offset: $offset\n        searchType: $searchType\n        query: $query\n        sort: { order: DESC, field: SALES }\n        state: ACTIVE\n      ) {\n        sku\n        name\n        id\n        variations {\n          price {\n            amount\n            display\n          }\n        }\n        stats {\n          totals(coreMetricsOnly: true, days: $days) {\n            gmv {\n              amount\n              display\n            }\n            orders\n            impressions\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductsMetricsTableTableQuery(\n    $offset: Int!\n    $limit: Int!\n    $days: Int!\n    $searchType: ProductSearchType\n    $query: String\n  ) {\n    productCatalog {\n      productCountV2(searchType: $searchType, query: $query, state: ACTIVE)\n      productsV2(\n        limit: $limit\n        offset: $offset\n        searchType: $searchType\n        query: $query\n        sort: { order: DESC, field: SALES }\n        state: ACTIVE\n      ) {\n        sku\n        name\n        id\n        variations {\n          price {\n            amount\n            display\n          }\n        }\n        stats {\n          totals(coreMetricsOnly: true, days: $days) {\n            gmv {\n              amount\n              display\n            }\n            orders\n            impressions\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ProductsMetricsPerformanceTableQuery($offset: Int!, $limit: Int!, $days: Int!, $searchType: ProductSearchType, $query: String, $withPerformance: Boolean!, $sort: PerformanceProductSort) {\n  productCatalog {\n    productCountV3(withPerformance: $withPerformance)\n    productsV3(\n      limit: $limit\n      offset: $offset\n      sort: $sort\n      withPerformance: $withPerformance\n      days: $days\n      searchType: $searchType\n      query: $query\n    ) {\n      sku\n      name\n      id\n      variations {\n        price {\n          amount\n          display\n        }\n      }\n      stats {\n        totals(coreMetricsOnly: true, days: $days) {\n          gmv {\n            amount\n            display\n          }\n          orders\n          impressions\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery ProductsMetricsPerformanceTableQuery($offset: Int!, $limit: Int!, $days: Int!, $searchType: ProductSearchType, $query: String, $withPerformance: Boolean!, $sort: PerformanceProductSort) {\n  productCatalog {\n    productCountV3(withPerformance: $withPerformance)\n    productsV3(\n      limit: $limit\n      offset: $offset\n      sort: $sort\n      withPerformance: $withPerformance\n      days: $days\n      searchType: $searchType\n      query: $query\n    ) {\n      sku\n      name\n      id\n      variations {\n        price {\n          amount\n          display\n        }\n      }\n      stats {\n        totals(coreMetricsOnly: true, days: $days) {\n          gmv {\n            amount\n            display\n          }\n          orders\n          impressions\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TierPreviewBannerQuery {\n    currentMerchant {\n      wishSellerStandard {\n        level\n        stats {\n          levelPreview\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TierPreviewBannerQuery {\n    currentMerchant {\n      wishSellerStandard {\n        level\n        stats {\n          levelPreview\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UnderperformingProductsHeaderQuery($days: Int) {\n    currentMerchant {\n      wishSellerStandard {\n        stats {\n          badProductRate\n          badProductCount\n          productWithOrdersCount\n          date {\n            unix\n          }\n        }\n        recentStats(days: $days) {\n          badProductRate\n          date {\n            unix\n          }\n        }\n        monthlyUpdateStats {\n          badProductRate\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UnderperformingProductsHeaderQuery($days: Int) {\n    currentMerchant {\n      wishSellerStandard {\n        stats {\n          badProductRate\n          badProductCount\n          productWithOrdersCount\n          date {\n            unix\n          }\n        }\n        recentStats(days: $days) {\n          badProductRate\n          date {\n            unix\n          }\n        }\n        monthlyUpdateStats {\n          badProductRate\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UnderperformingProductsPerformanceScaleQuery {\n    currentMerchant {\n      wishSellerStandard {\n        stats {\n          badProductRate\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UnderperformingProductsPerformanceScaleQuery {\n    currentMerchant {\n      wishSellerStandard {\n        stats {\n          badProductRate\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UnderperformingProductsTableQuery {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productQualityRefund(isBadByRefund: true) {\n            totalCount\n          }\n          productRating(isBadByRating: true) {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UnderperformingProductsTableQuery {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productQualityRefund(isBadByRefund: true) {\n            totalCount\n          }\n          productRating(isBadByRating: true) {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductCatalogProductStats_ProductChart($id: String!, $days: Int!) {\n    productCatalog {\n      product(id: $id) {\n        stats {\n          daily(coreMetricsOnly: true, days: $days) {\n            orders\n            impressions\n            startDate {\n              formatted(fmt: \"%m/%d\")\n              fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n              inTimezone(identifier: \"America/Los_Angeles\") {\n                formatted(fmt: \"%m/%d\")\n                fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductCatalogProductStats_ProductChart($id: String!, $days: Int!) {\n    productCatalog {\n      product(id: $id) {\n        stats {\n          daily(coreMetricsOnly: true, days: $days) {\n            orders\n            impressions\n            startDate {\n              formatted(fmt: \"%m/%d\")\n              fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n              inTimezone(identifier: \"America/Los_Angeles\") {\n                formatted(fmt: \"%m/%d\")\n                fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query StoreSalesStats_StoreSalesCharts($days: Int!) {\n    currentMerchant {\n      storeStats {\n        totals(coreMetricsOnly: true, days: $days) {\n          gmv {\n            amount\n            display\n            currencyCode\n          }\n          impressions\n          pageViews\n          addToCarts\n          orders\n        }\n        daily(coreMetricsOnly: true, days: $days) {\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n              fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n            }\n          }\n          gmv {\n            amount\n            display\n            currencyCode\n          }\n          impressions\n          orders\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query StoreSalesStats_StoreSalesCharts($days: Int!) {\n    currentMerchant {\n      storeStats {\n        totals(coreMetricsOnly: true, days: $days) {\n          gmv {\n            amount\n            display\n            currencyCode\n          }\n          impressions\n          pageViews\n          addToCarts\n          orders\n        }\n        daily(coreMetricsOnly: true, days: $days) {\n          startDate {\n            formatted(fmt: \"%m/%d\")\n            fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n            inTimezone(identifier: \"America/Los_Angeles\") {\n              formatted(fmt: \"%m/%d\")\n              fullDateFormatted: formatted(fmt: \"%A %m/%d/%Y\")\n            }\n          }\n          gmv {\n            amount\n            display\n            currencyCode\n          }\n          impressions\n          orders\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query WSSInsight_InfractionWindow {\n    currentMerchant {\n      wishSellerStandard {\n        policyInfractionWindowStartDate {\n          unix\n        }\n        policyInfractionWindowEndDate {\n          unix\n        }\n        fulfillmentInfractionWindowStartDate {\n          unix\n        }\n        fulfillmentInfractionWindowEndDate {\n          unix\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query WSSInsight_InfractionWindow {\n    currentMerchant {\n      wishSellerStandard {\n        policyInfractionWindowStartDate {\n          unix\n        }\n        policyInfractionWindowEndDate {\n          unix\n        }\n        fulfillmentInfractionWindowStartDate {\n          unix\n        }\n        fulfillmentInfractionWindowEndDate {\n          unix\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query WSSOrdersDeepDive($days: Int) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          totalRatingsReceived\n          fulfillmentRateDenominator\n          refundRateDenominator\n          hasFulfillmentSpeedOrderCount\n          validTrackingRateDenominator\n          qualityRefundCount\n          orderUnfulfilled {\n            totalCount\n          }\n          orderInvalidTracking {\n            totalCount\n          }\n          orderLogisticsRefund {\n            totalCount\n          }\n        }\n        stats {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n          date {\n            unix\n          }\n        }\n        monthlyUpdateStats {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n        }\n        recentStats(days: $days) {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n          date {\n            unix\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query WSSOrdersDeepDive($days: Int) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          totalRatingsReceived\n          fulfillmentRateDenominator\n          refundRateDenominator\n          hasFulfillmentSpeedOrderCount\n          validTrackingRateDenominator\n          qualityRefundCount\n          orderUnfulfilled {\n            totalCount\n          }\n          orderInvalidTracking {\n            totalCount\n          }\n          orderLogisticsRefund {\n            totalCount\n          }\n        }\n        stats {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n          date {\n            unix\n          }\n        }\n        monthlyUpdateStats {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n        }\n        recentStats(days: $days) {\n          userRating\n          orderFultillmentRate\n          productQualityRefundRate\n          fulfillmentSpeed {\n            seconds\n            minutes\n            hours\n            days\n          }\n          validTrackingRate\n          productLogisticsRefundRate\n          date {\n            unix\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_UserRating(\n    $offset: Int\n    $limit: Int\n    $sortField: SortProductRatingField\n    $sortOrder: SortByOrder\n    $productIds: [ObjectIdType!]\n    $isBadByRating: Boolean\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productRating(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productIds: $productIds\n            isBadByRating: $isBadByRating\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              receivedRatings\n              averageRating\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_UserRating(\n    $offset: Int\n    $limit: Int\n    $sortField: SortProductRatingField\n    $sortOrder: SortByOrder\n    $productIds: [ObjectIdType!]\n    $isBadByRating: Boolean\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productRating(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productIds: $productIds\n            isBadByRating: $isBadByRating\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              receivedRatings\n              averageRating\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_OrderFulfillmentRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $unfulfilledReasons: [WSSSUnfulfilledReasons!]\n    $destinations: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderUnfulfilled(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            unfulfilledReasons: $unfulfilledReasons\n            destinations: $destinations\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              orderId\n              transactionDate {\n                unix\n              }\n              unfulfilledReason\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_OrderFulfillmentRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $unfulfilledReasons: [WSSSUnfulfilledReasons!]\n    $destinations: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderUnfulfilled(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            unfulfilledReasons: $unfulfilledReasons\n            destinations: $destinations\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              orderId\n              transactionDate {\n                unix\n              }\n              unfulfilledReason\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_WSSDestinationOptions(\n    $pageType: WSSDeepDivePageType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          destinations(pageType: $pageType)\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_WSSDestinationOptions(\n    $pageType: WSSDeepDivePageType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          destinations(pageType: $pageType)\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_WSSCarrierOptions(\n    $pageType: WSSDeepDivePageType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          carriers(pageType: $pageType)\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_WSSCarrierOptions(\n    $pageType: WSSDeepDivePageType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          carriers(pageType: $pageType)\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_WSSUnfulfilledReasonOptions {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          unfulfilledReasons\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_WSSUnfulfilledReasonOptions {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          unfulfilledReasons\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_WSSLogisticsRefundReasonOptions {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          logisticsRefundReasons\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_WSSLogisticsRefundReasonOptions {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          logisticsRefundReasons\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_WSSQualityRefundReasonOptions(\n    $productId: ObjectIdType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          qualityRefundReasons(productId: $productId)\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_WSSQualityRefundReasonOptions(\n    $productId: ObjectIdType!\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          qualityRefundReasons(productId: $productId)\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_ProductQualityRefund(\n    $offset: Int\n    $limit: Int\n    $sortField: SortProductQualityRefundField\n    $sortOrder: SortByOrder\n    $productIds: [ObjectIdType!]\n    $isBadByRefund: Boolean\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productQualityRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productIds: $productIds\n            isBadByRefund: $isBadByRefund\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              receivedOrders\n              qualityRefundIssued\n              qualityRefundRate\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_ProductQualityRefund(\n    $offset: Int\n    $limit: Int\n    $sortField: SortProductQualityRefundField\n    $sortOrder: SortByOrder\n    $productIds: [ObjectIdType!]\n    $isBadByRefund: Boolean\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          productQualityRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productIds: $productIds\n            isBadByRefund: $isBadByRefund\n          ) {\n            totalCount\n            dataSlice {\n              productId\n              productName\n              productImageUrl\n              receivedOrders\n              qualityRefundIssued\n              qualityRefundRate\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_OrderQualityRefund(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $productId: ObjectIdType\n    $refundReasons: [WSSQualityRefundReason!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderQualityRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productId: $productId\n            refundReasons: $refundReasons\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              refundReason\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_OrderQualityRefund(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $productId: ObjectIdType\n    $refundReasons: [WSSQualityRefundReason!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderQualityRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            productId: $productId\n            refundReasons: $refundReasons\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              refundReason\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_QualityRefundBreakdown($productId: ObjectIdType) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          qualityRefundBreakdown(productId: $productId) {\n            productId\n            reason\n            count\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_QualityRefundBreakdown($productId: ObjectIdType) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          qualityRefundBreakdown(productId: $productId) {\n            productId\n            reason\n            count\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_ConfirmedFulfillmentSpeed(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderFulfillmentSpeed\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $destinations: [String!]\n    $carriers: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderFulfillmentSpeed(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            destinations: $destinations\n            carriers: $carriers\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              trackingId\n              carrier\n              fulfillmentSpeed {\n                days\n                hours\n                minutes\n                seconds\n              }\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_ConfirmedFulfillmentSpeed(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderFulfillmentSpeed\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $destinations: [String!]\n    $carriers: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderFulfillmentSpeed(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            destinations: $destinations\n            carriers: $carriers\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              trackingId\n              carrier\n              fulfillmentSpeed {\n                days\n                hours\n                minutes\n                seconds\n              }\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_ValidTrackingRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $destinations: [String!]\n    $carriers: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          destinationsInFulfillment\n          carriersInFulfillment\n          orderInvalidTracking(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            destinations: $destinations\n            carriers: $carriers\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_ValidTrackingRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $destinations: [String!]\n    $carriers: [String!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          destinationsInFulfillment\n          carriersInFulfillment\n          orderInvalidTracking(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            destinations: $destinations\n            carriers: $carriers\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              destination\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderMetricsDeepDive_LogisticsRefundRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $carriers: [String!]\n    $refundReasons: [WSSLogisticsRefundReason!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderLogisticsRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            carriers: $carriers\n            refundReasons: $refundReasons\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              refundReason\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderMetricsDeepDive_LogisticsRefundRate(\n    $offset: Int\n    $limit: Int\n    $sortField: SortOrderTransactionDateField\n    $sortOrder: SortByOrder\n    $orderIds: [ObjectIdType!]\n    $carriers: [String!]\n    $refundReasons: [WSSLogisticsRefundReason!]\n  ) {\n    currentMerchant {\n      wishSellerStandard {\n        deepDive {\n          orderLogisticsRefund(\n            offset: $offset\n            limit: $limit\n            sortField: $sortField\n            sortOrder: $sortOrder\n            orderIds: $orderIds\n            carriers: $carriers\n            refundReasons: $refundReasons\n          ) {\n            totalCount\n            dataSlice {\n              orderId\n              transactionDate {\n                unix\n              }\n              carrier\n              refundReason\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantScore_ThingsToWatch {\n    currentMerchant {\n      wishSellerStandard {\n        thingsToWatchBoard {\n          dataSlice {\n            metricType\n            metricTrend\n            metricValue\n            recordTime {\n              unix\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MerchantScore_ThingsToWatch {\n    currentMerchant {\n      wishSellerStandard {\n        thingsToWatchBoard {\n          dataSlice {\n            metricType\n            metricTrend\n            metricValue\n            recordTime {\n              unix\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantScore_MerchantScoreSection {\n    currentMerchant {\n      id\n      wishSellerStandard {\n        prevLevel\n        level\n        rawLevel\n        layer1Level\n        isInactiveToBan\n        lastTierUpdateDate {\n          unix\n        }\n        nextMonthlyTierUpdateDate {\n          unix\n        }\n        endDateForLastMonthlyUpdateCalcWindow {\n          unix\n        }\n        policyInfractionWindowStartDate {\n          unix\n        }\n        policyInfractionWindowEndDate {\n          unix\n        }\n        fulfillmentInfractionWindowStartDate {\n          unix\n        }\n        fulfillmentInfractionWindowEndDate {\n          unix\n        }\n        stats {\n          userRating\n          orderFultillmentRate\n          validTrackingRate\n          productQualityRefundRate\n          productLogisticsRefundRate\n          badProductRate\n          fulfillmentSpeed {\n            days\n            hours\n            minutes\n            seconds\n          }\n          maturedOrderCount\n          ninetyDayOrderCount\n          date {\n            unix\n          }\n        }\n        lastUpdatedStats {\n          mmddyyyy\n        }\n        monthlyUpdateStats {\n          userRating\n          orderFultillmentRate\n          validTrackingRate\n          productQualityRefundRate\n          productLogisticsRefundRate\n          badProductRate\n          fulfillmentSpeed {\n            days\n            hours\n            minutes\n            seconds\n          }\n          maturedOrderCount\n          ninetyDayOrderCount\n          date {\n            unix\n          }\n        }\n        complianceUpdateStats {\n          misleadingTrackingCount\n          prohibitedProductCount\n          misleadingListingCount\n          orderCancellationCount\n          unfulfilledOrderCount\n          lateConfirmedFulfillmentCount\n          date {\n            unix\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MerchantScore_MerchantScoreSection {\n    currentMerchant {\n      id\n      wishSellerStandard {\n        prevLevel\n        level\n        rawLevel\n        layer1Level\n        isInactiveToBan\n        lastTierUpdateDate {\n          unix\n        }\n        nextMonthlyTierUpdateDate {\n          unix\n        }\n        endDateForLastMonthlyUpdateCalcWindow {\n          unix\n        }\n        policyInfractionWindowStartDate {\n          unix\n        }\n        policyInfractionWindowEndDate {\n          unix\n        }\n        fulfillmentInfractionWindowStartDate {\n          unix\n        }\n        fulfillmentInfractionWindowEndDate {\n          unix\n        }\n        stats {\n          userRating\n          orderFultillmentRate\n          validTrackingRate\n          productQualityRefundRate\n          productLogisticsRefundRate\n          badProductRate\n          fulfillmentSpeed {\n            days\n            hours\n            minutes\n            seconds\n          }\n          maturedOrderCount\n          ninetyDayOrderCount\n          date {\n            unix\n          }\n        }\n        lastUpdatedStats {\n          mmddyyyy\n        }\n        monthlyUpdateStats {\n          userRating\n          orderFultillmentRate\n          validTrackingRate\n          productQualityRefundRate\n          productLogisticsRefundRate\n          badProductRate\n          fulfillmentSpeed {\n            days\n            hours\n            minutes\n            seconds\n          }\n          maturedOrderCount\n          ninetyDayOrderCount\n          date {\n            unix\n          }\n        }\n        complianceUpdateStats {\n          misleadingTrackingCount\n          prohibitedProductCount\n          misleadingListingCount\n          orderCancellationCount\n          unfulfilledOrderCount\n          lateConfirmedFulfillmentCount\n          date {\n            unix\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ListingFeePolicyConfig {\n  currentMerchant {\n    merchantListingFee {\n      feePolicyConfig {\n        wssTierLevel\n        wssTierName\n        freeThreshold\n        excessItemUnitPrice {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery ListingFeePolicyConfig {\n  currentMerchant {\n    merchantListingFee {\n      feePolicyConfig {\n        wssTierLevel\n        wssTierName\n        freeThreshold\n        excessItemUnitPrice {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddEprMutation($input: CreateUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          createUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddEprMutation($input: CreateUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          createUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditEprMutation($input: UpdateUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          updateUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditEprMutation($input: UpdateUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          updateUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteEprMutation($input: DeleteUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          deleteUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteEprMutation($input: DeleteUinInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          deleteUin(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EprNonCompliantSummaryQuery {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            summaryRecords {\n              country {\n                name\n                code\n              }\n              eprCategoryName\n              nonCompliantProductCount\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EprNonCompliantSummaryQuery {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            summaryRecords {\n              country {\n                name\n                code\n              }\n              eprCategoryName\n              nonCompliantProductCount\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EprNonCompliantCountriesAvailableQuery {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            summaryRecords {\n              country {\n                name\n                code\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EprNonCompliantCountriesAvailableQuery {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            summaryRecords {\n              country {\n                name\n                code\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EprNonCompliantProductsQuery(\n    $countryCode: CountryCode!\n    $eprCategories: [Int!]\n    $productId: String\n    $offset: Int\n    $limit: Int\n  ) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            productRecordTotal(\n              countryCode: $countryCode\n              eprCategories: $eprCategories\n              productId: $productId\n            )\n            productRecords(\n              countryCode: $countryCode\n              eprCategories: $eprCategories\n              productId: $productId\n              offset: $offset\n              limit: $limit\n            ) {\n              productId\n              country {\n                name\n                code\n              }\n              taxonomyCategoryNames\n              eprCategoryNames\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EprNonCompliantProductsQuery(\n    $countryCode: CountryCode!\n    $eprCategories: [Int!]\n    $productId: String\n    $offset: Int\n    $limit: Int\n  ) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          eprNonCompliantSummary {\n            productRecordTotal(\n              countryCode: $countryCode\n              eprCategories: $eprCategories\n              productId: $productId\n            )\n            productRecords(\n              countryCode: $countryCode\n              eprCategories: $eprCategories\n              productId: $productId\n              offset: $offset\n              limit: $limit\n            ) {\n              productId\n              country {\n                name\n                code\n              }\n              taxonomyCategoryNames\n              eprCategoryNames\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExtendedProducerResponsibilityPageQuery($countryCode: CountryCode!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          country(countryCode: $countryCode) {\n            hasAcceptedTos\n            categories {\n              eprId: id # using id as a name breaks Apollo's caching\n              category\n              categoryName\n              uin\n              responsibleEntityName\n              status\n              inScopePidCount\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ExtendedProducerResponsibilityPageQuery($countryCode: CountryCode!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          country(countryCode: $countryCode) {\n            hasAcceptedTos\n            categories {\n              eprId: id # using id as a name breaks Apollo's caching\n              category\n              categoryName\n              uin\n              responsibleEntityName\n              status\n              inScopePidCount\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductComplianceCenterQuery {\n    policy {\n      productCompliance {\n        productsWithEuResponsiblePerson: linkCount(\n          categories: [TOYS, ELECTRICAL_PRODUCTS, PPE, ELECTRONICS]\n          euComplianceCategories: [\n            FOOD\n            EEE\n            ENVIRONMENT\n            OTHER\n            CHEMICAL\n            COSMETICS\n            TOYS\n          ]\n          states: [HAS_RP]\n          complianceTypes: [EU_COMPLIANCE]\n        )\n        productsWithoutEuResponsiblePerson: linkCount(\n          categories: [TOYS, ELECTRICAL_PRODUCTS, PPE, ELECTRONICS]\n          euComplianceCategories: [\n            FOOD\n            EEE\n            ENVIRONMENT\n            OTHER\n            CHEMICAL\n            COSMETICS\n            TOYS\n          ]\n          states: [NO_RP]\n          complianceTypes: [EU_COMPLIANCE]\n        )\n        extendedProducerResponsibility {\n          countries {\n            country {\n              name\n              code\n            }\n            categoriesWithEpr\n            categoriesWithoutEpr\n            hasAcceptedTos\n          }\n          eprNonCompliantSummary {\n            summaryRecords {\n              nonCompliantProductCount\n            }\n          }\n        }\n        euComplianceInScope\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductComplianceCenterQuery {\n    policy {\n      productCompliance {\n        productsWithEuResponsiblePerson: linkCount(\n          categories: [TOYS, ELECTRICAL_PRODUCTS, PPE, ELECTRONICS]\n          euComplianceCategories: [\n            FOOD\n            EEE\n            ENVIRONMENT\n            OTHER\n            CHEMICAL\n            COSMETICS\n            TOYS\n          ]\n          states: [HAS_RP]\n          complianceTypes: [EU_COMPLIANCE]\n        )\n        productsWithoutEuResponsiblePerson: linkCount(\n          categories: [TOYS, ELECTRICAL_PRODUCTS, PPE, ELECTRONICS]\n          euComplianceCategories: [\n            FOOD\n            EEE\n            ENVIRONMENT\n            OTHER\n            CHEMICAL\n            COSMETICS\n            TOYS\n          ]\n          states: [NO_RP]\n          complianceTypes: [EU_COMPLIANCE]\n        )\n        extendedProducerResponsibility {\n          countries {\n            country {\n              name\n              code\n            }\n            categoriesWithEpr\n            categoriesWithoutEpr\n            hasAcceptedTos\n          }\n          eprNonCompliantSummary {\n            summaryRecords {\n              nonCompliantProductCount\n            }\n          }\n        }\n        euComplianceInScope\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TosModalQuery($countryCode: CountryCode!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          country(countryCode: $countryCode) {\n            tos\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TosModalQuery($countryCode: CountryCode!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          country(countryCode: $countryCode) {\n            tos\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AcceptTosMutation($input: AcceptTosInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          acceptTos(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AcceptTosMutation($input: AcceptTosInput!) {\n    policy {\n      productCompliance {\n        extendedProducerResponsibility {\n          acceptTos(input: $input) {\n            ok\n            message\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductCsvHistory_GetNewBulkJobsDetail(\n      $bulkCsvJobId: String!\n    ) {\n      productCatalog {\n        newBulkCsvJobDetail(bulkCsvJobId: $bulkCsvJobId) {\n          id\n          startTime {\n            unix\n          }\n          completedTime {\n            unix\n          }\n          fileName\n          fileLink\n          feedType\n          status\n          totalCount\n          aliveCount\n          errorsCount\n          processingCount\n          underReviewCount\n          noChangesCount\n        }\n      }\n    } \n"): (typeof documents)["\n  query ProductCsvHistory_GetNewBulkJobsDetail(\n      $bulkCsvJobId: String!\n    ) {\n      productCatalog {\n        newBulkCsvJobDetail(bulkCsvJobId: $bulkCsvJobId) {\n          id\n          startTime {\n            unix\n          }\n          completedTime {\n            unix\n          }\n          fileName\n          fileLink\n          feedType\n          status\n          totalCount\n          aliveCount\n          errorsCount\n          processingCount\n          underReviewCount\n          noChangesCount\n        }\n      }\n    } \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductCsvHistory_GetNewBulkAddEditJobsV2(\n      $offset: Int!,\n      $limit: Int!,\n      $feedType: ProductCSVJobType\n    ) {\n      productCatalog {\n        newBulkCsvJobs(offset: $offset, limit: $limit, feedType: $feedType) {\n          id\n          startTime {\n            unix\n          }\n          completedTime {\n            unix\n          }\n          fileName\n          feedType\n          status\n          version\n        }\n        newBulkCsvJobsCount(feedType: $feedType)\n      }\n    } \n"): (typeof documents)["\n  query ProductCsvHistory_GetNewBulkAddEditJobsV2(\n      $offset: Int!,\n      $limit: Int!,\n      $feedType: ProductCSVJobType\n    ) {\n      productCatalog {\n        newBulkCsvJobs(offset: $offset, limit: $limit, feedType: $feedType) {\n          id\n          startTime {\n            unix\n          }\n          completedTime {\n            unix\n          }\n          fileName\n          feedType\n          status\n          version\n        }\n        newBulkCsvJobsCount(feedType: $feedType)\n      }\n    } \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CSV_GetTaxonomyTreeCsvRows {\n    taxonomy {\n      taxonomyTreeCsv\n    }\n  }\n"): (typeof documents)["\n  query CSV_GetTaxonomyTreeCsvRows {\n    taxonomy {\n      taxonomyTreeCsv\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CSV_UpsertProductCsvMutation(\n    $input: UpsertProductsFromCSVFileInput!\n  ) {\n    productCatalog {\n      upsertProductCsvFile(input: $input) {\n        ok\n        message\n        jobId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CSV_UpsertProductCsvMutation(\n    $input: UpsertProductsFromCSVFileInput!\n  ) {\n    productCatalog {\n      upsertProductCsvFile(input: $input) {\n        ok\n        message\n        jobId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation downloadProductCatalog($input: DownloadAllProductsInput!) {\n    productCatalog {\n      downloadAllProducts(input: $input) {\n        errorMessage\n        ok\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation downloadProductCatalog($input: DownloadAllProductsInput!) {\n    productCatalog {\n      downloadAllProducts(input: $input) {\n        errorMessage\n        ok\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DownloadAllHeaders($subcategoryIds: [Int!]) {\n    productCatalog {\n      csvAllHeaderNames(subcategoryIds: $subcategoryIds)\n    }\n  }\n"): (typeof documents)["\n  query DownloadAllHeaders($subcategoryIds: [Int!]) {\n    productCatalog {\n      csvAllHeaderNames(subcategoryIds: $subcategoryIds)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DownloadEditVariationHeaders($subcategoryIds: [Int!]) {\n    productCatalog {\n      csvEditVariationsHeaderNames(subcategoryIds: $subcategoryIds)\n    }\n  }\n"): (typeof documents)["\n  query DownloadEditVariationHeaders($subcategoryIds: [Int!]) {\n    productCatalog {\n      csvEditVariationsHeaderNames(subcategoryIds: $subcategoryIds)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DownloadShippingHeaders {\n    productCatalog {\n      csvShippingHeaderNames\n    }\n  }\n"): (typeof documents)["\n  query DownloadShippingHeaders {\n    productCatalog {\n      csvShippingHeaderNames\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DownloadPriceInventoryHeaders {\n    productCatalog {\n      csvPriceInventoryHeaderNames\n    }\n  }\n"): (typeof documents)["\n  query DownloadPriceInventoryHeaders {\n    productCatalog {\n      csvPriceInventoryHeaderNames\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DownloadTitleImageDescHeaders {\n    productCatalog {\n      csvTitleImagesDescriptionHeaderNames\n    }\n  }\n"): (typeof documents)["\n  query DownloadTitleImageDescHeaders {\n    productCatalog {\n      csvTitleImagesDescriptionHeaderNames\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DownloadEnableDisableHeaders {\n    productCatalog {\n      csvEnableDisableHeaderNames\n    }\n  }\n"): (typeof documents)["\n  query DownloadEnableDisableHeaders {\n    productCatalog {\n      csvEnableDisableHeaderNames\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DownloadCsvConsignmentHeaders {\n    productCatalog {\n      csvConsignmentHeaderNames\n    }\n  }\n"): (typeof documents)["\n  query DownloadCsvConsignmentHeaders {\n    productCatalog {\n      csvConsignmentHeaderNames\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query merchantConsignmentModeQuery {\n    currentMerchant {\n      isConsignmentMode\n    }\n  }\n"): (typeof documents)["\n  query merchantConsignmentModeQuery {\n    currentMerchant {\n      isConsignmentMode\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProductDownloadsJobForMerchantPromotionsMutation(\n    $input: CreateProductsDownloadJobInput!\n  ) {\n    mfp {\n      createProductsDownloadJob(input: $input) {\n        ok\n        message\n        jobId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductDownloadsJobForMerchantPromotionsMutation(\n    $input: CreateProductsDownloadJobInput!\n  ) {\n    mfp {\n      createProductsDownloadJob(input: $input) {\n        ok\n        message\n        jobId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EligibleCountriesQuery {\n    currentMerchant {\n      shippingSettings {\n        country {\n          code\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query EligibleCountriesQuery {\n    currentMerchant {\n      shippingSettings {\n        country {\n          code\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MfpTools_GetEligibleProductsGeneric(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $offset: Int\n    $limit: Int\n    $eventId: ObjectIdType\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      eligibleProducts: genericEligibleProducts(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        offset: $offset\n        limit: $limit\n        eventId: $eventId\n        currency: $merchantCurrency\n      )\n    }\n  }\n"): (typeof documents)["\n  query MfpTools_GetEligibleProductsGeneric(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $offset: Int\n    $limit: Int\n    $eventId: ObjectIdType\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      eligibleProducts: genericEligibleProducts(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        offset: $offset\n        limit: $limit\n        eventId: $eventId\n        currency: $merchantCurrency\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MfpTools_GetEligibleProducts(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $offset: Int\n    $limit: Int\n    $eventId: ObjectIdType\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      eligibleProducts(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        offset: $offset\n        limit: $limit\n        eventId: $eventId\n      ) {\n        product {\n          id\n          name\n          sales\n          sku\n          flatRateShippingCountryCandidates {\n            country {\n              code\n            }\n            price {\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n          }\n          shipping {\n            defaultShipping {\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            warehouseCountryShipping {\n              countryShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n                country {\n                  code\n                }\n              }\n            }\n          }\n          categories {\n            id\n            name\n          }\n          l1Category {\n            id\n            name\n          }\n        }\n        variations {\n          id\n          inventory {\n            count\n          }\n          color\n          size\n          price {\n            amount\n            currencyCode\n            display\n            convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n              amount\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MfpTools_GetEligibleProducts(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $offset: Int\n    $limit: Int\n    $eventId: ObjectIdType\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      eligibleProducts(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        offset: $offset\n        limit: $limit\n        eventId: $eventId\n      ) {\n        product {\n          id\n          name\n          sales\n          sku\n          flatRateShippingCountryCandidates {\n            country {\n              code\n            }\n            price {\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n          }\n          shipping {\n            defaultShipping {\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            warehouseCountryShipping {\n              countryShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n                country {\n                  code\n                }\n              }\n            }\n          }\n          categories {\n            id\n            name\n          }\n          l1Category {\n            id\n            name\n          }\n        }\n        variations {\n          id\n          inventory {\n            count\n          }\n          color\n          size\n          price {\n            amount\n            currencyCode\n            display\n            convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n              amount\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MfpTools_GetEligibleProductsCount(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $eventId: ObjectIdType\n  ) {\n    mfp {\n      eligibleProductsCount(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        eventId: $eventId\n      )\n    }\n  }\n"): (typeof documents)["\n  query MfpTools_GetEligibleProductsCount(\n    $searchType: MFPProductSearchType\n    $searchQuery: String\n    $promotionType: MFPCampaignPromotionType!\n    $eventId: ObjectIdType\n  ) {\n    mfp {\n      eligibleProductsCount(\n        searchType: $searchType\n        searchQuery: $searchQuery\n        promotionType: $promotionType\n        eventId: $eventId\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetWhitelistProducts_ProductWhitelistingSection(\n    $productIds: [ObjectIdType!]\n    $offset: Int\n    $limit: Int\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      activeWhitelistProducts(\n        productIds: $productIds\n        offset: $offset\n        limit: $limit\n      ) {\n        product {\n          id\n          name\n          sales\n          sku\n          flatRateShippingCountryCandidates {\n            country {\n              code\n            }\n            price {\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n          }\n          shipping {\n            defaultShipping {\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            warehouseCountryShipping {\n              countryShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n                country {\n                  code\n                }\n              }\n            }\n          }\n          categories {\n            id\n            name\n          }\n          l1Category {\n            id\n            name\n          }\n        }\n        variations {\n          id\n          inventory {\n            count\n          }\n          color\n          size\n          price {\n            amount\n            currencyCode\n            display\n            convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n              amount\n            }\n          }\n        }\n        startTime {\n          formatted(fmt: \"YYYY-MM-dd h:mm a z\")\n          unix\n        }\n        endTime {\n          formatted(fmt: \"YYYY-MM-dd h:mm a z\")\n          unix\n        }\n      }\n      activeWhitelistProductsCount(productIds: $productIds)\n    }\n  }\n"): (typeof documents)["\n  query GetWhitelistProducts_ProductWhitelistingSection(\n    $productIds: [ObjectIdType!]\n    $offset: Int\n    $limit: Int\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      activeWhitelistProducts(\n        productIds: $productIds\n        offset: $offset\n        limit: $limit\n      ) {\n        product {\n          id\n          name\n          sales\n          sku\n          flatRateShippingCountryCandidates {\n            country {\n              code\n            }\n            price {\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n          }\n          shipping {\n            defaultShipping {\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            warehouseCountryShipping {\n              countryShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n                country {\n                  code\n                }\n              }\n            }\n          }\n          categories {\n            id\n            name\n          }\n          l1Category {\n            id\n            name\n          }\n        }\n        variations {\n          id\n          inventory {\n            count\n          }\n          color\n          size\n          price {\n            amount\n            currencyCode\n            display\n            convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n              amount\n            }\n          }\n        }\n        startTime {\n          formatted(fmt: \"YYYY-MM-dd h:mm a z\")\n          unix\n        }\n        endTime {\n          formatted(fmt: \"YYYY-MM-dd h:mm a z\")\n          unix\n        }\n      }\n      activeWhitelistProductsCount(productIds: $productIds)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MfpTools_GetPrefillCampaignQuery(\n    $id: String\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      campaigns(\n        searchType: CAMPAIGN_ID\n        searchQuery: $id\n        offset: 0\n        limit: 1\n      ) {\n        name\n        id\n        state\n        startTime {\n          unix\n        }\n        endTime {\n          unix\n        }\n        countries {\n          code\n        }\n        promotionType\n        unqualifiedProductVariations {\n          variation {\n            id\n            productId\n          }\n        }\n        flashSaleDetails {\n          maxQuantity\n          discountPercentage\n          product {\n            id\n            name\n            sales\n            sku\n            categories {\n              id\n              name\n            }\n            flatRateShippingCountryCandidates {\n              country {\n                code\n              }\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            shipping {\n              defaultShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n              }\n              warehouseCountryShipping {\n                countryShipping {\n                  price {\n                    convertedTo(\n                      currency: $merchantCurrency\n                      rate: WISH_LATEST\n                    ) {\n                      amount\n                    }\n                  }\n                  country {\n                    code\n                  }\n                }\n              }\n            }\n            variations {\n              id\n              color\n              size\n              productId\n              price {\n                amount\n                currencyCode\n                display\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n              inventory {\n                count\n              }\n            }\n          }\n          variation {\n            id\n            color\n            size\n            productId\n            price {\n              amount\n              currencyCode\n              display\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n            inventory {\n              count\n            }\n          }\n        }\n        discountDetails {\n          maxQuantity\n          discountPercentage\n          product {\n            id\n            name\n            sales\n            sku\n            flatRateShippingCountryCandidates {\n              country {\n                code\n              }\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            shipping {\n              defaultShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n              }\n              warehouseCountryShipping {\n                countryShipping {\n                  price {\n                    convertedTo(\n                      currency: $merchantCurrency\n                      rate: WISH_LATEST\n                    ) {\n                      amount\n                    }\n                  }\n                  country {\n                    code\n                  }\n                }\n              }\n            }\n            categories {\n              id\n              name\n            }\n            variations {\n              id\n              color\n              size\n              productId\n              price {\n                amount\n                currencyCode\n                display\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n              inventory {\n                count\n              }\n            }\n          }\n          variation {\n            id\n            color\n            size\n            productId\n            price {\n              amount\n              currencyCode\n              display\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n            inventory {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MfpTools_GetPrefillCampaignQuery(\n    $id: String\n    $merchantCurrency: PaymentCurrencyCode!\n  ) {\n    mfp {\n      campaigns(\n        searchType: CAMPAIGN_ID\n        searchQuery: $id\n        offset: 0\n        limit: 1\n      ) {\n        name\n        id\n        state\n        startTime {\n          unix\n        }\n        endTime {\n          unix\n        }\n        countries {\n          code\n        }\n        promotionType\n        unqualifiedProductVariations {\n          variation {\n            id\n            productId\n          }\n        }\n        flashSaleDetails {\n          maxQuantity\n          discountPercentage\n          product {\n            id\n            name\n            sales\n            sku\n            categories {\n              id\n              name\n            }\n            flatRateShippingCountryCandidates {\n              country {\n                code\n              }\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            shipping {\n              defaultShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n              }\n              warehouseCountryShipping {\n                countryShipping {\n                  price {\n                    convertedTo(\n                      currency: $merchantCurrency\n                      rate: WISH_LATEST\n                    ) {\n                      amount\n                    }\n                  }\n                  country {\n                    code\n                  }\n                }\n              }\n            }\n            variations {\n              id\n              color\n              size\n              productId\n              price {\n                amount\n                currencyCode\n                display\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n              inventory {\n                count\n              }\n            }\n          }\n          variation {\n            id\n            color\n            size\n            productId\n            price {\n              amount\n              currencyCode\n              display\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n            inventory {\n              count\n            }\n          }\n        }\n        discountDetails {\n          maxQuantity\n          discountPercentage\n          product {\n            id\n            name\n            sales\n            sku\n            flatRateShippingCountryCandidates {\n              country {\n                code\n              }\n              price {\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n            }\n            shipping {\n              defaultShipping {\n                price {\n                  convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                    amount\n                  }\n                }\n              }\n              warehouseCountryShipping {\n                countryShipping {\n                  price {\n                    convertedTo(\n                      currency: $merchantCurrency\n                      rate: WISH_LATEST\n                    ) {\n                      amount\n                    }\n                  }\n                  country {\n                    code\n                  }\n                }\n              }\n            }\n            categories {\n              id\n              name\n            }\n            variations {\n              id\n              color\n              size\n              productId\n              price {\n                amount\n                currencyCode\n                display\n                convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                  amount\n                }\n              }\n              inventory {\n                count\n              }\n            }\n          }\n          variation {\n            id\n            color\n            size\n            productId\n            price {\n              amount\n              currencyCode\n              display\n              convertedTo(currency: $merchantCurrency, rate: WISH_LATEST) {\n                amount\n              }\n            }\n            inventory {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MfpTools_GetCampaignEvents(\n    $offset: Int\n    $limit: Int\n    $sort: CampaignEventSort\n    $startAtMin: DatetimeInput\n    $submitAtMin: DatetimeInput\n    $promotionTypes: [MFPCampaignPromotionType!]\n  ) {\n    mfp {\n      campaignEvents(\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        startAtMin: $startAtMin\n        submitAtMin: $submitAtMin\n        promotionTypes: $promotionTypes\n      ) {\n        id\n        name\n        description\n        minDiscountPercentage\n        promotionType\n        startTime {\n          formatted(fmt: \"MMM d\")\n          unix\n        }\n        endTime {\n          formatted(fmt: \"MMM d\")\n          unix\n        }\n        submissionDeadline {\n          formatted(fmt: \"MMM d, YYYY\")\n          unix\n        }\n        productCategoryRestrictions {\n          id\n          name\n        }\n        countries {\n          code\n        }\n      }\n      campaignEventsCount(\n        startAtMin: $startAtMin\n        submitAtMin: $submitAtMin\n        promotionTypes: $promotionTypes\n      )\n    }\n  }\n"): (typeof documents)["\n  query MfpTools_GetCampaignEvents(\n    $offset: Int\n    $limit: Int\n    $sort: CampaignEventSort\n    $startAtMin: DatetimeInput\n    $submitAtMin: DatetimeInput\n    $promotionTypes: [MFPCampaignPromotionType!]\n  ) {\n    mfp {\n      campaignEvents(\n        offset: $offset\n        limit: $limit\n        sort: $sort\n        startAtMin: $startAtMin\n        submitAtMin: $submitAtMin\n        promotionTypes: $promotionTypes\n      ) {\n        id\n        name\n        description\n        minDiscountPercentage\n        promotionType\n        startTime {\n          formatted(fmt: \"MMM d\")\n          unix\n        }\n        endTime {\n          formatted(fmt: \"MMM d\")\n          unix\n        }\n        submissionDeadline {\n          formatted(fmt: \"MMM d, YYYY\")\n          unix\n        }\n        productCategoryRestrictions {\n          id\n          name\n        }\n        countries {\n          code\n        }\n      }\n      campaignEventsCount(\n        startAtMin: $startAtMin\n        submitAtMin: $submitAtMin\n        promotionTypes: $promotionTypes\n      )\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SellerIdentity_AcceptMerchantPolicy(\n    $input: AcceptMerchantPolicyInput!\n  ) {\n    currentMerchant {\n      merchantTermsAgreed {\n        acceptMerchantPolicy(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SellerIdentity_AcceptMerchantPolicy(\n    $input: AcceptMerchantPolicyInput!\n  ) {\n    currentMerchant {\n      merchantTermsAgreed {\n        acceptMerchantPolicy(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getMerchantBankVerificationStateReason {\n    currentMerchant {\n      bankAccountVerification {\n        state\n        stateReason\n        dueDate{\n          formatted(fmt:\"%m/%d/%Y\")\n        }\n        bankAccountDocuments{\n          id\n          state\n          comment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMerchantBankVerificationStateReason {\n    currentMerchant {\n      bankAccountVerification {\n        state\n        stateReason\n        dueDate{\n          formatted(fmt:\"%m/%d/%Y\")\n        }\n        bankAccountDocuments{\n          id\n          state\n          comment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getMerchantTaxIdentityVerificationState($verificationType: MerchantIdentityVerificationType) {\n    currentMerchant {\n      id\n      countryOfDomicile {\n        code\n      }\n      merchantIdentityVerification(verificationType: $verificationType) {\n        state\n        latestMerchantIdentityDocument {\n          id\n          state\n          stateReason\n          comment\n        }\n        stateReason\n        dueDate{\n          formatted(fmt:\"%m/%d/%Y\")\n        }\n      }\n    }\n    currentUser{\n      entityType\n    }\n  }\n"): (typeof documents)["\n  query getMerchantTaxIdentityVerificationState($verificationType: MerchantIdentityVerificationType) {\n    currentMerchant {\n      id\n      countryOfDomicile {\n        code\n      }\n      merchantIdentityVerification(verificationType: $verificationType) {\n        state\n        latestMerchantIdentityDocument {\n          id\n          state\n          stateReason\n          comment\n        }\n        stateReason\n        dueDate{\n          formatted(fmt:\"%m/%d/%Y\")\n        }\n      }\n    }\n    currentUser{\n      entityType\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getSellerIdentityRejectReasons($verificationType: MerchantIdentityVerificationType) {\n    merchantIdentity {\n      rejectReasons(verificationType: $verificationType)\n    }\n  }\n"): (typeof documents)["\n  query getSellerIdentityRejectReasons($verificationType: MerchantIdentityVerificationType) {\n    merchantIdentity {\n      rejectReasons(verificationType: $verificationType)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SellerIdentity_UploadBankDocuments(\n    $input: UploadBankAccountDocumentInput!\n  ) {\n    currentMerchant {\n      bankAccountVerification {\n        uploadDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SellerIdentity_UploadBankDocuments(\n    $input: UploadBankAccountDocumentInput!\n  ) {\n    currentMerchant {\n      bankAccountVerification {\n        uploadDocument(input: $input) {\n          ok\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation uploadMerchantIdentityDocument($input:UploadMerchantIdentityDocumentInput!) {\n  currentMerchant {\n      merchantIdentityVerification {\n          uploadDocument(input: $input) {\n              ok\n              message\n          }\n      }\n  }\n}\n"): (typeof documents)["\nmutation uploadMerchantIdentityDocument($input:UploadMerchantIdentityDocumentInput!) {\n  currentMerchant {\n      merchantIdentityVerification {\n          uploadDocument(input: $input) {\n              ok\n              message\n          }\n      }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query AdminCheck {\n        su {\n          id\n        }\n        currentUser {\n          isAdmin\n        }\n      }\n    "): (typeof documents)["\n      query AdminCheck {\n        su {\n          id\n        }\n        currentUser {\n          isAdmin\n        }\n      }\n    "];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;