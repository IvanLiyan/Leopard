
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT IT DIRECTLY.
# DO NOT ATTEMPT TO RESOLVE MERGE CONFLICTS MANUALLY.
# RUN `./finch generate-graphql-types` regenerate it.

  schema {
  query: RootQuery
  mutation: RootMutation
}

type AcceptEUComplianceTermsOfService {
  ok: Boolean!
  message: String
}

type AcceptTermsOfService {
  ok: Boolean!
  message: String
}

input AcceptTermsOfServiceInput {
  tosVersion: Int!
  tosRegion: TermsOfServiceRegionType
}

enum AccountBalanceType {
  CONFIRMED
  PENDING
}

type ActionRequiredOrdersCsvDownload {
  ok: Boolean!
  errorMessage: String
}

input ActionRequiredOrdersCsvDownloadInput {
  query: String
  searchType: ActionRequiredSearchType
  offset: Int = 0
  sort: ActionRequiredSort
  filter: CSVExportFilterType
  startDate: DatetimeInput
  endDate: DatetimeInput
  wishExpressOnly: Boolean = false
}

enum ActionRequiredSearchType {
  ORDER_ID
  PRODUCT_ID
  TRACKING_NUMBER
  USER_NAME
  TRANSACTION_ID
}

input ActionRequiredSort {
  field: ActionRequiredSortFieldType!
  order: SortOrderType!
}

enum ActionRequiredSortFieldType {
  ORDER_TIME
  RELEASED_TIME
}

type AdaptivePolicyAdminMutations {
  manualEnrollUpload(input: AdaptivePolicyManualEnrollUploadInput!): AdaptivePolicyManualEnrollUpload
  manualEnroll(input: AdaptivePolicyManualEnrollConfirmInput!): AdaptivePolicyManualEnroll
}

type AdaptivePolicyManualEnroll {
  ok: Boolean!
  logs: String
}

input AdaptivePolicyManualEnrollConfirmInput {
  fileUrl: String!
  allPrivileges: Boolean!
  resetRevenueShare: Boolean!
}

type AdaptivePolicyManualEnrollSchema {
  merchantId: ObjectIdType!
  policyTier: String!
  reason: String!
}

type AdaptivePolicyManualEnrollUpload {
  ok: Boolean!
  logs: String
  updateList: [AdaptivePolicyManualEnrollSchema!]!
}

input AdaptivePolicyManualEnrollUploadInput {
  fileUrl: String!
}

input AddProductPostInput {
  merchantId: ObjectIdType!
  productId: ObjectIdType!
  sourceBucket: String!
  sourceBucketKey: String!
}

type AddProductPostMutation {
  ok: Boolean!
  message: String
  errorCode: ProductPostErrorCode
}

type AddTrademark {
  ok: Boolean!
  message: String
}

input AddTrademarkInput {
  brandInfoId: ObjectIdType!
  trademarkInfo: BrandPartnerTrademarkInfoInputObject!
}

input AddressInput {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  streetAddress3: String
  city: String!
  county: String
  state: String!
  neighborhood: String
  region: String
  countryCode: CountryCode
  zipcode: String
  phoneNumber: String
}

type AddressSchema {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  city: String!
  zipcode: String
  countryCode: CountryCode!
  state: String
  county: String
  country: Country!
  phoneNumber: String
}

type AddressUpdateError {
  orderId: ObjectIdType!
  message: String!
}

enum AddressVerificationState {
  SYSTEM_VERIFIED
  NOT_VERIFIED
  REQUEST_VERIFICATION
  USER_VERIFIED
  WPS_VERIFIED
}

type AlertSchema {
  link: String
  description: String!
  date: Datetime
  sentiment: AlertSentiment
}

enum AlertSentiment {
  INFO
  WARNING
  NEGATIVE
}

type AnalyticsServiceMutations {
  log(input: LogToTreasureDataInput!): LogToTreasureData
}

type AnnouncementAdmin {
  announcements(offset: Int = 0, limit: Int = 20, announcementType: AnnouncementType): AnnouncementListSchema
  announcement(id: String!): AnnouncementSchema
  options: AnnouncementOptionsSchema
  announcementJobs(offset: Int = 0, limit: Int = 20): [AnnouncementJobSchema!]
  announcementJob(id: String!): AnnouncementJobSchema
  announcementJobCount: Int!
}

type AnnouncementAudienceGroup {
  title: String!
  value: AnnouncementAudienceSource!
}

enum AnnouncementAudienceSource {
  ALL_MERCHANTS
  TRANSCOSMOS_LEAD
  CN_MERCHANTS
}

enum AnnouncementAudienceSourceType {
  ENUM
  CSV
}

enum AnnouncementCategory {
  LOGISTICS
  INTELLECTUAL_PROPERTY
  POLICIES_AND_TERMS
  TAX
  SHIPPING_CARRIERS
  ACCOUNT_SETTINGS
  LOGISTICS_PRICING
  API
  PRODUCTS
  PAYMENTS
  LOCAL_CURRENCY
  ORDERS
  INSIGHTS
}

type AnnouncementCategorySchema {
  type: AnnouncementCategory!
  text: String!
}

type AnnouncementContentSchema {
  locale: AnnouncementLocale!
  title: String!
  message: String!
  link: String
  ctaText: String
  ctaDueDate: Datetime
}

enum AnnouncementContentType {
  STATIC_TEXT
  DYNAMIC_TEXT
}

type AnnouncementJobSchema {
  id: ObjectIdType!
  createdTime: Datetime!
  jobType: AnnouncementJobType!
  csvS3Url: String!
  s3Filename: String!
  sender: UserSchema!
  state: AnnouncementJobState!
  titleEn: String!
  messageTemplateEn: String!
  messageTemplateCn: String
  midCount: Int!
  baseAnnouncementTotal: Int
  baseAnnouncementCount: Int!
  annUrlsCsvFileUrl: String
}

enum AnnouncementJobState {
  COMPLETE
  CREATING_ANNOUNCEMENTS
  PARSING_CSV
  RETRIEVING_MERCHANTS
  NEW
  DOWNLOADING_CSV
}

enum AnnouncementJobType {
  STATIC_TEXT
  DYNAMIC_TEXT
}

type AnnouncementListSchema {
  announcements: [AnnouncementSchema!]
  count: Int
}

enum AnnouncementLocale {
  BE
  FR
  BG
  HR
  DE
  HU
  CS
  HI
  BS
  HC
  JA
  RU
  AZ
  NL
  PT
  TW
  NB
  TR
  TL
  LV
  LT
  TH
  RO
  FI
  PL
  EL
  EN
  ZH
  UK
  VI
  IT
  IW
  AR
  EU
  ET
  DA
  ID
  ES
  UP
  ME
  KK
  SR
  SQ
  KO
  SV
  KM
  SK
  MS
  SL
}

type AnnouncementOptionsSchema {
  types: [AnnouncementType!]
  audienceGroups: [AnnouncementAudienceGroup!]
}

enum AnnouncementProgram {
  ADVANCED_LOGISTICS_PROGRAM
  WISHPOST
  MERCHANT_STANDING
  WISH_EXPRESS
  FBW_FBS
  PARTIAL_REFUNDS
  PRODUCTBOOST
  RETURNS_PROGRAM
  EPC
}

type AnnouncementProgramSchema {
  type: AnnouncementProgram!
  text: String!
}

type AnnouncementSchema {
  id: ObjectIdType!
  type: AnnouncementType!
  publishedDate: Datetime
  expiryDate: Datetime
  audienceSourceType: AnnouncementAudienceSourceType!
  audienceGroups: [AnnouncementAudienceSource!]
  merchantIds: [ObjectIdType!]
  contentType: AnnouncementContentType
  content: [AnnouncementContentSchema!]!
  sender: UserSchema!
  state: AnnouncementState!
  userAnnouncementCount: Int!
  overrideEmailPreference: Boolean!
  sourceS3FileName: String
  sourceS3FileUrl: String
  categories: [AnnouncementCategory!]!
  program: AnnouncementProgram!
  targetLocales: [AnnouncementLocale!]!
}

enum AnnouncementState {
  NEW
  UPDATE
  COMPLETE
  UPDATING
  CREATING
}

enum AnnouncementType {
  SYSTEM_UPDATE
  BD_ANNOUNCEMENT
}

type AnnouncementsService {
  admin: AnnouncementAdmin
  forUsers(announcementType: AnnouncementType! = 1, limit: Int = 10, offset: Int = 0): [MerchantAnnouncementSchema!]
}

type ApproveTrademarks {
  ok: Boolean!
  message: String
}

input ApproveTrademarksInput {
  brandInfoId: ObjectIdType!
  trademarkIds: [ObjectIdType!]!
  newBrandId: ObjectIdType
}

type Area {
  value(targetUnit: AreaUnit): Float!
  unit: AreaUnit!
}

input AreaInput {
  value: Float!
  unit: AreaUnit!
}

enum AreaUnit {
  SQUARE_METER
  SQUARE_FOOT
}

type AuthenticationMutations {
  storeSignup(input: StoreSignupInput!): StoreSignupMutation
  merchantSignup(input: MerchantSignupInput!): MerchantSignupMutation
  merchantSignupSendPhoneVerification(input: MerchantSignupSendPhoneVerificationInput!): MerchantSignupSendPhoneVerificationMutation
  login(input: LoginMutationInput!): LoginMutation
  logout: LogoutMutation
  notifyPasswordRecovery(input: NotifyPasswordRecoveryMutationInput!): NotifyPasswordRecoveryMutation
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutation
  loginAs: LoginAsMutations
}

type AuthenticationServiceSchema {
  showCaptchaOnSignup: Boolean!
  passwordEvaluation(password: String!): PasswordEvaluation!
  shopifyOnboardingAuthInfo: ShopifyOnboardingAuthInfo!
  merchantInviteInfo(invite: String): MerchantInviteInfo
  salesforceLeadInfo(salesforceLeadId: String): SalesforceLeadInfo
  bdSignupCodeInfo(bdSignupCode: String): BdSignupCodeInfo
  storeCategories: [String!]!
  countriesWeShipTo: [Country!]!
}

enum BDMerchantCountryCodeType {
  CN
  KR
  SG
  JP
  US
  HK
  VN
  BR
  TW
  EU
  MY
  MX
}

type BalanceTransactionRecord {
  id: ObjectIdType!
  balanceBeforeUpdate: CurrencyValue!
  balanceAfterUpdate: CurrencyValue!
  dateCreated: Datetime!
  transactionAmount: CurrencyValue!
  campaignId: ObjectIdType
  productId: ObjectIdType
  updatedReason: BalanceUpdateReason!
  updateReasonDescription: String!
  receiptId: ObjectIdType
}

enum BalanceUpdateReason {
  REFUND
  PAYMENT_BY_CREDITS
  ISSUING_CREDITS
}

type BdSignupCodeInfo {
  valid: Boolean!
  bdName: String
  useMarketingTransactionBonus: Boolean
}

scalar BigInt

enum BlurredInformationCategory {
  BLURRED_WATERMARKS
  BLURRED_OR_CENSORED_TAGS
  BLURRED_OR_CENSORED_LOGOS
}

type BonusBudgetSchema {
  isBonusBudgetCampaign: Boolean!
  bonusBudgetRate: Float!
  bonusBudget: CurrencyValue!
  usedBonusBudget: CurrencyValue!
  bonusBudgetType: MarketingBonusBudgetType!
  eligibleBonusBudgetType: MarketingBonusBudgetType!
}

enum BrandCategoryCode {
  FASHION
  BEAUTY
  KID_TOYS_OR_GAME
  MEDIA
  SPORTS
  SHOE
  MOTOR
  COPYRIGHTED_IMAGES
  BRANDED_ACCESSORIES
  ELECTRONIC
  LUXURY_WELL_KNOWN
}

type BrandEnrollmentMutations {
  createBrandEnrollmentRequest(input: CreateBrandEnrollmentInput): CreateBrandEnrollmentRequest
  addTrademark(input: AddTrademarkInput): AddTrademark
  deleteBrandEnrollment(input: DeleteBrandEnrollmentInput): DeleteBrandEnrollment
}

type BrandManagement {
  brands(brandIds: [ObjectIdType!], brandName: String, offset: Int = 0, count: Int = 50, hideDeleted: Boolean = true, brandTypes: [BrandTypeCode!]): [BrandSchema!]!
  numBrands(brandIds: [ObjectIdType!], brandName: String, hideDeleted: Boolean = true, brandTypes: [BrandTypeCode!]): Int!
  canManageBrands: Boolean!
  canManageBrandToProduct: Boolean!
}

type BrandPartnerAdmin {
  brandPartners(count: Int = 10, offset: Int = 0, brandName: String, email: String, brandPartnerId: String, trademarkStates: [BrandPartnerTrademarkState!], brandPartnerStates: [BrandPartnerState!]): [BrandPartnerInfoSchema!]!
  numBrandPartners(brandName: String, email: String, brandPartnerId: String, trademarkStates: [BrandPartnerTrademarkState!], brandPartnerStates: [BrandPartnerState!]): Int!
  brandEnrollments(count: Int = 10, offset: Int = 0, brandName: String, email: String, brandPartnerId: String, brandInfoId: String, trademarkStates: [BrandPartnerTrademarkState!]): [BrandPartnerBrandInfoSchema!]!
  numBrandEnrollments(brandName: String, email: String, brandPartnerId: String, brandInfoId: String, trademarkStates: [BrandPartnerTrademarkState!]): Int!
}

type BrandPartnerAdminMutations {
  disableBrandPartner(input: DisableBrandPartnerInput!): DisableBrandPartner
  approveTrademarks(input: ApproveTrademarksInput!): ApproveTrademarks
  rejectTrademarksAndBrandInfo(input: RejectTrademarksAndBrandInfoInput!): RejectTrademarksAndBrandInfo
  editTrademarksAndBrandInfo(input: EditTrademarksAndBrandInfoInput!): EditTrademarksAndBrandInfo
}

type BrandPartnerAuthenticationMutations {
  sendPasswordResetEmail(input: BrandPartnerSendPasswordResetEmailInput!): BrandPartnerSendPasswordResetEmail
  resetPassword(input: BrandPartnerResetPasswordInput!): BrandPartnerResetPassword
}

type BrandPartnerBrandInfoSchema {
  id: ObjectIdType!
  brandPartnerId: ObjectIdType!
  isNewBrand: Boolean!
  confirmedBrandId: ObjectIdType
  confirmedBrand: BrandSchema
  state: BrandPartnerBrandState!
  brandOwnerName: String!
  email: String!
  phoneNumber: String!
  brandRepName: String!
  brandRepTitle: String!
  proposedBrandId: ObjectIdType
  providedBrandName: String!
  providedBrandWebsite: String
  providedBrandLogo: MerchantFileSchema
  providedBrandAdditionalInfo: String
  authorizationProofs: [MerchantFileSchema!]!
  rejectionReason: String
  enrollmentDate: Datetime!
  trademarks(offset: Int = 0, count: Int = 5, states: [BrandPartnerTrademarkState!]): [BrandPartnerTrademarkInfoSchema!]!
  numTrademarks(states: [BrandPartnerTrademarkState!]): Int!
}

enum BrandPartnerBrandState {
  REJECTED
  APPROVED
  PENDING
}

type BrandPartnerChangeUserInfo {
  ok: Boolean!
  message: String
}

input BrandPartnerChangeUserInfoInput {
  brandPartnerId: ObjectIdType
  firstName: String
  lastName: String
  professionalTitle: String
  companyName: String
  streetAddress1: String
  streetAddress2: String
  city: String
  state: String
  countryCode: String
  zipcode: String
  phoneNumber: String
  currentPassword: String
  newPassword: String
  email: String
  internalNote: String
}

type BrandPartnerCountryAndRegion {
  code: BrandPartnerCountryAndRegionCode!
  name: String!
}

enum BrandPartnerCountryAndRegionCode {
  BD
  BE
  BG
  BA
  BB
  BM
  BO
  JP
  BT
  JM
  JO
  BR
  BS
  JE
  BZ
  RU
  RS
  RE
  RO
  GT
  GR
  BH
  GY
  GE
  GD
  GB
  GA
  GI
  GH
  OM
  IL
  BW
  HR
  HU
  HN
  VE
  PR
  PT
  PY
  PA
  PE
  PK
  PH
  PL
  ZM
  EE
  EG
  ZA
  EC
  IT
  EU
  SA
  ES
  ME
  MD
  UY
  MC
  UZ
  MM
  MN
  US
  MU
  MT
  MV
  MS
  UA
  MX
  AT
  FR
  MA
  FI
  FJ
  NI
  NL
  NO
  NA
  NG
  NZ
  NP
  NU
  CH
  CO
  CN
  CL
  CA
  CZ
  CY
  CR
  SZ
  KG
  KE
  SR
  KH
  SV
  SK
  KR
  SI
  SH
  KW
  SM
  SC
  KZ
  KY
  SG
  SE
  DO
  DM
  DK
  DE
  DZ
  MK
  LC
  TW
  TT
  TR
  LK
  LI
  TN
  TO
  LT
  LU
  TH
  AE
  AD
  AG
  VG
  AI
  VI
  IS
  AM
  AL
  VN
  AR
  AU
  LV
  AW
  IN
  AZ
  IE
  ID
  MY
  QA
}

type BrandPartnerInfoSchema {
  id: ObjectIdType!
  isBrandPartnerV2: Boolean!
  brandPartnerName: String!
  firstName: String
  lastName: String
  lastUpdated: Datetime!
  internalNote: String
  professionalTitle: String
  companyName: String
  email: String!
  phoneNumber: String
  businessAddress: AddressSchema
  state: BrandPartnerState!
  brandInfos(brandNameQuery: String, brandInfoIdQuery: String, offset: Int = 0, count: Int = 10, states: [BrandPartnerBrandState!]): [BrandPartnerBrandInfoSchema!]!
  numBrandInfos(brandNameQuery: String, states: [BrandPartnerBrandState!]): Int!
  onboarding: BrandPartnerOnboardingSchema!
  takedownRequests(offset: Int = 0, count: Int = 10, reportIdQuery: String, brandNameQuery: String, states: [TakedownRequestState!]): [TakedownRequestSchema!]!
  numTakedownRequests(reportIdQuery: String, brandNameQuery: String, states: [TakedownRequestState!]): Int!
}

type BrandPartnerMutations {
  takedownRequest: TakedownRequestMutations
  brandEnrollmentMutations: BrandEnrollmentMutations
  user: BrandPartnerUserMutations
  authentication: BrandPartnerAuthenticationMutations
  admin: BrandPartnerAdminMutations
}

type BrandPartnerOnboardingSchema {
  steps(completed: Boolean): [BrandPartnerOnboardingStep!]!
  numStepsLeft: Int!
  numStepsCompleted: Int!
  numSteps: Int!
}

type BrandPartnerOnboardingStep {
  name: BrandPartnerOnboardingSteps!
  title: String!
  description: String!
  ctaText: String!
  ctaLink: String!
  illustration: String
  completed: Boolean!
}

enum BrandPartnerOnboardingSteps {
  CONFIRM_EMAIL
  ENROLL_BRAND
}

type BrandPartnerResetPassword {
  ok: Boolean!
  message: String
  email: String
}

input BrandPartnerResetPasswordInput {
  password: String!
  token: String!
  tfaToken: String
}

type BrandPartnerSendPasswordResetEmail {
  ok: Boolean!
  message: String
}

input BrandPartnerSendPasswordResetEmailInput {
  email: String!
}

enum BrandPartnerState {
  PENDING_PHONE
  REJECTED
  PENDING_EMAIL
  PENDING_REVIEW
  ACTIVE
  PENDING
}

input BrandPartnerTrademarkInfoInputObject {
  trademarkName: String!
  location: BrandPartnerCountryAndRegionCode!
  trademarkType: BrandPartnerTrademarkType!
  registrationNumber: String!
  registrationUrl: String
  registrationDocs: [FileInput!]!
}

type BrandPartnerTrademarkInfoSchema {
  id: ObjectIdType!
  brandPartnerId: ObjectIdType!
  brandInfoId: ObjectIdType!
  brandId: ObjectIdType
  state: BrandPartnerTrademarkState!
  location: BrandPartnerCountryAndRegion!
  trademarkName: String!
  trademarkType: BrandPartnerTrademarkType!
  registrationNumber: String!
  registrationUrl: String
  registrationDocs: [MerchantFileSchema!]!
  rejectionReason: String
  enrollmentDate: Datetime!
}

enum BrandPartnerTrademarkState {
  REJECTED
  APPROVED
  PENDING
}

enum BrandPartnerTrademarkType {
  OTHER
  WORDMARK
  DESIGNMARK
}

type BrandPartnerUserMutations {
  changeUserInfo(input: BrandPartnerChangeUserInfoInput!): BrandPartnerChangeUserInfo
}

enum BrandReach {
  INTERNATIONAL
  REGIONAL
  LOCAL
  ONLINE
}

type BrandSchema {
  id: ObjectIdType!
  name: String!
  displayName: String!
  brandTypes: [BrandType!]
  isTrueBrand: Boolean!
  logoUrl: String
  logoAspectRatio: Float!
  brandUrl: String
  isAdult: Boolean!
  isActive: Boolean!
  ipViolationCategory: IPViolationBrandCategory
  severity: BrandSeverity
  keywords: [String!]
  autoApproveMerchantIds: [ObjectIdType!]
  numTaggedProducts: Int
  brandProductTags: [TrueTagSchema!]
  minimumPrice: CurrencyValue
  brandReach: BrandReach
  counterfeitRiskLevel: CounterfeitRiskLevel
  brandOwnerEntityCountry: Country
  manufacturingCountry: Country
  internalNote: String
}

type BrandServiceSchema {
  brandManagement: BrandManagement
  trueBrands(brandIds: [ObjectIdType!], brandName: String, queryString: String, offset: Int = 0, count: Int = 50, sort: BrandSort): [BrandSchema!]!
  acceptedTrademarkCountries(usePriorityOrdering: Boolean = false): [TrademarkCountryCode!]!
  brandPartnerTrademarkLocations: [BrandPartnerCountryAndRegion!]!
  brandPartnerAdmin: BrandPartnerAdmin
}

enum BrandSeverity {
  HIGH
  MEDIUM
  LOW
}

input BrandSort {
  field: BrandSortField!
  order: SortOrderType!
}

enum BrandSortField {
  ID
  NAME
}

type BrandType {
  brandType: BrandTypeCode!
  displayName: String!
}

enum BrandTypeCode {
  DEFAULT
  TRUE_BRAND
  TRO
  COPYRIGHT_IMAGE
  BRAND_OF_INTEREST
}

type BrandedMerchantLifeTimeStatsObjectSchema {
  gmv: CurrencyValue!
  cost: CurrencyValue!
  orders: Int!
  feedImpressions: Int!
  quantitiesSold: Int!
}

type BrandingSchema {
  brands(brandIds: [String!]): [MerchantBrandSchema!]!
  latestDateWithBrandData: Datetime
}

enum BuyerFraudReasonCategory {
  MERCHANT_REPORTED_SUSPICIOUS_SHIPPING_LOCATION
  MERCHANT_REPORTED_POLICY_ABUSE
  MERCHANT_REPORTED_OTHER
  MERCHANT_REPORTED_SUSPICIOUS_QUANTITY_OR_PAYMENT
}

input ByUserIdInput {
  id: ObjectIdType!
}

type ByUserIdMutation {
  ok: Boolean!
  error: String
  sessionKey: String
}

type CATaxConstants {
  marketplaceProvinces: [String!]!
  pstQstProvinces: [String!]!
}

enum CSVExportFilterType {
  UNCONFIRMED_TRACKING
  SHIPPED
  NO_TRACKING
  REFUNDED
  REFUNDED_BY_WISH
  FBW
  FBS
}

type CSVProductImportJobSchema {
  id: ObjectIdType!
  startTime: Datetime!
  status: MerchantFeedJobStatus!
  totalRows: Int!
  processedCount: Int!
  errorCount: Int!
  addedCount: Int!
  updatedCount: Int!
  csvUrl: String
  fileName: String
}

type CampaignProductSchema {
  productId: ObjectIdType!
  product: ProductSchema
  keywords: [String!]!
  isMaxboost: Boolean!
  brandId: ObjectIdType
}

type CampaignSchema {
  id: ObjectIdType!
  name: String!
  merchant: MerchantSchema!
  state: MarketingCampaignState!
  products: [CampaignProductSchema!]!
  startDate: Datetime!
  endDate: Datetime!
  isEvergreen: Boolean!
  intenseBoost: Boolean!
  maxBudget: CurrencyValue!
  scheduledAddBudget: ScheduledAddBudgetSchema!
  merchantBudget: CurrencyValue!
  merchantId: ObjectIdType!
  localizedCurrency: PaymentCurrencyCode!
  flexibleBudget: FlexibleBudgetSchema!
  bonusBudget: BonusBudgetSchema!
}

input CancelChargeTransactionInput {
  chargeId: String!
}

type CancelChargeTransactionMutation {
  ok: Boolean!
  message: String
}

input CancelWPSTrackingIDInput {
  orderId: ObjectIdType!
}

type CancelWPSTrackingIDMutation {
  ok: Boolean!
  wpsShipmentId: String
  errorMessage: String
}

type CartPriceDetailSchema {
  productPrice(includeTax: Boolean = true): CurrencyValue
  shippingPrice(includeTax: Boolean = true): CurrencyValue
  total: CurrencyValue
}

input ChangeDisplayNameInput {
  displayName: String!
}

type ChangeDisplayNameMutation {
  error: String
  displayName: String
}

input ChangeEmailInput {
  email: String!
  password: String!
}

type ChangeEmailMutation {
  error: String
  passwordOk: Boolean
  email: String
}

input ChangeLocaleInput {
  locale: Locale!
}

type ChangeLocaleMutation {
  error: String
  locale: Locale
}

input ChangePasswordInput {
  curPassword: String
  newPassword: String
}

type ChangePasswordMutation {
  error: String
  passwordOk: Boolean
}

type ChangePhoneNumberMutation {
  sendCode(input: ChangePhoneNumberSendCodeInput!): ChangePhoneNumberSendCodeMutation!
  verifyCode(input: ChangePhoneNumberVerifyCodeInput!): ChangePhoneNumberVerifyCodeMutation!
}

input ChangePhoneNumberSendCodeInput {
  newPhoneNumber: String!
}

type ChangePhoneNumberSendCodeMutation {
  error: String
  sentOk: Boolean!
}

input ChangePhoneNumberVerifyCodeInput {
  newPhoneNumber: String!
  verificationCode: String!
}

type ChangePhoneNumberVerifyCodeMutation {
  error: String
  verifiedOk: Boolean!
}

input ChangePreferredUnitsInput {
  preferredWeightUnit: WeightUnit!
  preferredLengthUnit: LengthUnit!
}

type ChangePreferredUnitsMutation {
  error: String
  ok: Boolean
}

type ChangeShippingProviderStatus {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

input ChangeShippingProviderStatusInput {
  providerId: Int!
}

input ChangeVacationModeInput {
  setToOn: Boolean
  destState: CommerceMerchantState
  vacationStartDate: DatetimeInput
  vacationEndDate: DatetimeInput
}

type ChangeVacationModeMutation {
  error: String
  onVacationMode: Boolean
  ok: Boolean
}

input ChargeInput {
  chargeId: String!
  chargeProvider: ChargePaymentProviderType
  clientToken: String
  paypalPayerId: String
  paypalPayerEmail: String
  paypalDeviceData: String
}

type ChargeItem {
  type: ChargeItemType!
}

enum ChargeItemType {
  STORE_REGISTRATION_FEE
  PRODUCT_BOOST_CAMPAIGN
}

type ChargeMutation {
  ok: Boolean!
  message: String
}

enum ChargePaymentProviderType {
  NONE
  PAYONEER
  PAYPAL
  UMPAY
}

type ChargeTransactionInfo {
  chargeProvider: ChargePaymentProviderType
  chargeItem: ChargeItem
  currency: PaymentCurrencyCode
  totalAmountInUsd: CurrencyValue
  totalAmount: CurrencyValue
  state: ChargeTransactionState!
  chargeCreatedTime: Datetime!
  chargeReceivedTime: Datetime
  canChangeChargeProvider: Boolean!
  type: ChargeTransactionType!
  clientToken: String
  signupUrl: String
}

enum ChargeTransactionState {
  EXCEPTION
  SUCCEEDED
  REFUNDED
  VOIDED
  FAILED
  NEW
  REQUIRE_REVIEW
  PENDING
}

enum ChargeTransactionType {
  INVOICING
  BUYING
}

enum CheckpointAfterActionState {
  DELETE_FOR_REUSE_API_SUCCESS
  EXCEPTION
  IN_TRANSIT
  ATTEMPT_FAIL
  REACTIVATE_FAIL
  DELETE_SUCCESS
  PENDING
  DELETE_FAIL
  TRACK_END
  DELETE_FOR_REUSE_API_FAIL
  EXPIRED
  MARKED_SHIPPED
  DELIVERED
  TRACKING_CHANGED
  CANCELLED
  ARRIVE_AT_DEST_COUNTRY
  ORDER_PLACED
  SEND_TRACKING_FAIL
  DELETE_FOR_REUSE_DATA
  ALERT
  OUT_FOR_DELIVERY
  INFO_RECEIVED
  REACTIVATE_SUCCESS
  SEND_TRACKING_SUCCESS
}

type ClearAllUIState {
  ok: Boolean!
  message: String
}

type ClearUIState {
  ok: Boolean!
  message: String
}

enum ClientWritableBucket {
  BRAND_LOGO
  RACC_SOURCE_ASSETS
  TEMP_UPLOADS
  REGULATOR_REPORT_FILE_UPLOADS
  TEMP_UPLOADS_V2
  PUBLIC_APP_LOGO
  TAX_SETTING_FILE_UPLOADS
}

enum ColumnCategoryId {
  LOGISTICS
  COUNTRY_SHIPPING
  PRODUCT_DETAILS
  TTD
}

type ColumnCategorySchema {
  id: ColumnCategoryId!
  name: String!
}

enum CommerceMerchantEUEntityStatus {
  NOT_STARTED
  VALIDATED
  REJECTED
  PENDING_REVIEW
  NOT_ESTABLISHED
}

enum CommerceMerchantReviewStatus {
  FAILED
  NOT_APPLICABLE
  PENDING_ADMIN_REVIEW
  APPROVED
  PENDING_AUTO_REVIEW
}

enum CommerceMerchantState {
  WISH_EXPRESS_ONLY
  PENDING_PHONE
  REQUEST_INFO
  VACATION
  DISABLED
  PENDING_EMAIL
  APPROVED
  PENDING
}

enum CommerceMerchantTaxInfoGermanyNoNumberReason {
  WILL_REGISTER_SOON
  BUYER_IS_IMPORTER_OF_RECORD
}

enum CommerceMerchantTaxInfoStatus {
  OLD_ACTIVE_NEW_PENDING_REVIEW
  INACTIVE
  PENDING_ONESOURCE_SETUP
  ACTIVE
  PENDING_REVIEW
  FAILED_REVIEW
}

enum CommerceProductCondition {
  NEW
  USED
  REFURBISHED
}

enum CommerceProductReviewStatus {
  REJECTED
  APPROVED
  PENDING
}

enum CommerceProductStatus {
  DISABLED
  REMOVED_BY_MERCHANT
  ENABLED
}

enum CommerceTransactionClient {
  ANDROID_INSTANT_APP
  WEB
  WINDOWS_APP
  IOS_APP
  ANDROID_APP
  WINDOWS_PHONE_APP
  IPAD_APP
  MOBILE_WEB
}

enum CommerceTransactionState {
  REQUIRE_REVIEW
  EXCEPTION
  C2C_ACCEPTED
  LABEL_GENERATED
  LABEL_DOWNLOADED
  REFUNDED
  DELAYING
  ACKNOWLEDGED
  GIFT_WAITING_FOR_ACCEPT
  C2C_DELIVERED
  SHIPPED
  C2C_ON_DELIVERY
  PENDING
  APPROVED
  DECLINED
}

enum CommerceTransactionTaxEventType {
  REFUND_SHIPPING
  SALE_SHIPPING
  REFUND_PRICE
  SALE_PRICE
}

enum CommerceTransactionTaxRemitType {
  MERCHANT_REMIT
  WISH_REMIT
  NO_REMIT
  TBD_REMIT
}

type ConfirmedDeliveryCarriers {
  availableCountries: [Country!]!
  shippingProviders: [ShippingProviderSchema!]!
  availableShippingCountries: [CountryAvailableShippingProviders!]!
  swedenConfirmedDeliveredCarrierTypes: [SwedenConfirmedDeliveredCarrierTypes!]!
}

enum ConversionRate {
  MKL_POLICY
  WISH_LATEST
}

type ConvertToPlus {
  ok: Boolean
}

type Count {
  value(targetUnit: CountUnit): Float!
  unit: CountUnit!
}

input CountInput {
  value: Float!
  unit: CountUnit!
}

enum CountUnit {
  COUNT
  LOAD
  POD
  ROLL
  WASH
}

enum CounterfeitReasonCode {
  UNLICENSED_MEDIA
  SAFETY_EQUIPMENT
  LIGHTERS
  PROP_MONEY
  ILLEGAL_ELECTRONICS
  ANIMAL_PRODUCTS
  BLURRED_WATERMARK
  HARMFUL_CHEMICALS
  CN_PROHIBITED_PRODUCTS
  FALSE_ADVERTISING
  RECALLED_TOYS
  CARSEAT
  PLANTS_AND_SEEDS
  UNVERIFIED_MONEY
  WEAPON
  TEAM_LOGO
  PICTURED_WITH_MAJOR_BRAND
  PIERCING_GUN
  ADULT_CONTENT
  PRICE_GOUGING
  SMOKING
  MISLEADING_LISTING
  REGIONAL_RESTRICTIONS
  PRODUCT_MODIFIED
  CENSORED_FACE
  NUDITY
  HATE_CRIME
  BLURRED_LABEL
  MEDICAL_MATERIALS
  AMBIGUOUS_LISTING
  HOVERBOARD
  CELEBRITY_PHOTO
  TRICK_CANDLES
  BLURRED_INFORMATION
  CONSUMPTION_MATERIALS
  HAZARDOUS_MATERIALS
  IS_MAJOR_BRAND
  WISH_ADMIN
  DANGEROUS_ITEMS
  HARNESS
  TATTOO_GUN
  MISLEADING_LISTING_AUTHENTIC_BRAND
  CONTACT_LENSES
  VIRTUAL_GOODS
  BIKE_HELMETS
  PLANT_SEEDS
}

enum CounterfeitRiskLevel {
  HIGH
  MEDIUM
  LOW
}

type CounterfeitTaggingManagement {
  localToLocalAllowedSubcategories: [TaggingViolationSubcategory!]
}

type Country {
  code: CountryCode!
  name(localized: Boolean = true): String!
  gmvRank: Int
  regions: [Region!]
  wishExpress: WishExpressCountryDetails!
  restrictedProductRegion: RestrictedProductRegion
  isInEurope: Boolean!
}

input CountryActionInput {
  countryCode: ShippableCountryCode!
  action: CountryActionType!
  data: String
}

enum CountryActionType {
  ADD
  DELETE
  UPDATE
}

type CountryAvailableShippingProviders {
  country: Country!
  providers: [ShippingProviderSchema!]!
}

enum CountryCode {
  BD
  WF
  BF
  BG
  BA
  BB
  BE
  BM
  BN
  BO
  JP
  BI
  BJ
  BT
  JM
  BV
  JO
  WS
  BR
  BS
  JE
  BY
  BZ
  RU
  RW
  RS
  RE
  TM
  TJ
  RO
  TK
  GW
  GU
  GT
  GS
  GR
  GQ
  GP
  BH
  GY
  GF
  GE
  GD
  GB
  GA
  GN
  GM
  GL
  KW
  GI
  GH
  OM
  TN
  BW
  HR
  HT
  HU
  HK
  HN
  HM
  KR
  AD
  PR
  PW
  PT
  KN
  PY
  AI
  PA
  PF
  PG
  PE
  PK
  PH
  PN
  PL
  PM
  ZM
  EH
  EE
  EG
  ZA
  EC
  AL
  AO
  KZ
  ET
  ZW
  KY
  ZR
  ER
  ME
  MD
  MG
  MA
  MC
  UZ
  MM
  ML
  MO
  MN
  MH
  MK
  MU
  MT
  MW
  MV
  MQ
  MP
  MS
  MR
  UG
  MY
  MX
  MZ
  FR
  AW
  FX
  AF
  FI
  FJ
  FK
  FM
  FO
  NI
  NL
  NO
  NA
  VU
  NC
  NE
  NF
  NG
  NZ
  ES
  NP
  NR
  NU
  CK
  CI
  CH
  CO
  CN
  CM
  CL
  CC
  CA
  CG
  CF
  CZ
  CY
  CX
  CR
  CV
  SZ
  KG
  KE
  SR
  KI
  KH
  SV
  KM
  ST
  SK
  SJ
  SI
  SH
  SO
  SN
  SM
  SL
  SC
  SB
  SA
  SG
  SE
  SD
  DO
  DM
  DJ
  DK
  DE
  YE
  AT
  DZ
  US
  UY
  YT
  UM
  LB
  LC
  LA
  TV
  TW
  TT
  TR
  LK
  TP
  LI
  LV
  TO
  LT
  LU
  LR
  LS
  TH
  TF
  TG
  TD
  TC
  LY
  VA
  VC
  AE
  VE
  AG
  VG
  IQ
  VI
  IS
  AM
  IT
  VN
  AN
  AQ
  AS
  AR
  AU
  IL
  IO
  IN
  TZ
  AZ
  IE
  ID
  UA
  QA
}

input CountryShippingInput {
  countryCode: CountryCode!
  enabled: Boolean
  price: CurrencyInput
  timeToDoor: Int
  regionShipping: [RegionShippingInput!]
}

type CountryShippingSchema {
  country: Country!
  enabled: Boolean!
  price: CurrencyValue
  regionShipping: [RegionShippingSchema!]
  timeToDoor: Int
  wishExpressTtdRequirement: Int
}

input CountryShippingSetting {
  countryCode: ShippableCountryCode!
  enabled: Boolean!
  price: CurrencyInput
}

input CreateBrandEnrollmentInput {
  proposedBrandId: ObjectIdType
  brandOwnerName: String!
  proofOfAuthorizations: [FileInput!]!
  brandRepName: String!
  brandRepTitle: String!
  email: String!
  phoneNumber: String!
  isNewBrand: Boolean!
  providedBrandName: String!
  providedBrandWebsite: String
  providedBrandLogoFile: FileInput
  providedBrandAdditionalInfo: String
  trademarkInfos: [BrandPartnerTrademarkInfoInputObject!]!
}

type CreateBrandEnrollmentRequest {
  ok: Boolean!
  message: String
}

input CreateChargeTransactionInput {
  amount: CurrencyInput!
  type: ChargeItemType!
  redirectUrl: String
  flowType: ChargeTransactionType!
}

type CreateChargeTransactionMutation {
  ok: Boolean!
  message: String
  chargeId: ObjectIdType
}

type CreateLQDCampaign {
  ok: Boolean!
  message: String
}

type CreateShippingPlan {
  ok: Boolean!
  message: String
  shippingPlan: ShippingPlanSchema
}

type CreateShippingProvider {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

type CreateTakedownRequest {
  ok: Boolean!
  message: String
  takedownRequestId: ObjectIdType
}

input CreateTakedownRequestInput {
  brandPartnerBrandInfoId: ObjectIdType!
  typeOfInfringement: TypeOfInfringement!
  productIds: [ObjectIdType!]!
  notes: String
}

enum CreditPaymentType {
  IMPRESSION_FEE
  OTHER
  ENROLLMENT_FEE
}

type CreditTransactionRecord {
  id: ObjectIdType!
  dateCreated: Datetime!
  updatedReason: CreditUpdateReason!
  paymentType: CreditPaymentType
  campaignId: ObjectIdType
  productId: ObjectIdType
  transactionAmount: CurrencyValue
  expiredDate: Datetime
  updateReasonDescription: String!
  receiptId: ObjectIdType
}

enum CreditUpdateReason {
  REFUND
  PAYMENT_BY_CREDITS
  ISSUING_CREDITS
}

type CsvFulfillmentErrorSchema {
  message: String!
  row: String!
  orderId: ObjectIdType!
}

type CsvFulfillmentJobSchema {
  id: ObjectIdType!
  csvUrl: String!
  fulfilledCount: Int!
  errorCount: Int!
  totalRows: Int!
  status: MerchantFeedJobStatus!
  processedCount: Int!
  startTime: Datetime!
  fileName: String
  errors: [CsvFulfillmentErrorSchema!]
}

input CurrencyInput {
  amount: Float!
  currencyCode: PaymentCurrencyCode!
}

type CurrencyValue {
  amount: Float!
  currencyCode: String!
  display: String!
  convertedTo(currency: PaymentCurrencyCode!, rate: ConversionRate!): CurrencyValue!
}

type CustomerIdentityInfo {
  number: String!
  numberName: String!
}

type CustomerPaymentSchema {
  id: String
  paymentProvider: TransactionPaymentType!
}

type CustomerPriceSchema {
  unitPrice(localized: Boolean): CurrencyValue!
  unitShipping(localized: Boolean): CurrencyValue!
  credit(localized: Boolean): CurrencyValue
  total(localized: Boolean): CurrencyValue!
}

type CustomerSchema {
  payment: CustomerPaymentSchema!
  pricing: CustomerPriceSchema!
  user: WishUserSchema
}

type CustomerSupportConstants {
  issues: [CustomerSupportIssueType!]!
}

type CustomerSupportIssueType {
  id: Int!
  label: String!
}

type CustomerSupportServiceSchema {
  tickets(offset: Int = 0, limit: Int = 100, query: String, searchType: TicketSearchType = 2, sort: CustomerSupportTicketSort, states: [CustomerSupportTicketState!], issueTypes: [Int!], includeMissingTicketType: Boolean = false, types: [CustomerSupportTicketType!]): [CustomerSupportTicket!]!
  ticketCount(query: String, searchType: TicketSearchType = 2, states: [CustomerSupportTicketState!], issueTypes: [Int!], includeMissingTicketType: Boolean = false, types: [CustomerSupportTicketType!]): Int!
}

type CustomerSupportTicket {
  id: ObjectIdType!
  state: CustomerSupportTicketState!
  type: CustomerSupportTicketType
  createdTime: Datetime!
  lastUpdateTime: Datetime
  user: WishUserSchema!
  issueType: CustomerSupportIssueType
  timeToRespond: Timedelta
}

input CustomerSupportTicketSort {
  field: TicketSortFieldType!
  order: SortOrderType!
}

enum CustomerSupportTicketState {
  AWAITING_REFUND_CONFIRMATION
  ADMIN
  MANUAL_REFUND_CONFIRMATION
  PERM_CLOSED
  DELAYED
  ESCALATED_TO_FRAUD_INTERNAL
  REVIEW_MERCHANT_REPLY
  AWAITING_USER
  CLOSED
  AWAITING_FRAUD
  NEW
  SUPER_ADMIN
  AWAITING_SHIP_PROVIDER
  AWAITING_MERCHANT
  RETURN_AUTO_TICKET
  ESCALATED_TO_INTERNAL
}

enum CustomerSupportTicketType {
  PRE_PURCHASE
  POST_CUSTOMER_SUPPORT
  NON_ORDER
  ORDER
}

scalar DateTime

type Datetime {
  unix: Int!
  formatted(fmt: String): String!
  iso8061: String!
  timeSince: Timedelta!
  timeUntil: Timedelta!
  hasPassed: Boolean!
  mmddyyyy: String!
  inTimezone(identifier: String!): Datetime!
  timezone: String!
}

input DatetimeInput {
  unix: Int
  iso8061: String
  fmt: String
  formatted: String
}

input DayStoreHoursConfiguration {
  isOpen: Boolean!
  durations: [StoreHoursDuration!]
}

type DeciderKeySchema {
  decideForName(name: String!): Boolean!
}

input DefaultShippingInput {
  warehouseId: ObjectIdType!
  price: CurrencyInput!
}

type DefaultShippingSchema {
  warehouseId: ObjectIdType!
  price: CurrencyValue!
  timeToDoor: Int
}

type DeleteAllDevicesMutation {
  deletedDeviceIds: [ObjectIdType!]
  deletedSessionIds: [ObjectIdType!]
  error: String
}

type DeleteBrandEnrollment {
  ok: Boolean!
  message: String
}

input DeleteBrandEnrollmentInput {
  brandInfoId: ObjectIdType!
}

input DeleteDeviceInput {
  deviceId: ObjectIdType!
}

type DeleteDeviceMutation {
  error: String
}

input DeleteMerchantSenderAddressInput {
  merchantSenderAddressId: ObjectIdType!
}

type DeleteMerchantSenderAddressMutation {
  ok: Boolean!
  message: String
}

input DeleteMerchantWarehouseInput {
  id: ObjectIdType!
}

type DeleteMerchantWarehouseMutation {
  ok: Boolean!
  message: String
}

input DeleteProductPostsInput {
  postIds: [ObjectIdType!]
}

type DeleteProductPostsMutation {
  ok: Boolean!
  message: String
  errorCode: ProductPostErrorCode
}

type DeleteWebhookSubscription {
  ok: Boolean!
  message: String
}

input DeleteWebhookSubscriptionInput {
  subscriptionId: ObjectIdType!
}

input DeliveryCarrierUpsertInput {
  carrierId: Int!
  countries: [CountryActionInput!]!
  extraCountryData: ExtraCountryDataInput
  date: String!
  reason: String
}

input DestinationShippingProfileInput {
  destination: String
  displayName: String
  rate: CurrencyInput
  maxHoursToDoor: Int
  enabled: Boolean
  shippingDetailsPerDestination: [DestinationShippingProfileInput!]
}

type DestinationShippingProfileSchema {
  destination: String!
  displayName: String!
  rate: CurrencyValue!
  maxHoursToDoor: Int!
  enabled: Boolean!
  shippingDetailsPerDestination: [DestinationShippingProfileSchema!]
}

type DetectionFactor {
  factor: MerchantCountryDetectionFactorType!
  detectedCountry: Country
}

type DeviceSchema {
  id: ObjectIdType!
  ip: String
  location: String
  lastUsed: DateTime
  firstUsed: DateTime!
  deviceName: String
  userAgent: String
  status: DeviceStatus!
}

enum DeviceStatus {
  CURRENT
  ACTIVE
  INACTIVE
}

type DisableBrandPartner {
  ok: Boolean!
  message: String
}

input DisableBrandPartnerInput {
  brandPartnerId: ObjectIdType!
}

enum DisputeReason {
  MISLEADING_PRODUCT_TAG
  PRODUCT_HIGH_REFUND_RATIO
  DELIVERED_TO_WRONG_ADDRESS
  EPC_OVERWEIGHT
  FRAUDULENT_BEHAVIOR
  VALID_TRACKING
  INCOMPLETE_ORDER
  NOT_DELIVERED_ON_TIME
  STORE_UPLOADED_INVENTORY_RETURN
  PRODUCT_LOW_RATING
  RIGHT_OF_WITHDRAWAL
  FBS_ITEM_NOT_PICKUP
  CORRECT_SIZE
  ITEM_IS_DAMAGED
  MERCHANT_REPORT_RETURN
  EPC_OVERVALUE
  RETURNED_TO_SENDER
  ITEM_NOT_MATCH_LISTING
  WISHBLUE_EPC_LATE_FULFULLMENT
  OUT_OF_STOCK
  ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE
  FAKE_TRACKING
  MERCHANT_HIGH_REFUND_EAT_COST
  ITEM_IS_DANGEROUS
  BANNED_MERCHANT
  NOT_QUALIFIED_SHIPPING_PROVIDER
  AUTHORIZED_TO_SELL
  EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP
  EPC_OVERSIZE
  COUNTERFEIT_ITEM
  DID_NOT_ACCEPT_TOS_ON_TIME
  LATE_CONFIRMED_FULFILLMENT
  MERCHANT_REPORT_FRAUD
}

type DisputeReasonSchema {
  reason: DisputeReason!
  text: String
  subReason: DisputeSubReason
  subReasonText: String
}

type DisputeSchema {
  refundDispute: RefundDisputeHub
  trackingDispute: TrackingDisputeHub
}

input DisputeSort {
  field: DisputeSortFieldType!
  order: SortOrderType!
}

enum DisputeSortFieldType {
  DisputeID
  LastUpdate
}

enum DisputeState {
  INVALID
  AWAITING_ADMIN
  PAID
  CLOSED
  CANCELLED
  NEW
  AWAITING_MERCHANT
  APPROVED
}

enum DisputeSubReason {
  INCOMPLETE_ITEM
  DID_NOT_RECEIVE_ITEM
  INCORRECT_ITEM
}

input DomesticShippingInput {
  warehouseId: ObjectIdType!
  price: CurrencyInput
  enabled: Boolean
}

type DomesticShippingSchema {
  warehouseId: ObjectIdType!
  price: CurrencyValue!
  enabled: Boolean!
  priceEstimate: CurrencyValue!
}

type DownloadAllProductsCSV {
  ok: Boolean!
  errorMessage: String
}

input DownloadAllProductsCSVInput {
  includeRejected: Boolean = false
  warehouseId: ObjectIdType
}

type DownloadEUComplianceProductLinks {
  ok: Boolean!
  errorMessage: String
}

input EUComplianceAddressInput {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  streetAddress3: String
  city: String!
  county: String
  state: String!
  neighborhood: String
  region: String
  countryCode: EUComplianceResponsiblePersonCountriesAndRegionsCode
  zipcode: String
  phoneNumber: String
}

type EUComplianceMutations {
  downloadProductLinks: DownloadEUComplianceProductLinks
  upsertLink(input: LinkProductComplianceUpsertInput): UpsertLinkProductCompliance
  upsertResponsiblePerson(input: ResponsiblePersonUpsertInput): UpsertResponsiblePerson
}

type EUComplianceResponsiblePersonCountriesAndRegions {
  code: EUComplianceResponsiblePersonCountriesAndRegionsCode!
  name: String!
}

enum EUComplianceResponsiblePersonCountriesAndRegionsCode {
  BE
  FR
  BG
  DK
  HR
  IS
  DE
  IT
  HU
  CZ
  CY
  AT
  FI
  NIE
  IE
  ES
  GR
  SK
  NL
  PT
  NO
  SI
  LI
  LV
  EE
  LT
  LU
  SE
  MT
  RO
  PL
}

input EUVATRegistrationFieldsInput {
  vatNumber: String!
  countryCode: CountryCode!
}

type EUVATSchema {
  invoiceAmount(inAuthorityCurrency: Boolean = true): CurrencyValue
  shippingPrice(inAuthorityCurrency: Boolean = true): CurrencyValue
}

type EUVATTaxMutations {
  uploadVatTaxQuestionnaire(input: EUVATTaxQuestionnaireInput!): UploadEUVATTaxQuestionnaire
}

input EUVATTaxQuestionnaireAddressInput {
  address: String!
  zipcode: String!
  city: String!
  state: String!
  countryCode: CountryCode!
}

input EUVATTaxQuestionnaireInput {
  employPersonnelInEu: Boolean
  businessAddressInEu: Boolean
  businessAddress: EUVATTaxQuestionnaireAddressInput
  subjectToTaxInEu: Boolean
  fileUrl: String
  registeredWithTradeRegistryInEu: Boolean
  euVatRegistration: EUVATRegistrationFieldsInput
  businessRegistrationNumber: String
}

type EUVATTaxSchema {
  euVatSelfRemittanceEligible: Boolean
  euVatEntityStatus: CommerceMerchantEUEntityStatus
}

input EditAddressInput {
  orderId: ObjectIdType!
  address: AddressInput!
}

type EditOriginAddresses {
  updatedCount: Int!
  errorMessages: [AddressUpdateError!]
}

type EditShippingAddresses {
  updatedCount: Int!
  errorMessages: [AddressUpdateError!]
}

input EditTrademarkInput {
  id: ObjectIdType!
  location: BrandPartnerCountryAndRegionCode!
  type: BrandPartnerTrademarkType!
  registrationNumber: String!
  registrationUrl: String
  registrationDocs: [FileInput!]
}

type EditTrademarksAndBrandInfo {
  ok: Boolean!
  message: String
}

input EditTrademarksAndBrandInfoInput {
  brandInfoId: ObjectIdType!
  brandOwnerName: String
  proofOfAuthorizations: [FileInput!]
  brandRepName: String
  brandRepTitle: String
  email: String
  phoneNumber: String
  proposedBrandId: ObjectIdType
  providedBrandName: String!
  isNewBrand: Boolean!
  providedBrandWebsite: String
  providedBrandLogoFile: FileInput
  providedBrandAdditionalInfo: String
  trademarks: [EditTrademarkInput!]!
}

enum ExistingSellingLocations {
  NONE
  RETAIL
  ONLINE_AND_RETAIL
  ONLINE
}

type ExpSchema {
  bucket(name: String!): String!
}

type ExternalBoostAttributedStats {
  orders: Int!
  gmv: CurrencyValue!
}

enum ExternalBoostChargingMethod {
  CPA
  CPC
}

input ExtraCountryDataInput {
  swedenDeliveredCarrierTypes: [SwedenDeliveredCarrierType!]!
}

type FBWInventorySchema {
  warehouse: FBWWarehouseSchema!
  shippingType: WarehouseShippingType!
  activeInventory: Int!
  pendingInventory: Int!
}

enum FBWRegion {
  EU
  CN
  US
  EU_UNBONDED
}

type FBWWarehouseSchema {
  id: ObjectIdType!
  code: String!
  region: FBWRegion!
  address: AddressSchema!
  estimatedFulfillTime: Timedelta!
  maxWeight: Weight!
  name: String!
  feeLink: String!
}

input FileInput {
  url: String!
  fileName: String!
}

enum FinalSaleCategory {
  HOUSEHOLD_SUPPLIES
  ADULT_TOYS
  PLANT_AND_PLANT_SEEDS
  FOOD_AND_BEVERAGES
  VITAMINS_AND_SUPPLEMENTS
  PET_FOOD
  OTC_MEDICATION
  MAKEUP_AND_BEAUTY
}

type FinalSaleCategorySchema {
  category: FinalSaleCategory!
  name: String!
  description: String!
  totalProducts: Int!
  finalSaleEnabled: Boolean!
}

enum FineReason {
  EARLY_PAYMENT_DEDUCTION
  PROMOTION_FEE
  UNREASONABLE_PRICE_GAUGE
  PRODUCT_LISTING_FEE
  MERCHANT_CANCELLATION
  FAKE_RATING
  LEGAL_SETTLEMENT_RESERVED
  INVALID_EU_RESPONSIBLE_PERSON
  B2B_SALE_FEE
  POLICY_VIOLATION
  STORE_PAYMENT_DEDUCTION
  CN_PROHIBITED_PRODUCTS
  IP_INFRINGEMENT
  LEGAL_SETTLEMENT_PAID
  WITHHOLD_FUND
  ONEOFF_FEE
  UNFULFILLED_ORDER
  MERCHANT_HARASSMENT
  LOGISTIC_FEE
  ONEOFF
  PROHIBITED_PRODUCT_FINE
  WISH_EXPRESS_VIOLATION
  COLLECTIONS_BOOST_CAMPAIGN_FEE
  RETURN_LABEL_FEE
  EXTERNAL_BOOST_FEE
  LEGAL_SETTLEMENT
  WISH_PARCEL_SERVICE_ADJUST_FEE
  WISHPOST_ADJUSTMENT_DEDUCTION
  MERCHANT_INCENTIVE
  FBW_FEE
  PROMOTED_PRODUCT_DISABLE_FINE
  MISLEADING_VARIATION
  FAKE_TRACKING
  UNCONFIRMED_CARRIER
  DEP_INFRACTION
  STORE_PAYMENT_CANCELLATION
  WISH_EXPRESS_WITHHELD_ORDER
  SE_CASH_BACK
  EXTERNAL_BOOST_CPA_FEE
  QUALITY_REFUND_FINE
  PAID_PLACEMENT_IMPRESSION_FEE
  CN_ORDER_NOT_SHIP_WITH_WISHPOST
  LCL_FBW_FEE
  CONSOLIDATE_MP_FINE
  REPEAT_IP_INFRINGEMENT
  WISH_PARCEL_SERVICE_FEE
  DECEPTIVE_FULFILLMENT
  MISLEADING_LISTING
  MISLEADING_LISTING_AUTHENTIC_BRAND
  LATE_CONFIRMED_FULFILLMENT
  PAID_PLACEMENT_ENROLLMENT_FEE
  PRODUCT_SWAPPED
}

type FlexibleBudgetSchema {
  enabled: Boolean!
  type: MarketingFlexibleBudgetType!
}

input FulfillOrderInput {
  orderId: ObjectIdType!
  trackingId: String!
  providerId: Int!
  shipNote: String
  originCountryCode: CountryCode!
}

type FulfillOrders {
  shippedCount: Int!
  reusedTracking: Boolean!
  errorMessages: [FulfillmentError!]
}

type FulfilledByWishMutations {
  createShippingPlan(input: ShippingPlanInput!): CreateShippingPlan
}

type FulfillmentCSVSchema {
  requiredColumns: [OrderCSVColumnSchema!]!
  optionalColumns: [OrderCSVColumnSchema!]!
}

type FulfillmentError {
  orderId: ObjectIdType!
  message: String!
}

enum FulfillmentExtensionSurveyOption {
  OTHER
  NOT_ENOUGH_WORKERS
  TROUBLE_SHIPPING
  NOT_ENOUGH_INVENTORY
}

type FulfillmentExtensionSurveyOptionSchema {
  name: FulfillmentExtensionSurveyOption!
  display: String!
}

type FulfillmentMutation {
  refundOrders(input: [RefundOrderInput!]!): RefundOrders!
  fulfillOrders(input: [FulfillOrderInput!]!): FulfillOrders!
  modifyTrackingOrders(input: [ModifyTrackingOrderInput!]!): ModifyTrackingOrders!
  editShippingAddresses(input: [EditAddressInput!]!): EditShippingAddresses!
  editOriginAddresses(input: [EditAddressInput!]!): EditOriginAddresses!
  fulfillOrdersFromCsv(input: FulfillmentOrdersFromCsvInput!): FulfillmentOrdersFromCsv!
  updateDeliveryConfirmation(input: UpdateOrderDeliveryConfirmationInput!): UpdateOrderDeliveryConfirmation!
  actionRequiredOrdersCsvDownload(input: ActionRequiredOrdersCsvDownloadInput!): ActionRequiredOrdersCsvDownload!
  ordersCsvDownload(input: OrdersCsvDownloadInput!): OrdersCsvDownload!
  setMerchantFulfillmentExtension(input: SetMerchantFulfillmentExtensionInput!): SetMerchantFulfillmentExtension!
  selectWpsShippingOption(input: SelectWPSShippingOptionInput!): SelectWPSShippingOptionMutation!
  modifyWpsTrackingId(input: ModifyWPSTrackingIDInput!): ModifyWPSTrackingIDMutation!
  cancelWpsTrackingId(input: CancelWPSTrackingIDInput!): CancelWPSTrackingIDMutation!
  setWpsPackageType(input: SetWPSPackageTypeInput!): SetWPSPackageTypeMutation!
  generateTestOrders(input: GenerateTestOrdersInput!): GenerateTestOrders
}

type FulfillmentOrdersFromCsv {
  jobUrl: String
  status: MerchantFeedJobStatus
  errorMessage: String
}

input FulfillmentOrdersFromCsvInput {
  fileUrl: String!
  csvDelimiter: String!
  columnIdList: [String!]!
}

type FulfillmentSchema {
  order(id: String!): OrderSchema
  orders(query: String, searchType: OrderHistorySearchType, offset: Int = 0, limit: Int = 20, sort: OrderHistorySort, states: [CommerceTransactionState!], wishExpress: Boolean): [OrderSchema!]
  ordersCsvUrl(query: String, searchType: OrderHistorySearchType, offset: Int = 0, limit: Int = 20, sort: OrderHistorySort, wishExpress: Boolean): String
  actionRequiredOrdersCsvUrl(query: String, searchType: ActionRequiredSearchType, offset: Int = 0, limit: Int = 20, sort: ActionRequiredSort, wishExpress: Boolean): String
  csvFulfillmentJobsCount: Int
  ordersCount(query: String, searchType: OrderHistorySearchType, states: [CommerceTransactionState!], wishExpress: Boolean): Int
  actionRequiredOrders(query: String, searchType: ActionRequiredSearchType, offset: Int = 0, limit: Int = 20, sort: ActionRequiredSort, wishExpress: Boolean): [OrderSchema!]
  actionRequiredOrderCount(query: String, searchType: ActionRequiredSearchType, wishExpress: Boolean): Int
  fulfillmentCsv: FulfillmentCSVSchema
  bulkJobs(offset: Int! = 0, limit: Int! = 25): [CsvFulfillmentJobSchema!]
  wpsShippingOptions(orderId: String!): WPSGetShippingOptionsSchema
}

type GenerateTestOrders {
  ok: Boolean!
  errorMessage: String
}

input GenerateTestOrdersInput {
  productId: ObjectIdType
  variationId: ObjectIdType
  quantity: Int
  logisticsOption: GenerateTestOrdersLogisticsOptions! = random
  country: CountryCode
  state: String
  zipcode: String
}

enum GenerateTestOrdersLogisticsOptions {
  RANDOM
  WISH_EXPRESS
  LESS_THAN_TRUCKLOAD
  ADVANCED_LOGISTICS
  OPTIONAL_ADVANCED_LOGISTICS
  CONFIRMED_DELIVERY_POLICY
  UNIFICATION_INITIATIVE
  NONE
}

input GenerateVideoInput {
  slides: [VideoSlideSpec!]
}

type GenerateVideoMutation {
  ok: Boolean
  videoUrl: String
}

type GeoCoordinates {
  latitude: String!
  longitude: String!
}

type IPViolationBrandCategory {
  category: BrandCategoryCode!
  displayName: String!
}

type IPViolationTaggingManagement {
  ipViolationReasons: [TaggingViolationReason!]!
  brandCategories: [IPViolationBrandCategory!]!
  taggableBrands: [BrandSchema!]!
}

type IdentityMutations {
  updatePermission(input: UpdatePermissionInput!): UpdatePermissionMutation
  updateRole(input: UpdateRoleInput!): UpdateRoleMutation
  updateUserInfo(input: UpdateUserInfoInput!): UpdateUserInfoMutation
  updateQueue(input: UpdateUserQueuesInput!): UpdateUserQueuesMutation
}

type IdentityServiceSchema {
  user(id: String!): UserSchema
  platformRoles: [RoleSchema!]!
  users(offset: Int = 0, limit: Int = 100, query: String, sortField: UsersSortFieldType = username, sortOrder: SortOrderType = 1, includeDisabledUsers: Boolean = false, roles: [RoleType!] = []): [UserSchema!]
  usersCount(query: String, includeDisabledUsers: Boolean = false, roles: [RoleType!] = []): Int
  visibleRoles: [RoleSchema!]!
  platformBdMerchantCountries: [BDMerchantCountryCodeType!]!
}

input ImageInput {
  id: Int
  url: String!
  isCleanImage: Boolean
}

type ImageSchema {
  id: Int!
  wishUrl: String!
  isCleanImage: Boolean!
}

type ImportProductsFromCSVFile {
  ok: Boolean!
  message: String
  jobId: ObjectIdType
}

input ImportProductsFromCSVFileInput {
  fileUrl: String!
  columnIdList: [ProductCSVImportColumnId!]
}

type InfoCollectedForPaymentProvider {
  email: String
}

input InitiateUploadInput {
  bucket: ClientWritableBucket!
  filename: String
  contentType: String!
}

type InitiateUploadMutation {
  ok: Boolean!
  message: String
  uploadUrl: String
  uploadHeaders: JSONString
  downloadUrl: String
}

input InventoryInput {
  warehouseId: ObjectIdType!
  count: Int!
}

type InventorySchema {
  warehouseId: ObjectIdType!
  shippingType: WarehouseShippingType!
  count: Int!
}

enum IsRequiredEnum {
  NOT_INCLUDED
  OPTIONAL
  REQUIRED
}

scalar JSONString

enum KYCMerchantType {
  NOT_SET
  COMPANY
  INDIVIDUAL
}

enum KYCProfilePaymentStatus {
  PAYMENT_ALLOWED
  PAYMENT_HELD
  PAYMENT_HOLD_PROPOSED
}

enum KYCProfileVerificationAdminStatus {
  NOT_SET
  IN_PROGRESS
  REJECTED
  APPROVED
  ON_HOLD
}

enum KYCProfileVerificationRiskScore {
  HIGH
  NOT_SET
  VERY_HIGH
  MEDIUM
  LOW
}

enum KYCProfileVerificationStatus {
  REJECTED
  COMPLETE
  INCOMPLETE
}

type KycVerificationSchema {
  status: KYCProfileVerificationStatus
  paymentStatus: KYCProfilePaymentStatus
  adminStatus: KYCProfileVerificationAdminStatus
  riskScore: KYCProfileVerificationRiskScore
  merchantType: KYCMerchantType
  isMandatory: Boolean
  canStart: Boolean!
}

input LQDCampaignInput {
  productId: ObjectIdType!
  startDate: DatetimeInput!
}

type LQDCampaignSchema {
  id: ObjectIdType!
  productId: ObjectIdType!
  product: ProductSchema!
  startDate: Datetime!
  endDate: Datetime!
  state: LQDCampaignState!
  impressions: Int!
}

enum LQDCampaignState {
  CANCELLED
  ENDED
  STARTED
  SAVED
  NEW
}

type LQDProductStatsByDaySchema {
  productId: ObjectIdType!
  product: ProductSchema!
  date: Datetime!
  clicks: Int!
  impressions: Int!
  lqdOrders: Int!
  orders: Int!
  gmv: CurrencyValue!
}

type LQDPromotionSchema {
  campaigns(startDate: DatetimeInput!, endDate: DatetimeInput!, offset: Int = 0, limit: Int = 15): [LQDCampaignSchema!]!
  campaignsCount(startDate: DatetimeInput!, endDate: DatetimeInput!): Int!
}

type LQDPromotionStats {
  byDay: [LQDProductStatsByDaySchema!]!
}

enum LegacyRefundSource {
  MERCHANT
  USER_CANCEL
  WISH_ADMIN_MERCHANT_EATS_COST
  WISH_ADMIN_BOTH_EAT_COST
  WISH_ADMIN_WISH_EATS_COST
  AUTO_LATE_FULFILL
}

type Length {
  value(targetUnit: LengthUnit): Float!
  unit: LengthUnit!
}

input LengthInput {
  value: Float!
  unit: LengthUnit!
}

enum LengthUnit {
  METER
  CENTIMETER
  INCH
  FEET
  YARD
}

enum LineItemSearchType {
  CTXN_REFUND_ITEM_ID
  MERCHANT_ONEOFF_PAYMENT_ID
  FINE_ID
  ORDER_ID
  DISPUTE_ID
  CAMPAIGN_ID
  LOGISTIC_PROVIDER_ID
  FINE_REVERSAL_ID
  REFUND_DETAIL_ID
  CHARGING_ID
  WARNING_ID
  LOGISTIC_OPTION_ID
  TRANSACTION_REFUND_ID
  ID
  MERCHANT_PAYMENT_ID
  FBW_INVOICE_ID
}

enum LineItemType {
  POLICY_VIOLATION_FINE
  MISLEADING_VARIATION_FINE
  B2B_SALE_FEE
  WISH_PARCEL_SERVICE_ADJUST_PAYMENT
  INITIAL_WISHPOST_SHIPPING_REFUND_OFFSET
  REV_SHARE_ADJUST_PAYMENT
  WISH_EXPRESS_REBATE_REVERSE
  DISPUTE_APPROVED
  WITHHELD_RELEASED
  LOGISTIC_FEE
  EARLY_PAYMENT
  OVERPAY_PAYMENT_AMOUNT
  QUALITY_REFUND_FINE
  MERCHANT_HARASSMENT
  WISHPOST_ADJUSTMENT_PAYMENT
  WITHHOLD_FUND_FINE
  EXTERNAL_BOOST_CPA_FEE
  UNDERPAY_PAYMENT_AMOUNT
  STRATEGIC_ORDER_REBATE
  PAID_PLACEMENT_IMPRESSION_FEE
  LCL_FBW_FEE
  EARLY_PAYMENT_CANCELLATION
  DECEPTIVE_FULFILLMENT_FINE
  STORE_PAYMENT_CANCELLATION
  ESTIMATED_WISHPOST_SHIPPING
  PAYMENT
  MARKETING_REBATE
  UNFULFILLED_ORDER_FINE
  PRODUCT_UNTAGGED_MISLEADING
  FBW_PAYMENT
  CHINA_POST_SUBSIDY_REVERSE
  CANCEL_WITHHOLD_PAYMENT
  COUNTERFEIT_REFUND
  COVID19_SUBSIDY_REVERSE
  COLLECTIONS_BOOST_CAMPAIGN_FEE
  RETURN_LABEL_FEE
  ONEOFF_FINE
  WISHPOST_ADJUSTMENT_DEDUCTION
  FINE_REVERSED
  PRODUCT_REBATE
  DOUBLE_DEDUCTION_BOOK_KEEPER
  LATE_CONFIRMED_FULFILLMENT_FINE
  FAKE_TRACKING_FINE
  REFUNDED
  PRODUCT_LISTING_FEE
  CONSOLIDATE_MP_PAYMENT
  OTHER_DEDUCTION
  REGISTRATION_REFUND
  EARLY_PAYMENT_REIMBURSEMENT_FEE
  ONEOFF
  EXTERNAL_BOOST_FEE
  MARKETING_REBATE_REVERSE
  MERCHANT_INCENTIVE
  PROMOTED_PRODUCT_DISABLE_FINE
  INFRACTION_FINE
  MERCHANT_INCENTIVE_REVERSE
  RETROACTIVE_REFUND_FOR_LOW_RATED_PRODUCT
  PRODUCT_BOOST_BALANCE_REFUND
  NEW_REFUNDED
  SE_CASH_BACK
  LEGAL_SETTLEMENT_FINE
  FBW_FEE
  MERCHANT_CANCELLATION_FINE
  EARLY_PAYMENT_DEDUCTION
  PROMOTION_FEE
  LEGAL_SETTLEMENT_RESERVED_PENALTY
  COVID19_SUBSIDY
  STORE_PAYMENT_DEDUCTION
  SE_CASH_BACK_REVERSE
  RETROACTIVE_REFUND_FOR_PROBLEM_PRODUCT
  FAKE_RATING_FINE
  ESTIMATED_WISHPOST_SHIPPING_REFUND
  INITIAL_WISHPOST_SHIPPING_REFUND
  CN_ORDER_NOT_SHIP_WITH_WISHPOST_FINE
  INITIAL_WISHPOST_SHIPPING
  CHINA_POST_SUBSIDY
  STORE_PAYMENT
  WISH_EXPRESS_REBATE
  SHIPPED
  WITHHOLD_PAYMENT
  INITIAL_WISHPOST_SHIPPING_OFFSET
  LEGAL_SETTLEMENT_PAID_PENALTY
  WISH_PARCEL_SERVICE_ADJUST_FEE
  CONSOLIDATE_MP_FINE
  UNCONFIRMED_CARRIER_FINE
  WISH_PARCEL_SERVICE_FEE
  PAID_PLACEMENT_ENROLLMENT_FEE
  STRATEGIC_ORDER_REBATE_REVERSE
}

enum LinkProductComplianceAction {
  UPDATE_EU_RP
}

type LinkProductComplianceSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  product: ProductSchema
  productCategories: [MSRCategory!]!
  trueTags: [TrueTagSchema!]
  reviewState: LinkProductComplianceState!
  euResponsiblePerson: ResponsiblePersonSchema
}

enum LinkProductComplianceState {
  NO_RP
  HAS_RP
}

input LinkProductComplianceUpsertInput {
  action: LinkProductComplianceAction!
  productIds: [ObjectIdType!]!
  responsiblePersonId: ObjectIdType
  compliance: ResponsiblePersonCompliance!
}

type LinkShippingProfile {
  ok: Boolean!
  message: String
}

enum Locale {
  en
  zh
  de
  fr
  es
  pt
  sv
  tr
  pl
  nl
  ar
  cs
  hu
  da
  fi
  nb
  ko
  ja
  it
  th
  vi
  id
  up
}

type LogToTreasureData {
  ok: Boolean
}

input LogToTreasureDataInput {
  table: LoggableTable!
  data: JSONString!
}

enum LoggableTable {
  PRODUCT_BOOST_EXPOSURE_BOX_VIEW
  PRODUCT_BOOST_EXPOSURE_BOX_CREATE_CLICK
  PRODUCT_BOOST_EXPOSURE_BOX_LEARN_MORE_CLICK
  PRODUCT_BOOST_SPLASH_PAGE
  PRODUCT_BOOST_LIST_CAMPAIGN_BUDGET_DEPLETION_CLICK
  PRODUCT_BOOST_LIST_CAMPAIGN_BUDGET_DEPLETION_VIEW
  PRODUCT_BOOST_NEW_NAV_TAB_CLICK
  PRODUCT_BOOST_PUBLISH_AUTOMATED_CAMPAIGN_MODAL_VIEW
  PRODUCT_BOOST_PUBLISH_AUTOMATED_CAMPAIGN_MODAL_CLICK
  PRODUCT_BOOST_PRODUCT_FEEDBACK_VIEW
  PB_BUDGET_DEPLETION_NOTI
  PB_AUTOMATED_CAMPAIGN_PUBLISHED_NOTI
  PB_CREATE_CAMPAIGN_ACTIVITY_TRACKER
  PB_CREATE_CAMPAIGN_BUDGET_TRACKER
  PB_CREATE_CAMPAIGN_USER_ERRORS
  PB_PRODUCT_FEED_UPLOAD_PORTAL
  PB_V2_CREATE_CAMPAIGN_ACTIVITY_TRACKER
  PRODUCT_BOOST_FREE_PROMOTION_CAMPAIGN_MODAL_VIEW
  PRODUCT_BOOST_FREE_PROMOTION_CAMPAIGN_MODAL_CLICK
  PRODUCT_BOOST_DUPLICATE_CAMPAIGN_REMINDER_VIEW
  PRODUCT_BOOST_DUPLICATE_CAMPAIGN_REMINDER_CLICK
  PRODUCT_BOOST_PROMOTION_MODAL
  PRODUCT_BOOST_ENABLE_PENDING_CAMPAIGN_MODAL
  PRODUCT_BOOST_ENABLE_PENDING_CAMPAIGN_MODAL_CLICK
  CAMPAIGN_DETAILS_PAGE_MERCHANT_ACTION
  FBW_SPLASH_PAGE
  TAX_DECLINE_ENROLLMENT
  HOME_BANNER_IMPRESSION
  HOME_BANNER_CTA_CLICK
  MERCHANT_TODO_ITEMS
  PRODUCT_BOOST_ONE_CLICK_DUPLICATE_AUTOMATED
  PRODUCT_BOOST_NEW_PAGES_BUTTON_CLICK
  MERCHANT_STANDING_CLICK
  FINE_POLICY_PAGE_CLICK
  MERCHANT_NAV_CLICK
  FBW_RECOMMENDATION_DASHBOARD_CLICK
  FBW_INVENTORY_LISTING_PAGE_ACTION
  FBW_SHIPPING_PLAN_CREATION
  FBS_PERFORMANCE_PAGE_ACTION
  ADD_PRODUCT_BUTTON_CLICK
  PRODUCT_BOOST_PRODUCT_LIFETIME_PERFORMANCE_PAGE_VIEW
  BRAND_EDUCATION_CLICK
  RESELLER_AGREEMENT_PAGE
  SIGNUP_V3_ID_CARD_EXAMPLE
  PB_BUDGET_DEPLETION_SOURCE
  PRICE_DROP_UI
  PRODUCT_BOOST_FREE_CREDIT_MODAL
  MM_INTERNAL_DOWNLOADS
  EARLY_PAYMENT_REQUESTS
  CLICK_CHECK_MY_MAIL
  RECOMMENDATION_EMAIL_METRICS
  EARLY_PAYMENT_PAGE
  CHROME_SEARCH
  MERCHANT_FAILED_PASSWORD_ATTEMPTS
  HOME_PAGE_TUTORIAL_VIDEO_PLAYS
  BLACKLIST_CRITERIA_DASHBOARD_ACTION
  PRODUCT_BOOST_MANAGE_DAILY_BUDGET_CAMPAIGN_PAGE_VIEW
  PRODUCT_BOOST_UPDATE_DAILY_BUDGET_CAMPAIGN_CLICK
  PRODUCT_BOOST_CREATE_DAILY_BUDGET_CAMPAIGN_PAGE_VIEW
  PRODUCT_BOOST_CREATE_DAILY_BUDGET_CAMPAIGN_CLICK
  COLLECTIONS_BOOST_UI
  PLUS_WISH_EXPRESS_UI
  PLUS_SELLER_VERIFICATION_UI
  PLUS_KYC_VERIFICATION_UI
  PRODUCT_SHIPPING_PAGE_VIEW
  PRODUCT_SHIPPING_CLICK_SAVE
  ADD_GTIN_PRODUCT
  MERCHANT_VACATION_MODE_SURVEY
  PLUS_PRODUCT_UPLOAD
  PERFORMANCE_OVERVIEW_DASHBOARD
  MERCHANT_CS_SURVEY_RESULT
}

type LogicalQueueSchema {
  id: ObjectIdType!
  name: String
  state: LogicalQueueStateType
}

enum LogicalQueueStateType {
  ACTIVE
  DISABLED
}

type LoginAsMutations {
  user(input: ByUserIdInput!): ByUserIdMutation
}

enum LoginErrorState {
  TFA_REQUIRED
  CAPTCHA_REQUIRED
  LOGIN_ERROR
}

type LoginMutation {
  error: String
  errorState: LoginErrorState
  loginOk: Boolean!
  sessionKey: String
  obfuscatedPhoneNumber: String
}

input LoginMutationInput {
  username: String!
  password: String!
  rememberMe: Boolean
  tfaToken: String
  qrTicket: String
  captchaToken: String
  captchaCode: String
  deviceId: String
  deviceName: String
}

type LogisticsMetadataSchema {
  weight: Weight
  length: Length
  width: Length
  height: Length
  isFbwRecommended: Boolean
  gmvPer1k: CurrencyValue
}

type LogisticsMutations {
  upsertConfirmedDeliveryCarrier(input: DeliveryCarrierUpsertInput!): UpsertConfirmedDeliveryCarrier
  createShippingProvider(input: ShippingProviderInput!): CreateShippingProvider!
  changeShippingProviderStatus(input: ChangeShippingProviderStatusInput!): ChangeShippingProviderStatus!
  updateShippingProviderName(input: UpdateShippingProviderNameInput!): UpdateShippingProviderName!
  updateShippingProvider(input: ShippingProviderInput!): UpdateShippingProvider!
  fulfilledByWish: FulfilledByWishMutations
}

type LogisticsSchema {
  confirmedDeliveryCarrier: ConfirmedDeliveryCarriers
  shippingProviders(query: String, searchType: ShippingProviderSearchType, offset: Int = 0, limit: Int = 20, states: [ShippingProviderState!], isQualified: Boolean = false): [ShippingProviderSchema!]
  shippingProvidersCount(query: String, searchType: ShippingProviderSearchType, states: [ShippingProviderState!]): Int
  nextProviderId: Int
}

type LogoutMutation {
  ok: Boolean!
  error: String
}

enum MSRCategory {
  ELECTRONICS
  PPE
  ELECTRICAL_PRODUCTS
  TOYS
}

enum MarketingBonusBudgetType {
  CNY_BONUS_BUDGET
  DECREASED_PB_SPEND_BONUS_BUDGET
  VIDEO_PRODUCTS_BONUS_BUDGET
  NO_PROMOTION
}

type MarketingCampaignPropertySchema {
  maxCampaignNameLength: Int!
  minStartDate: Datetime!
  maxStartDate: Datetime!
  maxNumWeeks: Int!
  maxProducts: Int!
  minBid: CurrencyValue!
  maxBid: CurrencyValue!
  minKeywords: Int!
  maxKeywords: Int!
  maxKeywordLen: Int!
  maxCsvDownloadRows: Int!
  learningStatusThreshold: Int!
  flexibleBudgetSuggestedBudgetFactor: Float!
  dailyBudgetCampaignLimit: Int!
  campaignLockDays: Int!
}

enum MarketingCampaignState {
  STARTED
  READY
  PAID
  DRAFTING
  ENDED
  STOPPED
  CANCELLED
  NEW
  SAVED
  PENDING
}

enum MarketingFlexibleBudgetType {
  ALL_TIER
  DISABLED
  SILVER_TIER
}

type MarketingImpressionDailyStats {
  date: Datetime!
  impressions: Int
}

type MarketingMerchantPropertySchema {
  state: MarketingMerchantState!
  allowMaxboost: Boolean!
  hasAutomatedCampaign: Boolean!
  showCredits: Boolean!
  wishSubsidyDiscountFactor: Float!
  defaultFlexibleBudgetType: MarketingFlexibleBudgetType!
  minBudgetToAdd: CurrencyValue!
  maxBudgetToAdd: CurrencyValue!
  minSpendPerProduct: CurrencyValue!
  dailyMinBudget: CurrencyValue!
  dailyBudgetEnabled: Boolean!
  allowLocalizedCurrency: Boolean!
  spending: MarketingSpendingBreakdown!
  latestTosVersion: Int!
  canAcceptTos: Boolean!
  isFreeBudgetMerchant: Boolean!
  refundAssuranceConstants: RefundAssuranceConstants!
  offsiteBoost: OffsiteBoost!
}

enum MarketingMerchantState {
  INVITED
  REJECTED
  APPROVED
  PENDING
}

type MarketingPeriodImpressionStats {
  startDate: Datetime!
  endDate: Datetime!
  impressionDailyStats: [MarketingImpressionDailyStats!]!
  totalImpressions: String!
}

type MarketingServiceMutations {
  upsertProductPromotions(input: ProductPromotionsInput!): UpsertProductPromotions!
  acceptTos(input: ProductBoostAcceptTOSInput!): ProductBoostAcceptTOS!
  updateOffsiteBoost(input: OffsiteBoostPropertyInput!): UpdateOffsiteBoost!
  createLqdCampaign(input: LQDCampaignInput!): CreateLQDCampaign!
}

type MarketingServiceSchema {
  campaign(id: ObjectIdType!, duplicateId: ObjectIdType): CampaignSchema
  merchantProperty(merchantId: ObjectIdType!): MarketingMerchantPropertySchema
  currentMerchant: MarketingMerchantPropertySchema
  campaignProperty: MarketingCampaignPropertySchema
  impressionStats(startTime: DatetimeInput!, endTime: DatetimeInput!): MarketingPeriodImpressionStats!
  productPromotion(productId: ObjectIdType!): ProductPromotionSchema
  productPromotions(query: String, searchType: ProductPromotionSearchType, promotionStatuses: [ProductPromotionStatus!], offset: Int = 0, limit: Int = 20, refundAssuranceType: ProductPromotionRefundAssuranceType): [ProductPromotionSchema!]!
  productPromotionsCount(query: String, refundAssuranceType: ProductPromotionRefundAssuranceType, searchType: ProductPromotionSearchType, promotionStatuses: [ProductPromotionStatus!]): Int!
  promotableProducts(query: String, searchType: ProductPromotionSearchType, offset: Int = 0, limit: Int = 10, wishExpressOnly: Boolean = false): [PromotableProduct!]!
  promotableProductsCount(query: String, searchType: ProductPromotionSearchType, wishExpressOnly: Boolean = false): Int!
  trendingCategories: [TrueTagSchema!]!
  lqdPromotion: LQDPromotionSchema!
  balanceTransactions(offset: Int = 0, limit: Int = 100): [BalanceTransactionRecord!]!
  balanceTransactionsCount: Int!
  creditTransactions(offset: Int = 0, limit: Int = 100): [CreditTransactionRecord!]!
  creditTransactionsCount: Int!
  lowBudgetCampaignCount: Int!
  pendingCampaignCount(createdInPastDays: Int): Int!
  actionRequiredCampaignCount(createdInPastDays: Int): Int!
}

type MarketingSpendingBreakdown {
  accountBalance: CurrencyValue!
  promotionLoan: CurrencyValue!
  budgetAvailable: CurrencyValue!
  promotionLoanDescription: String!
  promotionCredit: CurrencyValue!
  promotionBalance: CurrencyValue!
  pending: CurrencyValue!
}

type MarketingStats {
  offsiteBoost(startDate: DatetimeInput!, endDate: DatetimeInput!): OffsiteBoostStats!
  lqdPromotion(campaignId: ObjectIdType!): LQDPromotionStats!
}

type MerchantAnnouncementSchema {
  id: ObjectIdType!
  type: AnnouncementType!
  createdAt: Datetime
  expiryDate: Datetime
  title: String
  message: String
  ctaText: String
  ctaLink: String
  ctaDueDate: Datetime
  sender: UserSchema!
  state: AnnouncementState!
  categories: [AnnouncementCategorySchema!]
  program: AnnouncementProgramSchema
  important: Boolean
}

type MerchantBrandSchema {
  brand: BrandSchema!
  numProducts: Int!
  lifetimeStatsObject: BrandedMerchantLifeTimeStatsObjectSchema
}

type MerchantCSStats {
  startDate: Datetime!
  endDate: Datetime!
  lateResponseRate30d: Float
  customerSatisfactionScore: Float
  averageTicketResponseTime: Timedelta
}

type MerchantCountryDetailsSchema {
  detectedDomicileCountry: Country
  detectedShipFromCountry: Country
  domicileDetectionReason: String
  domicileDetectionFactors: [DetectionFactor!]!
}

enum MerchantCountryDetectionFactorType {
  PHONE_COUNTRY
  SHIP_FROM_OVERRIDE
  PAYMENT_PROVIDER
  BD_REP_COUNTRY
  GEOIP_LOGIN
  MERCHANT_GROUP
  STORE_ADDRESS
  ERP_ENROLLMENT
  WISHPOST_LINKED
  BUSINESS_ADDRESS
  DOMICILE_OVERRIDE
  BOUND_WISHPOST
  EMAIL_PROVIDER
  ORDER_SHIPPING_PROVIDER
  ORDER_TRACKING_ORIGIN
  VERIFIED_PROFILE
}

type MerchantDeliveryStats {
  startDate: Datetime!
  endDate: Datetime!
  timeToDoor: Timedelta
}

type MerchantFBWSchema {
  availableWarehouses: [FBWWarehouseSchema!]
  availableWarehousesForShippingPlanSubmission: [FBWWarehouseSchema!]
}

enum MerchantFacingPayoutState {
  GENERATING
  SUCCESS
  RELEASED
  NA
  DELAYED
  WITHHOLD
  REISSUED
  FAILED
  RESUBMITTED
  CANCELLED
  IN_PROGRESS
  PENDING
}

enum MerchantFeedJobStatus {
  EXCEPTION
  NEW_AND_EMAILED
  FINISHED
  RUNNING
  FINISHED_AND_EMAILED
  CANCELLED
  NEW
  PENDING
}

type MerchantFileSchema {
  id: ObjectIdType!
  displayFilename: String!
  fileUrl: String!
}

enum MerchantFinalSaleAction {
  ENABLE
  DISABLE
}

type MerchantFinalSaleMutations {
  updateMerchantFinalSale(input: MerchantFinalSaleUpdateInput): UpdateMerchantFinalSale
}

input MerchantFinalSaleUpdateInput {
  action: MerchantFinalSaleAction!
  merchantId: ObjectIdType!
  category: FinalSaleCategory!
}

enum MerchantFineExemptionInfoLinkType {
  CATEGORY
  ARTICLE
  FULL_LINK
}

type MerchantFineSchema {
  id: ObjectIdType!
  isExempt: Boolean!
  exemptInfoLink: String
  exemptLinkType: MerchantFineExemptionInfoLinkType
}

type MerchantFulfillmentExtensionSchema {
  extensionDays: Int
  extensionDeadlineDate: Datetime
  surveyOptions: [FulfillmentExtensionSurveyOptionSchema!]!
  isActive: Boolean!
  canEdit: Boolean!
}

enum MerchantGamingReviewFieldTicketType {
  lastSourceUpsertDate
}

type MerchantGamingReviewMutations {
  updateMerchantGamingReviewTicket(input: MerchantGamingReviewUpdateInput): UpdateMerchantGamingReviewTicket
  manualCreateUpload(input: MerchantGamingReviewTicketManualCreationUploadInput!): MerchantGamingReviewTicketManualCreationUpload
  manualCreate(input: MerchantGamingReviewTicketManualCreationUploadInput!): MerchantGamingReviewTicketManualCreation
}

enum MerchantGamingReviewPolicyTierType {
  SUSPICIOUS_TIER
  HOME_TIER
  PROBATION_TIER
}

enum MerchantGamingReviewSourceType {
  POLICY
  GATE_KEEPER
  WISH_ADMIN
}

enum MerchantGamingReviewState {
  AWAITING_ADMIN
  CONFIRMED
  REJECTED
  ESCALATED
  CLOSED
}

enum MerchantGamingReviewTicketAction {
  COMMENT
  CLAIM
  ESCALATE
  UPDATE_POLICY_TIER
  UNCLAIM
  CLOSE
}

type MerchantGamingReviewTicketCommentSchema {
  senderId: ObjectIdType
  senderName: String
  message: String!
  date: Datetime!
}

type MerchantGamingReviewTicketManualCreation {
  ok: Boolean!
  logs: String
}

type MerchantGamingReviewTicketManualCreationSchema {
  merchantId: ObjectIdType!
  reason: String!
}

type MerchantGamingReviewTicketManualCreationUpload {
  ok: Boolean!
  logs: String
  updateList: [MerchantGamingReviewTicketManualCreationSchema!]!
}

input MerchantGamingReviewTicketManualCreationUploadInput {
  fileUrl: String!
}

type MerchantGamingReviewTicketSchema {
  merchant: MerchantSchema
  id: ObjectIdType!
  merchantGamingReviewPolicyTier: MerchantGamingReviewPolicyTierType
  merchantId: ObjectIdType!
  sources: [MerchantGamingReviewTicketSourceSchema!]!
  state: MerchantGamingReviewState!
  lastSourceUpsertDate: Datetime!
  isOpen: Boolean!
  isClosed: Boolean!
  isClaimed: Boolean!
  claimedAdminId: ObjectIdType
  claimedDate: Datetime
  decisionAdminId: ObjectIdType
  decisionDate: Datetime
  infractionIds: [ObjectIdType!]
  comments: [MerchantGamingReviewTicketCommentSchema!]
  claimedAdminUser: UserSchema
}

input MerchantGamingReviewTicketSort {
  field: MerchantGamingReviewFieldTicketType!
  order: SortOrderType!
}

type MerchantGamingReviewTicketSourceSchema {
  triggerDate: Datetime!
  sourceType: MerchantGamingReviewSourceType!
  reason: String
  creator: UserSchema
}

input MerchantGamingReviewUpdateInput {
  action: MerchantGamingReviewTicketAction!
  id: ObjectIdType!
  policyTier: MerchantGamingReviewPolicyTierType
  message: String
  infractionIds: String
}

type MerchantInviteInfo {
  valid: Boolean!
  email: String
  promotionRevShare: Float
  promotionPeriodInDays: Int
  useMarketingTransactionBonus: Boolean
}

type MerchantMobile {
  minimumAppVersion(platform: MobilePlatformType!, currentVersion: String!): String!
}

type MerchantMutation {
  shippingSetting: ShippingSettingMutations!
  merchantTermsAgreed: MerchantTermsAgreedMutations
  changeVacationMode(input: ChangeVacationModeInput!): ChangeVacationModeMutation!
  changeDisplayName(input: ChangeDisplayNameInput!): ChangeDisplayNameMutation!
  merchantSenderAddress: MerchantSenderAddressMutations!
  changePreferredUnits(input: ChangePreferredUnitsInput!): ChangePreferredUnitsMutation!
  euVatTax: EUVATTaxMutations
  taxSettings: TaxSettingsMutations!
  warehouseSettings: MerchantWarehouseMutations
}

enum MerchantOnboardingStep {
  DEP_STORE_REGISTRATION_FEE
  ADD_PRODUCT
  CONFIRM_TOS
  CONTACT_INFO
  CONFIRM_EMAIL
  ENABLE_2FA
  BLUE_SET_STORE_PHOTO
  STORE_IDENTIFICATION_DEPRECATED
  BLUE_LIST_FIRST_PRODUCT
  CONFIRM_PHONE
  PAYMENT_INFO
  STORE_IDENTIFICATION
  BLUE_DOWNLOAD_APP
  BLUE_SET_PAYMENT_INFO
  LEARN_ABOUT_WE
  EXTRA_INFO
  STORE_INFO
  SETUP_SHIPPING
  RESELLER_AGREEMENT
  BLUE_SET_STORE_HOURS
}

type MerchantOneoffPaymentSchema {
  id: ObjectIdType!
  creationTime: Datetime!
  merchantId: ObjectIdType!
  amount(localized: Boolean): CurrencyValue!
  eligibleTime: Datetime!
  paymentId: ObjectIdType
  type: OneoffPaymentType!
  status: OneoffPaymentStatus!
  orderId: ObjectIdType
  disputeId: ObjectIdType
}

enum MerchantPaymentCollectorType {
  INDIVIDUAL
  BUSINESS
}

enum MerchantPaymentCycle {
  WEEKLY
  NORMAL
}

type MerchantPaymentDetail {
  accountBalance(currency: PaymentCurrencyCode!, balanceType: AccountBalanceType!): CurrencyValue
  messages: [MerchantPaymentWarningMessage!]
  lineItems(currency: PaymentCurrencyCode!, balanceType: AccountBalanceType!, offset: Int!, limit: Int!, startDate: DatetimeInput, endDate: DatetimeInput, query: String, searchType: LineItemSearchType, lineItemTypes: [LineItemType!]): [MerchantPaymentLineItem!]
  lineItemCount(currency: PaymentCurrencyCode!, balanceType: AccountBalanceType!, startDate: DatetimeInput, endDate: DatetimeInput, query: String, searchType: LineItemSearchType, lineItemTypes: [LineItemType!]): Int
  lineItemTypes: [MerchantPaymentLineItemType!]
  lineItemSearchTypes: [LineItemSearchType!]
  payoutHistory(offset: Int!, limit: Int!, startDate: DatetimeInput, endDate: DatetimeInput, provider: PayoutPaymentProviderType): [MerchantPayoutHistory!]
  payoutHistoryCount(startDate: DatetimeInput, endDate: DatetimeInput, provider: PayoutPaymentProviderType): Int
  chargeTransaction(id: ObjectIdType!): ChargeTransactionInfo
  connectedChargeProviders: [ChargePaymentProviderType!]
  pendingChargeProviders: [ChargePaymentProviderType!]
  canEditPaymentInfo: Boolean!
  currentProvider: PaymentProvider
  allowedProviders: [PaymentProvider!]!
  nextPayoutTime: Datetime
  hasPayoutInProgress: Boolean!
  hasActiveLoan: Boolean!
  hasPaymentInfoNotice: Boolean!
  releasePayoutRequest: ReleasePayoutRequest
  personalInfo: PaymentPersonalInfo
  businessInfo: PaymentBusinessInfo
  infoCollectedForPaymentProvider: InfoCollectedForPaymentProvider
  paymentCycle: MerchantPaymentCycle!
  fullyEnrolledInPaymentCycle: Boolean!
}

type MerchantPaymentLineItem {
  createdTime: Datetime!
  description: String!
  creditAmount: CurrencyValue
  debitAmount: CurrencyValue
  type: LineItemType!
}

enum MerchantPaymentLineItemType {
  POLICY_VIOLATION_FINE
  MISLEADING_VARIATION_FINE
  B2B_SALE_FEE
  WISH_PARCEL_SERVICE_ADJUST_PAYMENT
  INITIAL_WISHPOST_SHIPPING_REFUND_OFFSET
  REV_SHARE_ADJUST_PAYMENT
  WISH_EXPRESS_REBATE_REVERSE
  DISPUTE_APPROVED
  WITHHELD_RELEASED
  LOGISTIC_FEE
  EARLY_PAYMENT
  OVERPAY_PAYMENT_AMOUNT
  QUALITY_REFUND_FINE
  MERCHANT_HARASSMENT
  WISHPOST_ADJUSTMENT_PAYMENT
  WITHHOLD_FUND_FINE
  EXTERNAL_BOOST_CPA_FEE
  UNDERPAY_PAYMENT_AMOUNT
  STRATEGIC_ORDER_REBATE
  PAID_PLACEMENT_IMPRESSION_FEE
  LCL_FBW_FEE
  EARLY_PAYMENT_CANCELLATION
  DECEPTIVE_FULFILLMENT_FINE
  STORE_PAYMENT_CANCELLATION
  ESTIMATED_WISHPOST_SHIPPING
  PAYMENT
  MARKETING_REBATE
  UNFULFILLED_ORDER_FINE
  PRODUCT_UNTAGGED_MISLEADING
  FBW_PAYMENT
  CHINA_POST_SUBSIDY_REVERSE
  CANCEL_WITHHOLD_PAYMENT
  COUNTERFEIT_REFUND
  COVID19_SUBSIDY_REVERSE
  COLLECTIONS_BOOST_CAMPAIGN_FEE
  RETURN_LABEL_FEE
  ONEOFF_FINE
  WISHPOST_ADJUSTMENT_DEDUCTION
  FINE_REVERSED
  PRODUCT_REBATE
  DOUBLE_DEDUCTION_BOOK_KEEPER
  LATE_CONFIRMED_FULFILLMENT_FINE
  FAKE_TRACKING_FINE
  REFUNDED
  PRODUCT_LISTING_FEE
  CONSOLIDATE_MP_PAYMENT
  OTHER_DEDUCTION
  REGISTRATION_REFUND
  EARLY_PAYMENT_REIMBURSEMENT_FEE
  ONEOFF
  EXTERNAL_BOOST_FEE
  MARKETING_REBATE_REVERSE
  MERCHANT_INCENTIVE
  PROMOTED_PRODUCT_DISABLE_FINE
  INFRACTION_FINE
  MERCHANT_INCENTIVE_REVERSE
  RETROACTIVE_REFUND_FOR_LOW_RATED_PRODUCT
  PRODUCT_BOOST_BALANCE_REFUND
  NEW_REFUNDED
  SE_CASH_BACK
  LEGAL_SETTLEMENT_FINE
  FBW_FEE
  MERCHANT_CANCELLATION_FINE
  EARLY_PAYMENT_DEDUCTION
  PROMOTION_FEE
  LEGAL_SETTLEMENT_RESERVED_PENALTY
  COVID19_SUBSIDY
  STORE_PAYMENT_DEDUCTION
  SE_CASH_BACK_REVERSE
  RETROACTIVE_REFUND_FOR_PROBLEM_PRODUCT
  FAKE_RATING_FINE
  ESTIMATED_WISHPOST_SHIPPING_REFUND
  INITIAL_WISHPOST_SHIPPING_REFUND
  CN_ORDER_NOT_SHIP_WITH_WISHPOST_FINE
  INITIAL_WISHPOST_SHIPPING
  CHINA_POST_SUBSIDY
  STORE_PAYMENT
  WISH_EXPRESS_REBATE
  SHIPPED
  WITHHOLD_PAYMENT
  INITIAL_WISHPOST_SHIPPING_OFFSET
  LEGAL_SETTLEMENT_PAID_PENALTY
  WISH_PARCEL_SERVICE_ADJUST_FEE
  CONSOLIDATE_MP_FINE
  UNCONFIRMED_CARRIER_FINE
  WISH_PARCEL_SERVICE_FEE
  PAID_PLACEMENT_ENROLLMENT_FEE
  STRATEGIC_ORDER_REBATE_REVERSE
}

type MerchantPaymentLinkInfo {
  text: String!
  url: String!
}

type MerchantPaymentWarningMessage {
  title: String
  text: String
  sentiment: SentimentType
  link: MerchantPaymentLinkInfo
}

type MerchantPaymentsMutation {
  updatePaypalSetting(input: UpdatePayPalSettingInput!): UpdatePayPalSettingMutation
  updatePayoneerSetting(input: UpdatePayoneerSettingInput!): UpdatePayoneerSettingMutation
  payoneerSignup: PayoneerSignupMutation
  resetPayment(input: ResetReleasePaymentRequestInput!): ResetReleasePaymentRequestMutation
  createChargeTransaction(input: CreateChargeTransactionInput!): CreateChargeTransactionMutation
  cancelChargeTransaction(input: CancelChargeTransactionInput!): CancelChargeTransactionMutation
  charge(input: ChargeInput!): ChargeMutation
}

type MerchantPaymentsService {
  paymentInfo(merchantId: ObjectIdType!): MerchantPaymentDetail
  currentMerchant: MerchantPaymentDetail
}

type MerchantPayoutHistory {
  id: String!
  payoutDate: Datetime!
  payoutProvider: PaymentProvider!
  merchantFacingState: MerchantFacingPayoutState!
  currency: PaymentCurrencyCode!
  totalAmount: CurrencyValue!
  description: MerchantPayoutHistoryDescription
  rebateAmount: CurrencyValue
}

type MerchantPayoutHistoryDescription {
  title: String
  text: String
}

type MerchantPolicyTierFactorSettings {
  factor: PolicyFactor!
  exemptions: [MerchantPriviledge]!
}

type MerchantPolicyTierSchema {
  tier: MerchantTier!
  policyFactorSettings: [MerchantPolicyTierFactorSettings]!
}

type MerchantPreorder {
  isPreorderMerchant: Boolean!
  productsAreSyncing: Boolean!
}

enum MerchantPriviledge {
  WAIVE_BAN_MERCHANT
  WAIVE_ISSUE_FINE
  WAIVE_PRODUCT_TAKEDOWN
  WAIVE_PAYMENT_WITHHOLD
  WAIVE_CREATE_WARNING
  WAIVE_IMPRESSION_SUSPENSION
}

type MerchantRatingStats {
  startDate: Datetime!
  endDate: Datetime!
  averageProductRating: Float
}

type MerchantRefundStats {
  startDate: Datetime!
  endDate: Datetime!
  refundRate: Float
}

type MerchantSchema {
  id: ObjectIdType!
  accountManager: UserSchema
  originCountry: Country
  suspectedCountry: Country
  restrictedProductDefaultCountry: Country
  canAccessRestrictedProduct: Boolean!
  canAccessFinalSale: Boolean!
  restrictedProductRegions: [RestrictedProductRegion!]
  merchantPolicyTier: MerchantPolicyTierSchema
  displayName: String!
  onVacationMode: Boolean!
  vacation: VacationSchema!
  signupTime: Datetime!
  revShare: Float!
  canManageShipping: Boolean!
  shippingSettings(enabled: Boolean): [ShippingSettingsSchema!]
  merchantTermsAgreed: MerchantTermsAgreedSchema
  useShopifyShippingRate: Boolean!
  standardWarehouseId: ObjectIdType!
  primaryCurrency: PaymentCurrencyCode!
  usdConversionRate: Float!
  hasSetupPaymentInfo: Boolean!
  storeStats: MerchantStats!
  shopify: ShopifySchema
  state: CommerceMerchantState!
  canUseVacationMode: Boolean!
  inEuComplianceScope: Boolean!
  hasEuComplianceImpressionBlock: Boolean!
  countryOfDomicile: Country
  businessName: String
  businessAddress: AddressSchema
  countryDetails: MerchantCountryDetailsSchema
  daysToFulfill: Int!
  preorder: MerchantPreorder!
  branding: BrandingSchema!
  isMerchantPlus: Boolean!
  priceDropEnabled: Boolean!
  marketing: MarketingMerchantPropertySchema!
  shippingOrigins: [ShippingOriginSettings!]!
  tax: MerchantTaxSchema
  isStoreMerchant: Boolean!
  isPayable: Boolean!
  isCnMerchant: Boolean!
  maxDeliveryDays: Int!
  isUnityEnabled: Boolean!
  signupSource: SignupSource
  proofOfIdentity: [MerchantFileSchema!]
  sellerVerification: SellerVerificationSchema!
  senderAddresses: [MerchantSenderAddressSchema!]!
  warehouses(id: String): [MerchantWarehouseSchema!]
  fulfilledByWish: MerchantFBWSchema!
  fulfillmentExtension: MerchantFulfillmentExtensionSchema!
  wps: MerchantWPSSchema
  preferredWeightUnit: WeightUnit
  preferredLengthUnit: LengthUnit
  isWhiteGlove: Boolean!
  canAccessEarlyPayment: Boolean!
  canAccessPriceDrop: Boolean!
  hasActivePriceDropOffers: Boolean!
  hasReducedRevShare: Boolean!
  lead: UserSchema!
  users(includeLead: Boolean = true): [UserSchema!]!
  standing: MerchantStandingCode
  exp: ExpSchema!
  euVatTax: EUVATTaxSchema
  isBba: Boolean
  bypassProductRestrictions: [TaggingViolationSubcategory!]
  productListingPlan: ProductListingPlanHub
  isWishBlueSelfInventory: Boolean!
}

type MerchantSenderAddressMutations {
  upsertMerchantSenderAddress(input: UpsertMerchantSenderAddressInput!): UpsertMerchantSenderAddressMutation!
  deleteMerchantSenderAddress(input: DeleteMerchantSenderAddressInput!): DeleteMerchantSenderAddressMutation!
}

type MerchantSenderAddressSchema {
  id: ObjectIdType!
  warehouseName: String!
  address: AddressSchema!
  isDefault: Boolean!
}

type MerchantServiceSchema {
  merchant(id: ObjectIdType, userId: ObjectIdType): MerchantSchema
  mainUser(merchantId: ObjectIdType!): UserSchema
  vipoutlet: MerchantSchema
  merchants(offset: Int = 0, limit: Int = 20, sort: MerchantSort, states: [CommerceMerchantState!], name: String, id: ObjectIdType, bdRep: ObjectIdType, isMerchantPlus: Boolean): [MerchantSchema!]
}

input MerchantSignupInput {
  emailAddress: String!
  storeName: String!
  password: String!
  source: MerchantSignupSourceType
  bdSignupCode: String
  salesforceLeadId: String
  salesforceCmCat: String
  googleClickId: String
  googleAdsGroupId: String
  landingSource: String
  landingSourceSubpage: String
  invite: String
  referralId: String
  utmSource: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  deviceId: String
  deviceName: String
  paypalMerchantId: String
  greenChannelCode: String
  merchantInvitationCode: String
  captchaToken: String
  captchaCode: String
  existingStoreUrl: String
}

type MerchantSignupMutation {
  ok: Boolean!
  message: String
  shouldRedirectCnMerchant: Boolean
  userId: ObjectIdType
  session: String
}

input MerchantSignupSendPhoneVerificationInput {
  newPhoneNumber: String!
}

type MerchantSignupSendPhoneVerificationMutation {
  message: String
  ok: Boolean!
}

enum MerchantSignupSourceType {
  SIGNUP_GREEN_CHANNEL
  SIGNUP_V4
  SIGNUP_V5
  SIGNUP_V3
  SIGNUP_MOBILE
  SIGNUP_MERCHANT_PLUS
  SIGNUP_EXPRESS
}

input MerchantSort {
  field: MerchantSortFieldType!
  order: SortOrderType!
}

enum MerchantSortFieldType {
  MERCHANT_ID
  NAME
}

enum MerchantStandingCode {
  ACTIVE
  PLATINUM
  SILVER
  GOLD
  UNDER_REVIEW
}

type MerchantStats {
  totalSold: Int!
  totalImpressions: Int!
  totalWishes: Int!
  totalGmv: CurrencyValue!
  lastThirtyDayGmv: CurrencyValue!
  updateTime: Datetime
  marketing: MarketingStats!
  totals(days: Int = 7, coreMetricsOnly: Boolean = false): MerchantTotalStats!
  daily(days: Int = 7, coreMetricsOnly: Boolean = false): [MerchantTotalStats!]!
  tracking: MerchantTrackingStats
  delivery: MerchantDeliveryStats
  refunds: MerchantRefundStats
  rating: MerchantRatingStats
  cs: MerchantCSStats
}

type MerchantTaxSchema {
  settings: [TaxSetting!]
  hasConfiguredTaxesBefore: Boolean!
  enrollableCountries: [Country!]!
}

enum MerchantTermsActionEnum {
  DISAGREE
  AGREE
  VIEW
}

type MerchantTermsAgreedMutations {
  acceptTermsOfService(input: AcceptTermsOfServiceInput!): AcceptTermsOfService!
  acceptEuComplianceTermsOfService: AcceptEUComplianceTermsOfService!
  viewTermsOfService: ViewTermsOfService!
  actOnWpsTermsOfService(input: MerchantWPSTermsOfServiceInput!): MerchantWPSTermsOfServiceMutation!
}

type MerchantTermsAgreedSchema {
  agreedToTermsOfService: Boolean!
  agreedToRealNameAuth: Boolean
  agreedToEuComplianceTos: Boolean
  wpsTermsOfService: MerchantWPSTermsOfServiceSchema
}

type MerchantTermsOfServiceAgreementSchema {
  state: MerchantTosAgreementStateType
}

type MerchantTermsOfServiceSchema {
  latestVersion: Int!
}

enum MerchantTier {
  WISH_STORE_TRUST
  SUSPICIOUS
  NON_CN_ERP_REFERRED
  CN_BRAND_OWNER
  US_SHOPIFY_REFERRED
  LATAM_BD_BRAND_OWNER
  CN_DEFAULT
  EU_DEFAULT
  LATAM_BD_REFERRED
  CN_BD_REFERRED
  NON_CN_DEFAULT
  US_CONTROL
  EU_BD_REFERRED
  PHANTOM
  PROMOTED_WHITELIST_FINE_EXEMPTION
  US_DELIVERR_REFERRED
  US_BD_REFERRED
  NON_CN_BRAND_OWNER
  US_PAYPAL_REFERRED
  CPG
  CN_ERP_REFERRED
  US_BRAND_OWNER
  NOT_ENROLL
  SELF_INVENTORY
  US_DEFAULT
  NON_CN_BD_REFERRED
  EU_BRAND_OWNER
  PROBATION
}

enum MerchantTodoItemSentiment {
  INFO
  POSITIVE
  WARNING
  NEGATIVE
}

enum MerchantTodoItemType {
  SETUP_TAX_INFO
  REJECTED_VIDEOS
  REVIEW_CURRENCY
  EU_PRODUCT_COMPLIANCE
  ENABLE_2FA
  RESELLER_AGREEMENT
  PRICE_DROP_NEW_OFFERS
  REAUTHENTICATION_ATO
  ADD_PAYMENT
  COMPLETE_EU_VAT_TAX_QUESTIONNAIRE
  ADD_WAREHOUSE
  BIND_WECHAT
  WE_REAPPLICATION_ELIGIBLE
  PRICE_DROP_VIEW_ONGOING_CAMPAIGNS
  TAX_VERIFICATION_FAILED
  UPLOAD_NEW_PRODUCTS
  ENROLL_PRODUCTS_IN_RETURNS
  PRE_ORDER_UNFULFILLED_ORDER
  GBP_CURRENCY_CODE_MIGRATION
  APPLY_RESTRICTED_PRODUCT_REQUEST
  REAUTHENTICATION_REGINFO
  EUR_CURRENCY_CODE_MIGRATION
  JOIN_WISH_EXPRESS
  BRL_CURRENCY_CODE_MIGRATION
  CURRENCY_CODE_MIGRATION
  REAUTHENTICATION_SELLER_PROFILE
  NON_CN_UPLOAD_NEW_PRODUCTS
  REAUTHENTICATION_KYC_PROFILE
  VERIFY_PRODUCT_BRANDS
  PRICE_DROP_UNCOMPETITIVE_CAMPAIGN
  ACCEPT_TERMS_OF_SERVICE
}

enum MerchantTosAgreementStateType {
  DISAGREED
  AGREED
  IMPLICIT_AGREED
}

type MerchantTotalStats {
  startDate: Datetime!
  endDate: Datetime!
  gmv: CurrencyValue!
  impressions: BigInt!
  pageViews: BigInt!
  addToCarts: Int!
  orders: Int!
}

type MerchantTrackingStats {
  startDate: Datetime!
  endDate: Datetime!
  validTrackingRate: Float
  lateConfirmedFulfillmentRate: Float
  averageFulfillmentTime: Timedelta
}

type MerchantUserGateAllowAll {
  ok: Boolean
}

input MerchantUserGateAllowAllInput {
  name: String!
}

type MerchantUserGateAllowMerchants {
  ok: Boolean
}

input MerchantUserGateAllowMerchantsInput {
  name: String!
  merchantIds: [ObjectIdType!]!
}

type MerchantUserGateAllowUsers {
  ok: Boolean
}

input MerchantUserGateAllowUsersInput {
  name: String!
  userIds: [ObjectIdType!]!
}

type MerchantUserGateMutations {
  allowUsers(input: MerchantUserGateAllowUsersInput!): MerchantUserGateAllowUsers
  allowMerchants(input: MerchantUserGateAllowMerchantsInput!): MerchantUserGateAllowMerchants
  allowAll(input: MerchantUserGateAllowAllInput!): MerchantUserGateAllowAll
}

type MerchantWPSSchema {
  enabledDestinationCountries: [Country!]!
  enabledOriginCountries: [Country!]!
}

input MerchantWPSTermsOfServiceInput {
  merchantAction: MerchantTermsActionEnum!
  tos: WPSTermsTypeEnum!
}

type MerchantWPSTermsOfServiceMutation {
  ok: Boolean!
}

type MerchantWPSTermsOfServiceSchema {
  viewedWpsTos: Boolean!
  viewedUpsTos: Boolean!
  agreedWpsTos: Boolean!
  agreedUpsTos: Boolean!
}

type MerchantWarehouseMutations {
  upsertWarehouse(input: UpsertWarehouseInput!): UpsertMerchantWarehouseMutation
  deleteWarehouse(input: DeleteMerchantWarehouseInput!): DeleteMerchantWarehouseMutation
  submitWarehouseVerificationRequest(input: SubmitWarehouseVerificationRequestInput!): SubmitWarehouseVerificationRequestMutation
}

type MerchantWarehouseSchema {
  id: String!
  unitId: String!
  address: AddressSchema
  weekStats(offset: Int = 0, limit: Int = 20, sort: MerchantWarehouseWeekStatsSort, startDate: DatetimeInput, endDate: DatetimeInput): [MerchantWarehouseWeekStatsSchema!]
  weekStatsCount(startDate: DatetimeInput, endDate: DatetimeInput): Int!
  enabledCountries: [Country!]!
  verificationState: WarehouseVerificationState
  verificationRequest: WarehouseVerificationRequestSchema
}

type MerchantWarehouseWeekStatsSchema {
  lateDeliveryRate(orderPolicyType: OrderPolicyType = 1): Float
  maxExpectedGmv: CurrencyValue!
  expectedDeliveries: Int!
  lateDeliveries: Int!
  startDate: Datetime!
  endDate: Datetime!
  isLateDeliveryRateHigh(orderPolicyType: OrderPolicyType = 1): Boolean
  isLateDeliveryRateAtRisk(orderPolicyType: OrderPolicyType = 1): Boolean
  merchantId: ObjectIdType!
}

input MerchantWarehouseWeekStatsSort {
  field: MerchantWarehouseWeekStatsSortFieldType!
  order: SortOrderType!
}

enum MerchantWarehouseWeekStatsSortFieldType {
  START_DATE
}

enum MerchantWarningAuditAction {
  CLAIM
  REVERT
  CONFIRM
}

enum MerchantWarningAuditRevertReason {
  POLICY_UPDATE
  INCORRECTED_DATA
  AGENT_ERROR
}

enum MerchantWarningAuditStatus {
  REQUIRE_AUDIT
  CONFIRMED
  REVERTED
}

type MerchantWarningMutations {
  updateAuditQueueWarning(input: UpdateAuditQueueWarningInput): UpdateAuditQueueWarning
}

enum MerchantWarningProofDisputeStatus {
  DISPUTING
  DISPUTE_FAILED
  NOT_DISPUTED
  DISPUTE_SUCCESS
}

type MerchantWarningProofSchema {
  id: ObjectIdType!
  type: MerchantWarningProofType!
  disputeStatus: MerchantWarningProofDisputeStatus!
  product: ProductSchema
}

enum MerchantWarningProofType {
  MERCHANT
  PRODUCT
  VARIATION
  PRODUCT_RATING
  TICKET
  ORDER
}

enum MerchantWarningReason {
  INVALID_TRACKING_NUMBERS
  HIGH_CHARGEBACK_RATIO
  REQUEST_MONEY
  PRODUCT_HIGH_REFUND_RATIO
  VIOLATE_TS_POLICY
  DUPLICATE_PRODUCTS
  INVALID_EU_RESPONSIBLE_PERSON
  FAKE_RATING
  DEP_BAIT_VARIABLE_PRICING
  DUPLICATE_ACCOUNTS
  DISINGENUOUS_CUSTOMER_SERVICE
  REQUEST_USER_EMAIL
  EXTREMELY_HIGH_PRICE_SPREAD
  HIGH_IP_INFRINGEMENT
  HIGH_GMV_FROM_GAMING_BAN
  HIGH_CHARGEBACK_AND_FRAUD_REFUND_RATIO
  WISHPOST_NEGATIVE_BALANCE
  CN_PROHIBITED_PRODUCTS
  PRODUCT_LOW_RATING
  FINE_UPDATE_TO_COUNTERFEIT
  RELATED_ACCOUNT_IS_BANNED
  VIOLATE_POLICY
  DEP_FINE_DISABLE_PROMOTED_PRODUCT_FOR_COUNTRY
  HIGH_GMV_FROM_GAMING_FREEZE
  WISH_EXPRESS_POLICY_MERCHANT
  EMPTY_PACKAGES
  VIOLATION_OF_POLICY_TIER
  HIGH_GMV_FROM_GAMING_AUDIT
  CS_LATE_RESPONSE_RATE
  LEGAL_TRO_TAKEDOWN
  WAREHOUSE_FULFILLMENT_POLICY_VIOLATION
  REPEAT_IP_INFRINGEMENT_ON_BRAND_OWNER
  MERCHANT_CONTACT_INFO_INVALID
  HIGH_AUTO_REFUND
  MERCHANT_HIGH_CANCEL_ORDER_RATE
  WISH_EXPRESS_POLICY_PRODUCT
  BAD_CUSTOMER_SERVICE
  PRODUCT_HIGH_QUALITY_REFUND_RATIO
  MISLEADING_VARIATION
  FINE_FOR_COUNTERFEIT_GOODS
  MERCHANT_HIGH_REFUND_EAT_COST
  PRODUCT_GEOBLOCK
  PRODUCT_IS_INAPPROPRIATE
  BRANDED_PRODUCT_GEOBLOCK
  DEP_FINE_DISABLE_PROMOTED_PRODUCT
  UNCONFIRMED_TRACKING_NUMBERS
  FINE_WISH_EXPRESS_POLICY_VIOLATION
  PRODUCT_HIGH_REFUND_RATIO_NO_REMOVE
  RESPOND_TO_ADMIN
  WISH_EXPRESS_POLICY_VIOLATION
  PENALTY_FOR_AUTO_REFUND
  FINAL_JUDGEMENT_ORDER
  CONFIRMED_DELIVERY_POLICY
  STRIKE_BASED_HIGH_RISK_PROHIBITED
  HIGH_REFUND_RATIO
  TAKE_USER_OUTSIDE_WISH
  POLICY_TIER_DEMOTION
  MERCHANT_HIGH_QUALITY_REFUND_RATIO
  REPEAT_PRODUCT_SWAPPING
  WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION
  HIGH_GMV_FROM_MISLEADING_PRODUCTS
  PRODUCT_HIGH_CANCEL_ORDER_RATE
  COUNTERFEIT_GOODS
  CS_LOW_CSAT_SCORE
  LATE_FULFILLMENT_RATE
  FINE_PRODUCT_SWAPPED
  DECEPTIVE_FULFILLMENT
  VIOLATION_OF_TERMS
  STORE_VALIDATION_INCOMPLETE
  TAX_SETTING_NOT_UPDATED
  MERCHANT_HARASSMENT
  REUPLOADING_COUNTERFEITS
  PRODUCT_LOW_RATING_NO_REMOVE
  SUSPECTED_FRAUD
}

type MerchantWarningSchema {
  id: ObjectIdType!
  fineAmount(localized: Boolean): CurrencyValue
  reason: MerchantWarningReason!
  adminReasonText: String
  merchantReasonText: String
  lastUpdate: Datetime!
  createdTime: Datetime!
  proofs: [MerchantWarningProofSchema!]!
  fine: MerchantFineSchema
  counterfeitBrand: BrandSchema
  merchant: MerchantSchema
  product: ProductSchema
  productGmvAtAudit: CurrencyValue
  auditStatus: MerchantWarningAuditStatus
}

input MerchantWarningSort {
  field: MerchantWarningSortFieldType!
  order: SortOrderType!
}

enum MerchantWarningSortFieldType {
  CREATED_TIME
  PRODUCT_GMV_AT_AUDIT
}

enum MerchantWarningState {
  AWAITING_AUTH_TAGGING_HIGH_GMV
  US_BD_REVIEW_PAYMENT
  CN_BD_REVIEW_PAYMENT
  REQUEST_PAYMENT
  AWAITING_ADMIN
  REQUIRES_ADMIN_REVIEW
  AWAITING_ADMIN_BOT
  CLOSED
  CANCELLED
  NEW
  AWAITING_MERCHANT
  AWAITING_AUTH_TAGGING_LOW_GMV
}

enum MobilePlatformType {
  ANDROID
  IOS
}

type ModifyTrackingError {
  orderId: ObjectIdType!
  message: String!
}

input ModifyTrackingOrderInput {
  orderId: ObjectIdType!
  trackingId: String!
  providerId: Int!
  shipNote: String
  originCountryCode: CountryCode!
}

type ModifyTrackingOrders {
  modifyTrackingCount: Int!
  errorMessages: [ModifyTrackingError!]
}

input ModifyWPSTrackingIDInput {
  orderId: ObjectIdType!
  shippingOptionId: String!
  additionalServiceOptions: [WPSAvailableServices!]
}

type ModifyWPSTrackingIDMutation {
  ok: Boolean!
  wpsShipmentId: String
  trackingId: String
  providerId: Int
  errorMessage: String
}

type NotificationsServiceSchema {
  notificationCount(viewed: Boolean): Int!
}

type NotifyPasswordRecoveryMutation {
  error: String
  ok: Boolean!
}

input NotifyPasswordRecoveryMutationInput {
  email: String!
}

scalar ObjectIdType

type OffsiteBoost {
  enabled: Boolean!
  dailyBudget: CurrencyValue!
  maxDailyBudget: CurrencyValue!
  minDailyBudget: CurrencyValue!
  chargingMethod: ExternalBoostChargingMethod!
  statsAvailableDate: Datetime!
}

type OffsiteBoostDailyStats {
  date: Datetime!
  clicks: Int!
  orders: Int!
  gmv: CurrencyValue!
  attributed: ExternalBoostAttributedStats
  spend: CurrencyValue!
}

input OffsiteBoostPropertyInput {
  enabled: Boolean
  dailyBudget: CurrencyInput
}

type OffsiteBoostStats {
  startDate: Datetime!
  endDate: Datetime!
  daily: [OffsiteBoostDailyStats!]!
}

type OnboardingSchema {
  steps(completed: Boolean, requiredForSubmission: Boolean = false): [OnboardingStep!]
  numStepsLeft(requiredForSubmission: Boolean = false): Int!
  numStepsCompleted(requiredForSubmission: Boolean = false): Int!
  numSteps(requiredForSubmission: Boolean = false): Int!
  completed: Boolean!
}

type OnboardingStep {
  name: MerchantOnboardingStep!
  title: String!
  description: String!
  ctaText: String!
  ctaLink: String
  illustration: String
  completed: Boolean!
}

enum OneoffPaymentStatus {
  CANCELLED
  UNPAID
  PAID
}

enum OneoffPaymentType {
  WISHPOST_ADJUSTMENT_PAYMENT
  MERCHANT_INCENTIVE
  EARLY_PAYMENT_REIMBURSEMENT_FEE
  CONSOLIDATE_MP_PAYMENT
  PRODUCT_REBATE
  FINE_REVERSED
  DISPUTE_APPROVED
  FBW_PAYMENT
  PRODUCT_BOOST_BALANCE_REFUND
  REV_SHARE_ADJUSTMENT
  REGISTRATION_REFUND
  ONEOFF
  EARLY_PAYMENT
  SE_CASH_BACK
  STORE_PAYMENT
  PRODUCT_UNTAGGED_MISLEADING
  WISH_PARCEL_SERVICE_ADJUSTMENT
}

type OrderAdvancedLogisticsInfoSchema {
  canUncombine: Boolean!
}

enum OrderBadge {
  WPS_ELIGIBLE
  PREMIUM_SHIPPING_CARRIER_UPGRADE
  LESS_THAN_TRUCK_LOAD
  COUNTRY_BADGE_KR
  NON_COMPLIANT_WISH_EXPRESS
  TRACKING_CANCELLED
  UNIFICATION_INITIATIVE
  PAY_CUSTOMER_VAT_REQUIRED_LEGACY_DE
  OPTIONAL_ADVANCED_LOGISTICS
  EPC_FAST_PAYMENT
  CONFIRMED_DELIVERY_REQUIRED
  COUNTRY_BADGE_BR
  COMBINED
  APLUS_FAST_PAYMENT
  STRATEGIC_COUNTRY_REBATE
  CHINA_POST_SUBSIDY
  PAY_CUSTOMER_VAT_REQUIRED_UK
  SE_CASHBACK
  COUNTRY_BADGE_NO
  ADVANCED_LOGISTICS
  MERCHANT_STANDING_BENEFIT
  EU_VAT
  STRATEGIC_ORDER_REBATE
  FBW
  COUNTRY_BADGE_GB
  WISH_EXPRESS
  PAY_CUSTOMER_VAT_REQUIRED_EU
  TRACKING_CANCELLED_A_PLUS
}

type OrderCSVColumnSchema {
  name: String!
  description: String!
}

enum OrderCarrierTier {
  Tier1
  Tier3
  Tier2
  Tier4
}

type OrderConstants {
  dadaPolicyDaysToConfirmedDelivered: Int
}

type OrderEPCInfoSchema {
  canUncombine: Boolean!
}

type OrderEstimatedShippingTimelineSchema {
  maxShipTime: Datetime!
  maxDeliveryTime: Datetime
}

type OrderFBWDetailsSchema {
  isFbw: Boolean!
  warehouseName: String!
  warehouseId: String!
}

enum OrderHistorySearchType {
  ORDER_ID
  PRODUCT_ID
  TRACKING_NUMBER
  USER_NAME
  DISPUTE_ID
}

input OrderHistorySort {
  field: OrderHistorySortFieldType!
  order: SortOrderType!
}

enum OrderHistorySortFieldType {
  ORDER_TIME
}

enum OrderLimboState {
  LIMBO_AND_ROUTED
  NOT_LIMBO
  LIMBO_AND_CUSTOMER_REFUNDED
  LIMBO_AND_NOT_ROUTED
}

enum OrderLogicalPaymentState {
  TO_BE_PAID
  PENDING_WFP_WITHHOLD
  PENDING_WISHPOST_SHIPPING
  WILL_NOT_BE_PAID
  HAS_BEEN_PAID
  FBW_PAID
  PENDING_CONFIRMED_SHIP
  UNDER_REVIEW
  WITHHELD
}

type OrderNOFulfillSchema {
  isBoundOrder: Boolean!
}

enum OrderOnTimeDeliveryCriteria {
  WISH_EXPRESS
  DADA
}

enum OrderPolicyType {
  WISH_EXPRESS
  WAREHOUSE_FULFILLMENT_POLICY
}

enum OrderRebateCancelType {
  CANCEL_BEFORE_PAYMENT
  CANCEL_AFTER_PAYMENT
  NO_CANCEL
}

type OrderRebateSchema {
  id: ObjectIdType!
  type: OrderRebateType!
  paymentId: ObjectIdType
  refundPaymentId: ObjectIdType
  amount(localized: Boolean): CurrencyValue!
  cancelState: OrderRebateCancelType
}

enum OrderRebateType {
  STRATEGIC_ORDER_REBATE
  CHINA_POST_SUBSITY
  COVID19_SUBSIDY
  MARKETING_REBATE
  WISH_EXPRESS_REBATE
}

type OrderRefundBuyerFraudSubreasonSchema {
  reason: BuyerFraudReasonCategory!
  text: String!
}

enum OrderRefundDeductedStatus {
  DEDUCTED_AFTER_PAYMENT
  DEDUCTED_BEFORE_PAYMENT
  UNDEDUCTED
}

type OrderRefundItemDisputeSchema {
  supportingPolicy: String!
  paymentId: ObjectIdType
  isApproved: Boolean!
}

type OrderRefundItemSchema {
  id: ObjectIdType!
  refundTime: Datetime!
  quantity: Int!
  merchantResponsibleAmount(localized: Boolean, includeWishpostFee: Boolean): CurrencyValue
  merchantResponsibilityRatio: Float!
  reasonInfo: OrderRefundReasonSchema!
  eatCostWarning: MerchantWarningSchema
  dispute: OrderRefundItemDisputeSchema
  isDisputable: Boolean!
  refundTax(localized: Boolean): CurrencyValue
  payment: OrderRefundPaymentSchema!
  note: String
  source: RefundSource!
}

type OrderRefundItemsSummarySchema {
  isPartialAmountRefunded: Boolean!
  refundedQuantity: Int!
  refundedPercentage: Float
}

type OrderRefundPaymentSchema {
  id: ObjectIdType
  time: Datetime
  status: OrderRefundDeductedStatus!
  merchantAmount(localized: Boolean, includeWishpostFee: Boolean): CurrencyValue
}

type OrderRefundReasonSchema {
  reason: RefundReasonCategory!
  text: String
}

type OrderReturnLabelFeeSchema {
  id: ObjectIdType!
  amount(localized: Boolean = true): CurrencyValue!
}

type OrderReturnsSchema {
  canOpenReturnDispute: Boolean!
}

enum OrderRevShareProductCategory {
  HOUSEHOLD
  OTHER
  SEX_TOY
}

type OrderSalesTaxDetailsSchema {
  netTax(remitType: CommerceTransactionTaxRemitType, inMerchantCurrency: Boolean = true, targetCurrency: TaxTargetCurrency = 1): CurrencyValue!
  salesTax(remitType: CommerceTransactionTaxRemitType, inMerchantCurrency: Boolean = true, eventTypes: [CommerceTransactionTaxEventType!] = [1, 3], targetCurrency: TaxTargetCurrency = 1): CurrencyValue!
  refundedTax(remitType: CommerceTransactionTaxRemitType, inMerchantCurrency: Boolean = true, targetCurrency: TaxTargetCurrency = 1): CurrencyValue!
  items(remitType: CommerceTransactionTaxRemitType): [OrderTaxItemSchema!]!
  remitTypes: [CommerceTransactionTaxRemitType!]!
  itemCount: Int!
  authorityCountry: Country
}

type OrderSchema {
  id: ObjectIdType!
  transactionId: ObjectIdType
  merchantId: ObjectIdType!
  orderTime: Datetime
  releasedTime: Datetime
  state: CommerceTransactionState!
  merchantTotal: CurrencyValue!
  totalCost: CurrencyValue!
  priceCost: CurrencyValue!
  hoursLeftToFulfill: Int
  paymentStatus: OrderLogicalPaymentState
  shippingDetails: ShippingDetailsSchema
  variation: VariationSchema
  product: ProductSchema
  productName: String!
  warehouse: MerchantWarehouseSchema
  quantity: Int!
  requiresConfirmedDelivery: Boolean
  availableShippingProviders(originCountryCode: CountryCode!): [ShippingProviderSchema!]
  shippingProviderId: Int
  acceptableShippingOrigins: [Country!]
  shippingOrigin: Country
  shippingOriginAddress: AddressSchema
  tax: OrderTaxSchema
  productId: ObjectIdType!
  skuAtPurchaseTime: String!
  sizeAtPurchaseTime: String
  colorAtPurchaseTime: String
  canRefund: Boolean!
  canEditShippingAddress: Boolean!
  isProcessing: Boolean!
  isWishExpress: Boolean!
  shouldDisplayDeliveryStatus: Boolean!
  isStreamline: Boolean!
  warehouseFulfillmentPolicyInfo: OrderWFPInfoSchema
  specialPrograms: [SpecialOrderProgramSchema!]
  shopifyDetails: OrderShopifyDetailsSchema
  deliveryDeadline: Datetime
  reReleasedTime: Datetime
  trackingCancelledDate: Datetime
  validRefundReasons: [OrderRefundReasonSchema!]!
  isAdvancedLogistics: Boolean!
  isCombinedOrder: Boolean!
  isRemovedFromAdvancedLogistics: Boolean!
  isUnityOrder: Boolean!
  initialWishpostShipping: CurrencyValue
  estimatedWishpostShipping: CurrencyValue
  unityWishpostShipping: CurrencyValue
  wishpostShippingUpdates: [WishPostShippingUpdatesSchema!]!
  shippedDate: Datetime
  hasShipped: Boolean!
  refundedTime: Datetime
  legacyRefundSource: LegacyRefundSource
  isBlueFusion: Boolean!
  isStoreUploaded: Boolean!
  isPickupNow: Boolean!
  merchantPrice(localized: Boolean): CurrencyValue!
  merchantShipping(localized: Boolean): CurrencyValue!
  shippingCost(localized: Boolean): CurrencyValue!
  warehouseId: String
  limboState: OrderLimboState!
  merchantCurrencyAtPurchaseTime: PaymentCurrencyCode!
  customerPaidCurrency: String!
  combinedOrderId: ObjectIdType
  chargeback: Boolean!
  rebates: [OrderRebateSchema!]
  fbwDetails: OrderFBWDetailsSchema
  returnLabelFee: OrderReturnLabelFeeSchema
  returnDetailsId: ObjectIdType
  trackingDispute: TrackingDisputeSchema
  cartPrice: CartPriceDetailSchema
  requiresDeliveredDutyPaid: Boolean!
  inRefundLimbo: Boolean!
  wishExpressExtensionDays: Int!
  isRouted: Boolean!
  isFreeShippingEligible: Boolean!
  routedTo: OrderSchema
  confirmedDelivered: Boolean!
  canModifyTrackingInfo: Boolean!
  wasDeliveredOnTime(criteria: OrderOnTimeDeliveryCriteria): Boolean
  ttd: Int
  ttdBusinessDays: Int
  expectedTtdBusinessDays: Int
  isInIncentiveProgram: Boolean!
  isShippedWithQualifiedDadaCarrier: Boolean!
  isSwapFromAnotherOrder: Boolean!
  wpsFulfillment: WPSFulfillmentInfoSchema
  epc: OrderEPCInfoSchema
  advancedLogistics: OrderAdvancedLogisticsInfoSchema
  returns: OrderReturnsSchema
  supportTicket: CustomerSupportTicket
  ukDetails: OrderUKFulfillSchema
  norwayDetails: OrderNOFulfillSchema
  packageOverviewDocumentUrl: String
  shippingEstimate: OrderShippingEstimate
  canRequestAddressVerification: Boolean!
  canUploadDeliveryConfirmation: Boolean!
  routingOriginalOrderId: ObjectIdType
  canShowCarrierTier: Boolean!
  customerIdentifyInfo: CustomerIdentityInfo
  tracking: OrderTrackingInfoSchema
  penalties: [PenaltySchema!]!
  badges: [OrderBadge!]!
  isNewRefund: Boolean!
  refundItems: [OrderRefundItemSchema!]
  refundItemsSummary: OrderRefundItemsSummarySchema
  client: CommerceTransactionClient
  estimatedShippingTimeline: OrderEstimatedShippingTimelineSchema
  updatedRevShare: Float
  originalRevShare: Float
  oneoffPayment: MerchantOneoffPaymentSchema
  productCategoryDispute: ProductCategoryDisputeSchema
  revShare: RevShareInfoSchema
  counterfeitRefundWarningId: ObjectIdType
  withholdWarningId: ObjectIdType
  withholdReasonText: String
  warehouseShippingType: OrderWarehouseShippingType
  customer: CustomerSchema!
  showAplusShippingAddressTooltip: Boolean!
}

type OrderShippingEstimate {
  minTime: Timedelta
  maxTime: Timedelta
}

type OrderShopifyDetailsSchema {
  shopifyOrderId: String!
}

type OrderTaxItemSchema {
  id: String!
  createdTime: Datetime!
  transactionId: ObjectIdType!
  variationId: ObjectIdType!
  orderId: ObjectIdType!
  refundItemId: ObjectIdType
  taxType: TaxType!
  eventType: CommerceTransactionTaxEventType!
  remitType: CommerceTransactionTaxRemitType!
  isRefund: Boolean!
  isSale: Boolean!
  quantity: Int!
  grossAmount: CurrencyValue!
  taxableAmount: CurrencyValue!
  taxRate: Float!
  taxAmount: CurrencyValue!
  exemptAmount: CurrencyValue
  authority: TaxAuthoritySchema!
  taxableAddress: AddressSchema!
}

type OrderTaxSchema {
  norwayVatNumber: String
  salesTax: OrderSalesTaxDetailsSchema!
  isVatOrder: Boolean
  euVat: EUVATSchema
  isWishReseller: Boolean!
}

type OrderTrackingInfoSchema {
  confirmedFulfillmentDate: Datetime
  deliveredDate: Datetime
  isTrackingConfirmed: Boolean!
  checkpoints: [TrackingCheckpointSchema!]
  carrierTier: OrderCarrierTier
}

type OrderUKFulfillSchema {
  isBoundOrder: Boolean!
}

type OrderWFPInfoSchema {
  deliveryState: WFPOrderDeliveryState!
  wishExpress: WishExpressInfoSchema
}

enum OrderWarehouseShippingType {
  MERCHANT_TTD_13_DAY
  REGULAR
  MERCHANT_TTD_40_DAY
  MERCHANT_TTD_38_DAY
  MERCHANT_TTD_3_DAY
  MERCHANT_TTD_17_DAY
  MERCHANT_TTD_20_DAY
  MERCHANT_TTD_7_DAY
  MERCHANT_TTD_35_DAY
  MERCHANT_TTD_44_DAY
  MERCHANT_TTD_23_DAY
  WISH_EXPRESS_2_DAY
  MERCHANT_TTD_27_DAY
  FBW_V1_WLC
  WISH_EXPRESS
  MERCHANT_TTD_19_DAY
  MERCHANT_TTD_9_DAY
  WISH_BLUE
  MERCHANT_TTD_15_DAY
  MERCHANT_TTD_25_DAY
  MERCHANT_TTD_31_DAY
  FBW_V2_REGULAR
  MERCHANT_TTD_11_DAY
  MERCHANT_TTD_16_DAY
  MERCHANT_TTD_33_DAY
  MERCHANT_TTD_21_DAY
  MERCHANT_TTD_12_DAY
  MERCHANT_TTD_42_DAY
  MERCHANT_TTD_4_DAY
  MERCHANT_TTD_41_DAY
  FBW_V2
  MERCHANT_TTD_45_DAY
  MERCHANT_TTD_37_DAY
  FBW_V1
  MERCHANT_TTD_39_DAY
  MERCHANT_TTD_2_DAY
  MERCHANT_TTD_22_DAY
  MERCHANT_TTD_18_DAY
  MERCHANT_TTD_34_DAY
  WISH_EXPRESS_7_DAY
  FBW_V2_CALCULATED
  MERCHANT_TTD_30_DAY
  MERCHANT_TTD_10_DAY
  FBW_V2_EXPRESS
  MERCHANT_TTD_43_DAY
  MERCHANT_TTD_32_DAY
  MERCHANT_TTD_26_DAY
  MERCHANT_TTD_14_DAY
  WAIT_AND_SAVE
  MERCHANT_TTD_6_DAY
  MERCHANT_TTD_8_DAY
  MERCHANT_TTD_24_DAY
  MERCHANT_TTD_36_DAY
  MERCHANT_TTD_28_DAY
  MERCHANT_TTD_5_DAY
  MERCHANT_TTD_29_DAY
  MERCHANT_TTD_1_DAY
}

type OrdersCsvDownload {
  ok: Boolean!
  errorMessage: String
}

input OrdersCsvDownloadInput {
  query: String
  searchType: OrderHistorySearchType
  offset: Int = 0
  sort: OrderHistorySort
  filter: CSVExportFilterType
  startDate: DatetimeInput!
  endDate: DatetimeInput!
  wishExpressOnly: Boolean = false
}

input OtherCountriesShippingSetting {
  enabled: Boolean!
  price: CurrencyInput!
}

input PackageDimensionsInput {
  weight: WeightInput!
  height: LengthInput
  length: LengthInput
  width: LengthInput
}

type PasswordEvaluation {
  valid: Boolean!
  errorMessage: String
}

type PasswordMutations {
  change(input: ChangePasswordInput!): ChangePasswordMutation
}

type PaymentBusinessInfo {
  name: String!
  businessId: String!
}

enum PaymentCurrencyCode {
  JPY
  USD
  AUD
  CHF
  UAH
  TRY
  CNY
  MXN
  CZK
  BRL
  GBP
  CAD
  SEK
  DKK
  EUR
}

type PaymentPersonalInfo {
  name: String!
  id: String
  phoneNumber: String!
}

type PaymentProvider {
  logo: String!
  name: String!
  type: PayoutPaymentProviderType!
  contactInfo: PaymentProviderContactInfo
}

type PaymentProviderContactInfo {
  email: String!
  phone: String
  website: String
  wechatUsername: String
  qqUserId: String
}

type PayoneerSignupMutation {
  ok: Boolean!
  message: String
  redirectUrl: String
  alreadyRegistered: Boolean
}

enum PayoutPaymentProviderType {
  LIANLIAN
  PAYONEER
  UMPAY_ENTERPRISE
  UMPAY
  BILL
  PAYPAL
  PINGPONG
  PAYPAL_MERCH
  WISHPAY
  UMPAY2
  CARDINFOLINK
  ALLPAY
  PAYECO2
}

type PenaltySchema {
  reason: FineReason!
}

type PermissionSchema {
  id: PermissionType!
  name: String!
  description: String
}

enum PermissionStatusType {
  ASSIGNED
  ASSIGNABLE
  DEFAULT
}

enum PermissionType {
  ADD_PRODUCTS
  COUNTERFEIT_TAG
  CAN_ACCESS_ONEOFF_API_GET_APPROVERS
  CAN_CHECK_EXTERNAL_TRACKING
  SHOW_SHIPPING_PROVIDERS
  CAN_VIEW_ALL_INTERNAL_USERS
  VIEW_TERM_OF_SERVICE_EPC_BILL_HOLD
  REVIEW_ONEOFF_REQ_DISABLE_DYNAMIC_PRICING
  EDIT_TAGGING_PERMISSIONS
  CAN_BE_ASSIGNED_MERCHANT_COUNTRY
  CREATE_ADMIN_ACCOUNT
  REVIEW_ONEOFF_REQ_SET_REV_SHARE
  VIEW_PRODUCTS
  IMAGE_CHANGE_AUDIT_TAG
  CAN_MANAGE_US_BDS
  VIEW_GS_MERCHANTS
  BOOST
  MANAGE_BRAND_PARTNERS
  CREATE_B2B_SALE_FEE
  CAN_REVIEW_CN_PAYMENT_REQUEST
  CAN_ACCESS_ONEOFF_VIEW_ALL_REQUESTS
  UPDATE_LOCAL_TO_LOCAL
  CAN_ACCESS_ONEOFF_API_SAVE
  CREATE_LEGAL_SETTLEMENT_FINE
  CAN_PERFORM_CHARGEBACK_REVIEW
  SEND_SYSTEM_UPDATE_TO_BD
  COUNTERFEIT_TAG_AUDIT_IN_HOUSE
  CREATE_ATO_HOLD
  SHOW_DETAIL_TAGGER_TEST_SPEC
  SHOW_ORDER_PENALTIES
  VIEW_LEGAL_INJUNCTION
  VIEW_HIGH_IP_INFRINGEMENT_HOLD
  VIEW_PAYMENT_HISTORY
  SUPPLY_CHAIN_FINANCE
  CAN_GROUP_MERCHANTS
  PROMO_TAG
  MANAGE_LEGAL_INJUNCTION
  REVIEW_ONEOFF_REQ_ISSUE_PB_CREDITS_TO_SELF_INVENTORY_MERCHANTS
  EDIT_MERCHANT_PERMISSIONS
  CAN_SEND_SMS
  IP_VIOLATION_TAG_RESOLUTION
  MANAGE_TAX_ENROLLMENT
  CREATE_DECEPTIVE_FULFILLMENT_FINE
  CAN_CREATE_WECHAT_OFFICIAL_ACCOUNT_MENU
  CREATE_ADMIN
  CAN_ACT_ON_US_MERCHANT
  EDIT_ORDERS
  LISTING_REVIEW_TAG
  LOGIN_TO_WISH_LOCAL
  PRODUCT_RATING_IMAGE_MANUAL_TAG
  CREATE_PUBLIC_MERCHANT_APP
  MANAGE_ERP_PARTNERS
  TAG_AUTHORIZATION
  REVIEW_ONEOFF_REQ_WHITELIST_MERCHANTS
  CAN_HANDLE_FRAUD_INFRACTION
  FAST_QUEUE_TAGGING_JOBS
  SUPPLY_CHAIN_MERCHANDISE
  CAN_ACCESS_ONEOFF_PAGE_LIST
  USER_GENERATED_PRODUCT_IMAGE_TAG
  COMPLETE_AUTHENTIC_BRAND_SELLER_BADGE_APPLICATIONS
  CAN_USE_WISH_EXPRESS_SUPPORT_FEATURE
  EDIT_ADMIN_PERMISSIONS
  CAN_VIEW_BRAND_LIST
  SHOW_PRODUCT_BOOST
  SHOW_ALL_MERCHANT_PROFILES
  REVIEW_COUNTERFEIT_INFRACTION
  VIEW_OTHER_HOLD
  SHOW_DETAIL_TAGGER_TEST_RESULT
  EXPORT_PRODUCT_STAT
  VIEW_FRAUDULENT_ACTIVITES_HOLD
  CREATE_VARIATION
  CAN_REVIEW_DISPUTES
  CREATE_TAKEDOWN_REQUESTS
  CREATE_TRO_HOLD
  CAN_ACT_ON_EU_MERCHANT
  SHOW_COUNTERFEIT_TAGGER_TEST_RESULT
  TAG_STATUS_CHECK
  VIEW_HOLDS_FOR_LOCAL_MERCHANTS
  CREATE_LISTING_REVIEW_JOB
  MANAGE_SHIPPING_SETTINGS
  CAN_CREATE_USERS
  DETAIL_TAG_MANUAL
  ADD_SIZE_COLOR
  UNDO_INFRACTION_ACTION
  AUDIT_TAGGING_BY_TAGGERS
  REMOVE_WISH_EXPRESS_PRODUCTS
  INVALIDATE_IDENTICAL_REVIEWS
  VIEW_LOGICAL_TICKET_QUEUES
  LISTING_REVIEW_TAG_RESOLUTION
  SHIP_ORDERS
  REVIEW_ONEOFF_REQ_TEMP_EXEMPT_PROMOTE_PRODUCT_POLICY
  REVIEW_ONEOFF_REQ_MIGRATE_MERCHANT_CURRENCY
  VIEW_SHIP_FRAUD_HOLD
  CAN_VIEW_MERCHANT_IDS
  EDIT_LOGICAL_TICKET_QUEUE_ASSIGNMENT
  CAN_MANAGE_MY_MERCHANT
  SEND_SYSTEM_UPDATE_TO_MERCHANTS
  VIEW_TRUE_BRAND_DIRECTORY
  EDIT_BD_PERMISSIONS
  AUTHORIZED_MERCHANT
  CS_REP_LEAD_STATS
  EDIT_PRODUCTS
  PROMO_MANUAL_TAG
  VIEW_GLOBAL_LEADERBOARD
  COUNTERFEIT_TAG_RESOLUTION
  MANAGE_WHITE_GLOVE
  CAN_VIEW_ORDERS
  CAN_VIEW_CN_INFRACTIONS
  CAN_GET_COLLECTIONBOOST
  SYNC_SHOPIFY_PRODUCTS
  SHOW_REFUND_PERFORMANCE
  CAN_REVIEW_US_PAYMENT_REQUEST
  SHOW_ORDERS
  CAN_USE_TFA_ADMIN_TOOL
  CAN_DOWNLOAD_ENTIRE_ORDER_HISTORY
  CAN_BE_VIEWED_BY_OUTSOURCE_MERCHANT
  VIEW_BD_ANNOUNCEMENTS
  SAFELIST_PRODUCTS
  BOXC_LOGISTIC
  REVIEW_ALL_INFRACTION
  CAN_SEND_EMAIL
  ESCALATE_TO_MERCHANT
  ACCEPT_MERCHANT_TERMS
  CREATE_INTERNAL_HOLD
  SUPPLY_CHAIN_ADMIN
  REVIEW_ONEOFF_REQ_ENABLE_DYNAMIC_PRICING
  CAN_REVIEW_TRUE_BRAND_REQUEST
  UPDATE_BLUE_STORE_ADVANCE
  EDIT_MERCHANTS
  CAN_ACT_ON_BR_MERCHANT
  CAN_ACT_ON_ASIAN_MERCHANT
  CAN_REVIEW_MERCHANT_INFO_ONLY
  SHOW_STORE_ASSETS
  CAN_HANDLE_ORDER_CHANGE_REQUEST
  CAN_ACCESS_ONEOFF_REQ_TOOL
  ACCESS_EXTERNAL_APIS
  VIEW_TERM_OF_SERVICE_HOLD
  CAN_REVIEW_UNSAFE
  CAN_VIEW_TRACKING_DISPUTES
  CAN_REVIEW_MERCHANTS
  COUNTERFEIT_TAG_AUDIT
  VIEW_FAKE_TRACKING_FINE
  CAN_SEND_ANNOUNCEMENTS_AS_EDUCATION_TEAM
  SHOW_PRODUCT_BRAND_DETECTION
  MANAGE_PRODUCT_GEOBLOCK
  CAN_VIEW_GS_MERCHANT_INFO
  PRODUCT_CATEGORY_DISPUTE_EDIT
  VIEW_JP_MERCHANTS
  CAN_USE_TFA_BD_TOOL
  SUPPLY_CHAIN_AP
  CAN_MANAGE_SG_MERCHANT
  LOGIN_AS_CS
  VIEW_WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION
  VIEW_MERCHANTS
  CAN_BE_ASSIGNED_MANAGER
  VALIDATE_PROVIDER_DISBURSEMENT
  COUNTERFEIT_TAG_MANUAL
  REVIEW_BRAND_AUTH
  VIEW_INTERNAL_HOLD
  CAN_MANAGE_JP_MERCHANT
  RETURN_CENTER
  VERIFY_WAREHOUSE_ONEOFF_REQ_APPROVER
  CAN_REVIEW_EPC_APPLICATION
  VIEW_MERCHANT_GAMING_REVIEW_TICKETS
  CUSTOM_CHARTS
  VIEW_KR_MERCHANTS
  CAN_MANAGE_ROLES_FOR_ALL_USERS
  AUDIT_CS_TICKETS
  MANAGE_BRAND_VIOLATION_REPORT
  SHOW_MERCHANT_TODO_ITEMS
  MANAGE_STORE_FULFILLMENT
  CAN_VIEW_DISABLED_INFO
  EDIT_FRAUD_TEAM_PERMISSIONS
  VIEW_CUSTOMER_PROFILE_PAGE
  VIEW_WARNING_MANUAL_HOLD
  CAN_UNENROLL_WHITE_GLOVE
  CAN_TOGGLE_ADMIN_EDIT_ON_ALL_USERS
  CAN_EDIT_CANNED_RESPONSES
  COUNTERFEIT_HELP_TAG
  CREATE_TRUE_TAG_ASSOCIATION
  CAN_VIEW_PRODUCT_STATUS
  CAN_ACCESS_AUTH_BRAND_AUDIT
  UPLOAD_PRODUCTS_CSV
  CREATE_WISHPOST_ID_NOT_COMPLETE_FACE_RECOGNITION
  EXPORT_PRODUCT_DATA
  IDENTICAL_TOOL_TAG_AUDIT
  CAN_REVIEW_TRACKING_DISPUTES
  CREATE_TERM_OF_SERVICE_HOLD
  RAMP_DOWN_MERCHANT_IMPRESSIONS
  RECYCLE_TRACKING
  CREATE_ONEOFF_FINE
  VIEW_MISSING_CA_TAX_SETTING_HOLD
  VIEW_EU_MERCHANTS
  PRODUCT_RATING_VIDEO_AUDIT_TAG
  CAN_MANAGE_PERMISSIONS_FOR_ALL_USERS
  TRUE_BRAND_TAG
  VIEW_WITHHOLD_FUND
  EDIT_MERCHANT_WARNING_AUDIT_STATUS
  CAN_APPROVE_ANY_MERCHANT
  VIEW_LEGAL_SETTLEMENT_FINE
  SUPPLY_CHAIN_SOURCING
  CAN_LOGIN_AS_BD
  EDIT_ACCOUNT_NAME
  DOWNLOAD_EXPORT
  SEND_SYSTEM_UPDATE_TO_TAGGERS
  MGC_IP_TAG
  CAN_TOGGLE_ADMIN_EDIT_ON_STORE_USERS
  SUPPLY_CHAIN_READ_ONLY
  EDIT_LOGICAL_TICKET_QUEUE
  PRODUCT_RATING_IMAGE_TAG
  MODIFY_MERCHANT_FINES
  REVIEW_ONEOFF_REQ_ENROLL_MERCHANT_PLUS
  CAN_VIEW_ORDER_SHIPPING_ESTIMATE
  WISHPOST
  VIEW_LCL_FBW_FEE
  CAN_ADMIN_CANNED_RESPONSES
  IDENTICAL_TOOL_TAG_RESOLUTION
  CAN_EDIT_TAGGING_TESTS
  MGC_CONTENT_TAG
  CREATE_TEAM_MEMBER
  CAN_VIEW_BRANDS
  CAN_AUDIT_REVIEW_RESULT
  EXT_CS_CAN_REFUND_ESCALATION
  REVIEW_ONEOFF_REQ_VERIFY_WAREHOUSE
  PRODUCT_RATING_IMAGE_AUDIT_TAG
  SUPPLY_CHAIN_PAYMENT_INITIATED
  CAN_MANAGE_BLUE_AMBASSADORS
  ENABLE_DISABLE_ALL_PRODUCTS
  SHOW_PRODUCTS
  SHOW_MERCHANT_PROFILE
  FBW_TICKETS
  SHOW_MERCHANT_ASSETS
  EXPORT_ORDERS
  SHOW_MERCHANT_STATS
  VIEW_WARNING_BAN_HOLD
  SUPPLY_CHAIN_MAINTAINER
  VIEW_ATO_HOLD
  VIEW_B2B_SALE_FEE
  FAST_QUEUE_TAGGING_JOBS_HIGHEST_PRIORITY
  VIEW_CN_MERCHANTS
  BRAND_REVIEW_TAG
  CREATE_SHIP_FRAUD_HOLD
  EDIT_CS_REPS
  AUDIT_ALL_CS_TEAMS
  CAN_MANAGE_GS_MERCHANT
  REVIEW_ONEOFF_REQ_OVERRIDE_MERCHANT_COUNTRY
  CAN_MANAGE_BRAND_LIST
  CAN_LOGIN_AS_OTHER_USER
  GENDER_TAG
  CAN_PERFORM_ACTION_ON_WISH_USERS
  PROFILE_PICTURE_TAG
  CREATE_OTHER_HOLD
  INAPPROPRIATE_IN_HOUSE_TAG
  MANAGE_SIZE_CHART
  BRAND_REVIEW_RESOLUTION_TAG
  FULFILLED_BY_WISH
  CAN_REVIEW_EU_MERCHANTS
  WISH_BLUE_ADMIN
  IMAGE_CHANGE_RESOLUTION_TAG
  VIEW_TAKEDOWN_REQUESTS
  CAN_VIEW_BAN_INFRACTION
  REVIEW_ONEOFF_REQ_ENABLE_COLLECTIONBOOST
  REVIEW_ONEOFF_REQ_ISSUE_PB_CREDITS
  MODIFY_MERCHANT_PAYMENT_HOLDS
  CREATE_FAKE_TRACKING_FINE
  REMOVE_INFRACTION_FINES
  CAN_ACT_ON_MX_MERCHANT
  CAN_REVIEW_PRODUCT_CATEGORY_DISPUTE
  DETAIL_TAG
  CREATE_HIGH_GAMING_GMV_HOLD
  SUPPLY_CHAIN_PREVALID_TABLE_MAINTAINER
  VALIDATE_COLLECTIONBOOST_COLLECTIONS
  EDIT_MERCHANT_SUPPORT_PERMISSIONS
  CAN_VIEW_HR_RELATED_USERS
  SUPPLY_CHAIN_DATA
  CAN_VIEW_ALL_MERCHANT_FILES
  CAN_MANAGE_KR_MERCHANT
  CAN_INVITE_CN_MERCHANTS
  HANDLE_ALL_TICKETS
  WISH_BLUE_STORE_SUPPORT_PROFILE
  EDIT_LEGAL_TEAM_PERMISSIONS
  CREATE_RESPOND_TO_ADMIN_HOLD
  VIEW_TRO_TOOLS
  DISPUTE_CURRENCY
  LISTING_REVIEW_AUDIT_IN_HOUSE_TAG
  LOGIN_WITH_OAUTH
  RESTRICT_REVIEW_CN_MERCHANTS
  CAN_EDIT_SHIP_TO_STORE_PACKAGE
  CNY_PROMOTED_DISABLE
  CREATE_PRODUCT
  REVIEW_ONEOFF_REQ_MERCHANT_EU_ENTITY
  CHANGE_LANGUAGE
  REVIEW_ONEOFF_REQ_CREATE_PB_SHADOW_CAMPAIGNS
  HANDLE_CS_TICKETS
  DETAIL_TAG_AUDIT
  RESTRICTED_PRODUCT_REQUEST_EDITION
  IP_VIOLATION_AUDIT_IN_HOUSE_TAG
  REVIEW_ONEOFF_REQ_ENROLL_PRICE_DROP
  REVERSE_ONEOFF_FINES
  CAN_ACCESS_ONEOFF_API_REVIEW
  REVIEW_ONEOFF_REQ_ISSUE_CB_CREDITS
  CAN_USE_BP_DATA_TOOL
  SHOW_ACCENTURE_TAGGERS
  CAN_ACCESS_ONEOFF_API_LIST
  CAN_VIEW_BLANKET_AUTHORIZATION_STATUS
  VIEW_DECEPTIVE_FULFILLMENT_FINE
  CAN_PROVIDE_MERCHANT_CHAT_SUPPORT
  CAN_VIEW_WISH_USERS
  CS_REP_STATS
  FBW2
  SHOW_ALL_REFUND_PERFORMANCES
  CAN_EDIT_EXTERNAL_FRAUD_TEAM_ACCESS
  CREATE_WITHHOLD_FUND
  VIEW_WISHPOST_NEGATIVE_BALANCE_HOLD
  DEP_HANDLE_MERCHANT_BENEFITS
  VIEW_TRO_HOLD
  IP_VIOLATION_MANUAL_TAG
  REVIEW_ONEOFF_REQ_REJECT_COLLECTIONBOOST_COLLECTION
  CAN_ACCESS_BLANKET_AUTHORIZATION
  IMAGE_CHANGE_TAG
  REVIEW_ONEOFF_REQ_GIVE_BD_ACCESS
  CAN_REVERSE_FINE
  VIEW_RESTRICTED_PRODUCT_REQUEST
  IP_VIOLATION_AUDIT_TAG
  CAN_ISSUE_PB_CREDITS
  CAN_ACCESS_ONEOFF_API_GET_FIELDS_INFO
  CAN_VIEW_SHIP_TO_STORE_PACKAGE
  CAN_TRANSFER_ANY_MERCHANTS
  CAN_CHECK_INTERNAL_TRACKING
  CAN_RECEIVE_SMS_ON_QA_ENV
  VIEW_RESPOND_TO_ADMIN_HOLD
  CAN_VIEW_MERCHANT_GROUP
  VIEW_AUTHENTIC_BRAND_SELLER_BADGE_APPLICATIONS
  EDIT_PROMOTED_PRODUCTS
  CAN_MANAGE_CHINESE_BDS
  CAN_TOGGLE_MERCHANT_AUTOBAN
  VIEW_ONEOFF_FINE
  ENABLE_DISABLE_API_PARTNERS
  EUB_LOGISTIC
  MANAGE_DELIVERED_CARRIER
  IP_VIOLATION_TAG
  CAN_VIEW_FRAUD_INFRACTION_QUEUE
  WISH_BLUE_AMBASSADOR_PROFILE
  RESTRICT_REVIEW_US_MERCHANTS
  EDIT_CONTENT_TEAM_PERMISSIONS
  IDENTICAL_TOOL_TAG
  CREATE_LCL_FBW_FEE
  AUDIT_TICKET_REPLIES
  VIEW_PRODUCT_PROFILE_PAGE
  TRUE_BRAND_ESCALATION_TAG
  VIEW_ALL_MERCHANTS
  CAN_APPROVE_PRODUCT_BOOST_MERCHANTS
  HOVERBOARD
  UPDATE_TRACKING
  EARLY_PAYMENT_RISK_CONTROL
  CAN_VIEW_EPC_APPLICATION
  EDIT_BRAND_PROTECTION_PERMISSIONS
  SEND_SYSTEM_UPDATE_TO_FRAUD
  SHOW_TAGGING_TEST_HISTORY
  REVIEW_PRODUCT_EDIT_REQUESTS
  API_ACCESS
  REPORTED_WISH_LOCAL_DETAIL_TAG
  CREATE_BATCH_WARNING
  EDIT_PRODUCT_LOGISTIC_METADATA
  GENDER_TAG_MANUAL
  EDIT_LOGICAL_TICKET_QUEUE_LIMITED
  REVIEW_ONEOFF_REQ_ENROLL_PB_KICKSTART
  LISTING_REVIEW_AUDIT_TAG
  SEND_BD_ANNOUNCEMENTS
  CAN_ACCESS_ORDERS_MANAGER
  CAN_CREATE_BLUE_ADMIN
  CAN_VIEW_CS_REPS
  CAN_ALLOW_REPURCHASE
  CAN_VIEW_US_BD_STATS
  SEND_SYSTEM_UPDATE_TO_CS
  SHOW_SEARCH_TOOL
  CAN_VIEW_VMPI_ALERT
  CAN_UPDATE_COLLECTIONBOOST
  WISH_LOCAL_DETAIL_TAG
  CAN_PERFORM_CHARGEBACK_REVIEW_AUDIT
  CREATE_HIGH_IP_INFRINGEMENT_HOLD
  CAN_ACCESS_ONEOFF_PAGE_REVIEW
  CAN_VIEW_FRAUD_WORKERS
  SHOW_PRODUCT_LOGISTIC_METADATA
  LISTING_REVIEW_TAG_IN_HOUSE
  PRODUCT_RATING_TAG
  CAN_ACT_ON_CN_MERCHANT
  MANAGE_IDENTICAL_REVIEWS
  SHOW_TAKEDOWN_REQUESTS
  CAN_SEND_WECHAT_MESSAGE
  CAN_VIEW_REGULATOR_REPORT_FILES
  CREATE_FRAUDULENT_ACTIVITES_HOLD
  CAN_REVIEW_RESPONSIBLE_PERSON
  CREATE_TERM_OF_SERVICE_EPC_BILL_HOLD
  PRODUCT_RATING_VIDEO_TAG
  CAN_MANAGE_BRAND_TO_PRODUCT
  CAN_ACCESS_ONEOFF_PAGE_SUBMIT
  SHOW_STORE_USERS
  AUDIT_ALL_TEAM
  CAN_VIEW_BDS
  VIEW_DISBURSEMENT_PAGE
  UPDATE_PRODUCTS
  MANAGE_FBW_ORDERS
  WISH_LOCAL_TAG_STATUS_CHECK
  CREATE_WISHPOST_NEGATIVE_BALANCE_HOLD
  SHOW_COUNTERFEIT_TAGGER_TEST_SPEC
  REVIEW_ONEOFF_REQ_REFUND_PB_BALANCE
  YANWEN_LOGISTIC
  CREATE_TAG_JOB
  EDIT_ALL_LOGICAL_QUEUES
  FULFILL_ORDERS
  VIEW_MERCHANT_RATING_PAGE
  LOGIN_AS_MERCHANTS
  CAN_ACCESS_ONEOFF_API_REMOVE
  MANAGE_BLACKLIST_CRITERIA
  MERCHANT_GAMING_REVIEW_ESCALATION
  EDIT_ADMINS
  VIEW_WISH_USERS
  CAN_VIEW_US_INFRACTIONS
  SHOW_ALL_TAGGERS
  CAN_HANDLE_VIOLATION_REPORT
  CAN_TRANSFER_MERCHANTS
  CAN_VIEW_WISH_USER_INFO
  TRUE_BRAND_RESOLUTION_TAG
  SUPPLY_CHAIN_WAREHOUSE
  CAN_BLOCK_USER_ON_USER_REVIEW
  USE_CUSTOM_COLORS
  REVIEW_ONEOFF_REQ_REMOVE_PRODUCTS
  SHIPPING_ETA_TICKET_MERCHANT
  SUPPLY_CHAIN_QC
  VIEW_HIGH_GAMING_GMV_HOLD
  CAN_VIEW_DISPUTES
}

type PlatformConstants {
  merchantMobile: MerchantMobile!
  countriesWeShipTo: [Country!]!
  euCountriesWeShipTo: [Country!]!
  wishExpressCountries: [Country!]!
  topLevelTags: [TrueTagSchema!]
  unityCountries: [Country!]!
  countriesAllowWeRegionalPrice: [Country!]!
  interselectablePhoneCountries: [Country!]!
  regions(countryCode: CountryCode!): [Region!]
  availableLocales: [Locale!]
  tax: TaxConstants!
  productCsvImportColumns: ProductCSVImportSchema
  orders: OrderConstants!
  wishCompanyInfo: WishCompanyInfo!
  deciderKey: DeciderKeySchema
  cs: CustomerSupportConstants
  buyerFraudReasons: [OrderRefundBuyerFraudSubreasonSchema!]!
  euVatCountries: [Country!]!
  wishEuVatPayerInfo: WishEUVATPayerInfo
  productListing: [ProductListingTierSchema!]!
  staticFines: StaticFines
}

type PlatformSweepMutations {
  searchProducts(input: PlatformSweepProductSearchInput!): PlatformSweepProductSearch
  flagProducts(input: PlatformSweepProductFlaggingInput!): PlatformSweepProductFlagging
  emailResult(input: PlatformSweepResultEmailInput!): PlatformSweepResultEmail
}

type PlatformSweepProductFlagging {
  ok: Boolean!
  message: String
}

input PlatformSweepProductFlaggingInput {
  sessionId: ObjectIdType!
  query: String!
  productIds: [ObjectIdType!]
}

type PlatformSweepProductSearch {
  ok: Boolean!
  message: String
  sessionId: ObjectIdType
  products: [ProductSchema!]
}

input PlatformSweepProductSearchInput {
  sessionId: ObjectIdType
  query: String!
  offset: Int
  limit: Int
  countryCodes: [CountryCode!]
  excludingL2lSubcategories: [TaggingViolationSubReasonCode!]
  isBba: Boolean
  isCompanyOwned: Boolean
}

type PlatformSweepResultEmail {
  ok: Boolean!
  message: String
}

input PlatformSweepResultEmailInput {
  sessionId: ObjectIdType!
  recipient: String!
}

type PlusAdminServiceMutations {
  convertToPlus(merchantIds: [ObjectIdType!]!): ConvertToPlus
  removeFromPlus(merchantIds: [ObjectIdType!]!): RemoveFromPlus
}

type PolicyAdminSchema {
  merchantPolicyTiers: [MerchantPolicyTierSchema!]
  merchantGamingReviewTicketsCount(states: [MerchantGamingReviewState!], merchantId: ObjectIdType, claimedAdminName: String, lastSourceUpsertDateStart: DatetimeInput, lastSourceUpsertDateEnd: DatetimeInput, id: ObjectIdType, isClaimed: Boolean): Int
  merchantGamingReviewTicketsOpenStates: [MerchantGamingReviewState!]
  merchantGamingReviewTicketsClosedStates: [MerchantGamingReviewState!]
  merchantGamingReviewTickets(offset: Int = 0, limit: Int = 20, claimedAdminName: String, lastSourceUpsertDateStart: DatetimeInput, lastSourceUpsertDateEnd: DatetimeInput, states: [MerchantGamingReviewState!], sort: MerchantGamingReviewTicketSort, merchantId: ObjectIdType, id: ObjectIdType, isClaimed: Boolean): [MerchantGamingReviewTicketSchema!]
}

type PolicyAnnouncementItemSchema {
  section: String!
  requireLogIn: Boolean!
  announcementId: ObjectIdType
  effectiveDate: Datetime
}

enum PolicyFactor {
  MISLEADING_PRODUCT
  INAPPROPRIATE_SALE
  PRODUCT_SWAP
  MERCHANT_CANCELLATION
  HIGH_IP_INFRINGEMENT
  WISH_EXPRESS_LATE
  LATE_CONFIRM_FULFILLMENT
  WISH_EXPRESS_LATE_WITHHOLD
  WISH_EXPRESS_BAN
  HIGH_AUTO_REFUND
  GATE_KEEPER_ATO
  HIGH_GAMING_GMV
  MISLEADING_VARIATION
  FAKE_TRACKING
  HIGH_REFUND_RATE
  LOW_STORE_RATE
  STRIKE_BASED_HIGH_RISK_PROHIBITED
  PRODUCT_HIGH_REFUND_RATE
  VALID_TRACKING_RATE
  RECALL_POLICY
  UNQUALIFIED_CARRIER
  AUTO_REFUND
  HIGH_AUTO_REFUND_RATE
  REPEAT_IP_INFRINGEMENT
  COUNTERFEIT_GOODS
  CS_LOW_CSAT_SCORE
  CS_LATE_RESPONSE_RATE
  NEGATIVE_BALANCE
  HIGH_CANCEL_RATE
}

type PolicyMutations {
  adaptivePolicyAdmin: AdaptivePolicyAdminMutations
  restrictedProduct: RestrictedProductMutations
  reportAbuse: ReportAbuseMutations
  euCompliance: EUComplianceMutations
  merchantFinalSale: MerchantFinalSaleMutations
  merchantGamingReviewTicket: MerchantGamingReviewMutations
  merchantWarning: MerchantWarningMutations
  productCategoryDispute: ProductCategoryDisputeMutations
}

type PolicyPublicSchema {
  announcements: [PolicyAnnouncementItemSchema!]
}

type PolicySchema {
  admin: PolicyAdminSchema
  finalSaleCategories(merchantId: ObjectIdType!): [FinalSaleCategorySchema!]
  merchantWarningCount(merchantId: ObjectIdType, id: ObjectIdType, banned: Boolean, fined: Boolean, reasons: [MerchantWarningReason!], states: [MerchantWarningState!], isMisleading: Boolean, disputePendingEditReview: Boolean, disputePendingBrandAuth: Boolean, auditStatuses: [MerchantWarningAuditStatus!], claimedById: ObjectIdType): Int
  merchantWarnings(offset: Int = 0, limit: Int, merchantId: ObjectIdType, id: ObjectIdType, banned: Boolean, fined: Boolean, auditStatuses: [MerchantWarningAuditStatus!], claimedById: ObjectIdType, sort: MerchantWarningSort, reasons: [MerchantWarningReason!], states: [MerchantWarningState!], disputePendingEditReview: Boolean, disputePendingBrandAuth: Boolean): [MerchantWarningSchema!]
  restrictedProduct: RestrictedProductSchema
  reportAbuse: ReportAbuseHub
  productCompliance: ProductComplianceSchema
  productCategoryDispute: ProductCategoryDisputeHub
  dispute: DisputeSchema
}

type ProductBoostAcceptTOS {
  ok: Boolean!
  message: String
}

input ProductBoostAcceptTOSInput {
  tosVersion: Int!
}

enum ProductCSVImportColumnId {
  LOCALIZED_US_MP
  LOCALIZED_US_MS
  LOCALIZED_GT
  DZ_TTD
  LOCALIZED_GR
  NZ_TTD
  COUNTRY_OF_ORIGIN
  CONTAINS_LIQUID
  LOCALIZED_US_WA
  NA_TTD
  LOCALIZED_GE
  LOCALIZED_GD
  LOCALIZED_US_ME
  LOCALIZED_GB
  LOCALIZED_GA
  AI_TTD
  LOCALIZED_US_TN
  BH_TTD
  LOCALIZED_GI
  LOCALIZED_GH
  US_IL_TTD
  US_GU_TTD
  LOCALIZED_FR_MQ
  LOCALIZED_TW
  LOCALIZED_TT
  FR_NC_TTD
  LOCALIZED_TR
  AU_TAS_TTD
  LOCALIZED_TN
  LOCALIZED_TO
  LOCALIZED_FR_MF
  LOCALIZED_TH
  OM_TTD
  US_UT_TTD
  US_PA_TTD
  LOCALIZED_DO
  LOCALIZED_DM
  LOCALIZED_DK
  US_WV_TTD
  LOCALIZED_SHIPPING
  LOCALIZED_DE
  MY_TTD
  US_MS_TTD
  BR_RSC_TTD
  LOCALIZED_DZ
  LOCALIZED_GY
  LOCALIZED_UY
  FR_TTD
  AM_TTD
  GR_TTD
  CONDITION
  LOCALIZED_US_MA
  AL_TTD
  EXTRA_IMAGE_URL
  LOCALIZED_US_TX
  LOCALIZED_QA
  BM_TTD
  US_OR_TTD
  MT_TTD
  AR_TTD
  US_WY_TTD
  MX_TTD
  LOCALIZED_ZM
  US_MD_TTD
  GT_TTD
  LOCALIZED_US_VT
  LOCALIZED_US_WV
  SC_TTD
  BR_RJC_TTD
  LOCALIZED_ZA
  TW_TTD
  LOCALIZED_US_AZ
  LOCALIZED_US_OK
  LOCALIZED_MK
  AU_NSW_TTD
  AU_TTD
  MV_TTD
  BR_SFB_TTD
  BA_TTD
  LOCALIZED_FR_RE
  MU_TTD
  AU_WA_TTD
  GI_TTD
  JP_TTD
  AG_TTD
  DK_TTD
  LOCALIZED_US_MI
  LOCALIZED_US_MO
  TO_TTD
  BR_MGC_TTD
  LOCALIZED_US_MN
  TR_TTD
  FR_WF_TTD
  AU_QLD_TTD
  SE_TTD
  TAGS
  SG_TTD
  UNIQUE_ID
  LOCALIZED_JP
  ES_CN_TTD
  KE_TTD
  SK_TTD
  LOCALIZED_JM
  LOCALIZED_JO
  NU_TTD
  VN_TTD
  LOCALIZED_AU_NSW
  CZ_TTD
  MS_TTD
  LV_TTD
  ME_TTD
  RO_TTD
  SR_TTD
  LOCALIZED_ES_CN
  DE_TTD
  AE_TTD
  ID_TTD
  US_AA_TTD
  GD_TTD
  US_NV_TTD
  US_MO_TTD
  US_CA_TTD
  LOCALIZED_CH
  LOCALIZED_CO
  SV_TTD
  LOCALIZED_CL
  DO_TTD
  LOCALIZED_CA
  US_TN_TTD
  BR_MGI_TTD
  LOCALIZED_LK
  LOCALIZED_CZ
  KY_TTD
  PY_TTD
  UY_TTD
  LOCALIZED_BR_SPI
  US_WA_TTD
  LOCALIZED_JE
  LOCALIZED_CR
  SH_TTD
  LOCALIZED_US_MT
  UNIT
  LOCALIZED_BR_SPC
  CONTAINS_BATTERY
  US_MP_TTD
  US_KY_TTD
  MD_TTD
  PL_TTD
  LOCALIZED_PT
  US_VA_TTD
  GE_TTD
  LOCALIZED_PY
  AT_TTD
  IE_TTD
  US_MA_TTD
  LOCALIZED_US_AE
  LOCALIZED_PA
  LOCALIZED_US_AA
  LOCALIZED_US_WI
  PRODUCT_NAME
  LOCALIZED_PE
  PIECES_INCLUDED
  LOCALIZED_PK
  LOCALIZED_PH
  BW_TTD
  US_NE_TTD
  LOCALIZED_PL
  JE_TTD
  QUANTITY_VALUE
  ENABLE
  WAREHOUSE_NAME
  LOCALIZED_US_FL
  LOCALIZED_AU_JBT
  LOCALIZED_DEFAULT_SHIPPING_PRICE
  HR_TTD
  BR_SPC_TTD
  LOCALIZED_FR_YT
  SM_TTD
  LOCALIZED_US_OR
  LOCALIZED_ME
  LOCALIZED_MD
  US_NC_TTD
  LOCALIZED_MA
  ZA_TTD
  LOCALIZED_MC
  NG_TTD
  LOCALIZED_MM
  LOCALIZED_MN
  BB_TTD
  LOCALIZED_PR
  LOCALIZED_MU
  LOCALIZED_MT
  LOCALIZED_MV
  US_OK_TTD
  LOCALIZED_MS
  US_AZ_TTD
  LOCALIZED_BR_RJC
  PACKAGE_LENGTH
  LOCALIZED_AU_VIC
  LOCALIZED_MY
  LOCALIZED_MX
  UZ_TTD
  TT_TTD
  LOCALIZED_BR_PRI
  LOCALIZED_VE
  DECLARED_NAME
  PACKAGE_HEIGHT
  LOCALIZED_VI
  LOCALIZED_IS
  LOCALIZED_IT
  LOCALIZED_VN
  US_OH_TTD
  US_MI_TTD
  KG_TTD
  LOCALIZED_IL
  LOCALIZED_BR_PRC
  LOCALIZED_IN
  REFERENCE_VALUE
  LOCALIZED_IE
  LOCALIZED_ID
  CA_TTD
  LOCALIZED_US_CT
  NI_TTD
  BG_TTD
  GB_TTD
  VI_TTD
  LOCALIZED_US_CA
  US_SD_TTD
  US_ME_TTD
  LOCALIZED_BR_MGC
  LOCALIZED_US_CO
  LOCALIZED_US_SC
  LOCALIZED_FR
  LOCALIZED_AU_WA
  DESCRIPTION
  US_GA_TTD
  LOCALIZED_US_HI
  NP_TTD
  LOCALIZED_EG
  US_TX_TTD
  PH_TTD
  DISABLE
  EC_TTD
  LOCALIZED_US_DC
  LOCALIZED_FI
  LOCALIZED_FJ
  VE_TTD
  BR_BAI_TTD
  LOCALIZED_SZ
  LOCALIZED_FR_PF
  FR_YT_TTD
  LOCALIZED_SR
  DECLARED_LOCAL_NAME
  LOCALIZED_SV
  LOCALIZED_FR_PM
  LOCALIZED_SK
  LOCALIZED_SI
  LOCALIZED_SH
  BR_RJI_TTD
  LOCALIZED_SM
  LOCALIZED_SC
  LOCALIZED_SA
  LOCALIZED_US_DE
  LOCALIZED_SG
  BR_TTD
  LOCALIZED_DK_GL
  LOCALIZED_US_AP
  LOCALIZED_US_IL
  LOCALIZED_US_VA
  US_AR_TTD
  MAX_QUANTITY
  MAIN_IMAGE_URL
  LOCALIZED_BR_RSC
  LOCAL_CURRENCY_CODE
  MSRP
  IS_TTD
  VARIATION_IMAGE_URL
  LOCALIZED_LC
  CY_TTD
  FR_MF_TTD
  FJ_TTD
  BR_PRC_TTD
  LOCALIZED_LI
  LOCALIZED_LV
  LOCALIZED_LT
  LOCALIZED_LU
  COLOR
  MM_TTD
  PACKAGE_WIDTH
  AU_VIC_TTD
  US_IA_TTD
  RS_TTD
  BT_TTD
  FI_TTD
  FR_MQ_TTD
  AU_SA_TTD
  UA_TTD
  FR_RE_TTD
  MC_TTD
  DK_GL_TTD
  KH_TTD
  LOCALIZED_US_RI
  US_ID_TTD
  LOCALIZED_AU_NT
  LOCALIZED_US_UT
  CL_TTD
  US_ND_TTD
  CONTAINS_METAL
  IT_TTD
  US_MN_TTD
  SZ_TTD
  CH_TTD
  LOCALIZED_CY
  BS_TTD
  BD_TTD
  CO_TTD
  CONTAINS_POWDER
  AU_ACT_TTD
  FR_PF_TTD
  LOCALIZED_US_GA
  SHIPPING_TIME
  PARENT_UNIQUE_ID
  LT_TTD
  US_LA_TTD
  LOCALIZED_FR_GF
  PT_TTD
  LOCALIZED_AU_TAS
  US_KS_TTD
  LOCALIZED_US_GU
  US_RI_TTD
  LOCALIZED_FR_GP
  LOCALIZED_ES
  LK_TTD
  LOCALIZED_RU
  LOCALIZED_RS
  LOCALIZED_US_SD
  IN_TTD
  LOCALIZED_RE
  TH_TTD
  LOCALIZED_US_NM
  FR_PM_TTD
  LOCALIZED_RO
  BR_PRI_TTD
  LOCALIZED_PRICE
  LOCALIZED_BD
  LOCALIZED_BE
  LOCALIZED_BG
  LOCALIZED_VG
  LOCALIZED_BA
  LOCALIZED_BB
  HU_TTD
  LOCALIZED_AU_SA
  LOCALIZED_BM
  LOCALIZED_BO
  LOCALIZED_BH
  LOCALIZED_US_WY
  LOCALIZED_BT
  LOCALIZED_BW
  US_NH_TTD
  LOCALIZED_BR
  LOCALIZED_BS
  PA_TTD
  LOCALIZED_FR_WF
  LOCALIZED_BZ
  VG_TTD
  TN_TTD
  LOCALIZED_OM
  US_IN_TTD
  US_NM_TTD
  BZ_TTD
  LOCALIZED_US_AR
  KR_TTD
  LOCALIZED_US_MD
  AU_JBT_TTD
  REQUESTED_PRODUCT_BRAND_ID
  AZ_TTD
  CR_TTD
  LOCALIZED_US_IN
  HN_TTD
  LOCALIZED_US_PA
  LOCALIZED_US_ID
  LOCALIZED_US_IA
  FR_GF_TTD
  PR_TTD
  SA_TTD
  US_AS_TTD
  MA_TTD
  US_MT_TTD
  EE_TTD
  JM_TTD
  CUSTOM_DECLARED_VALUE
  SIZE
  EG_TTD
  LU_TTD
  LOCALIZED_BR_BAC
  ES_TTD
  LOCALIZED_AU_ACT
  DM_TTD
  IL_TTD
  LOCALIZED_BR_BAI
  LOCALIZED_EE
  AU_NT_TTD
  RE_TTD
  JO_TTD
  UPC
  AW_TTD
  NO_TTD
  LOCALIZED_US_NY
  US_NY_TTD
  LOCALIZED_HR
  FR_GP_TTD
  PRODUCT_BRAND_NAME
  LOCALIZED_US_AS
  LOCALIZED_US_NV
  LANDING_PAGE_URL
  LOCALIZED_US_NH
  LOCALIZED_US_NJ
  US_HI_TTD
  LOCALIZED_HN
  LOCALIZED_EC
  GY_TTD
  LOCALIZED_US_AL
  US_VT_TTD
  LOCALIZED_US_NC
  LOCALIZED_US_ND
  LOCALIZED_US_NE
  PK_TTD
  US_NJ_TTD
  BR_BAC_TTD
  KW_TTD
  LOCALIZED_UZ
  LOCALIZED_US
  LC_TTD
  BO_TTD
  LOCALIZED_US_AK
  CUSTOMS_HS_CODE
  LOCALIZED_UA
  US_AL_TTD
  US_AE_TTD
  LOCALIZED_AE
  LOCALIZED_AD
  LOCALIZED_AG
  US_DE_TTD
  LOCALIZED_AI
  BE_TTD
  LOCALIZED_US_OH
  LOCALIZED_AM
  LOCALIZED_AL
  PACKAGE_WEIGHT
  PE_TTD
  US_SC_TTD
  LOCALIZED_US_KY
  LOCALIZED_AR
  LOCALIZED_AU
  LOCALIZED_AT
  LOCALIZED_AW
  GH_TTD
  LOCALIZED_US_KS
  LOCALIZED_AZ
  LOCALIZED_BR_RJI
  US_CT_TTD
  QA_TTD
  LOCALIZED_NI
  BR_SPI_TTD
  LOCALIZED_NL
  LOCALIZED_NO
  LOCALIZED_NA
  LOCALIZED_BR_MGI
  LOCALIZED_NG
  LOCALIZED_NZ
  CLEAN_IMAGE_URL
  LOCALIZED_NP
  LOCALIZED_NU
  GA_TTD
  US_AP_TTD
  US_TTD
  KZ_TTD
  ZM_TTD
  SI_TTD
  LOCALIZED_FR_NC
  LOCALIZED_AU_QLD
  MN_TTD
  NL_TTD
  US_WI_TTD
  US_AK_TTD
  LOCALIZED_HU
  LOCALIZED_BR_SFB
  AD_TTD
  LOCALIZED_US_LA
  LOCALIZED_KG
  LOCALIZED_KE
  LI_TTD
  US_FL_TTD
  LOCALIZED_KH
  US_CO_TTD
  LOCALIZED_KR
  US_DC_TTD
  LOCALIZED_KW
  LOCALIZED_SE
  MK_TTD
  RU_TTD
  LOCALIZED_KZ
  LOCALIZED_KY
  QUANTITY
  SKIP_HEADER
}

type ProductCSVImportColumnSchema {
  columnId: ProductCSVImportColumnId!
  name: String!
  isRequired(feedType: ProductCSVJobType = 7): IsRequiredEnum!
  category: ColumnCategorySchema
  description: String!
}

type ProductCSVImportSchema {
  columns(restrictCountryShipping: Boolean, columnIds: [ProductCSVImportColumnId!]): [ProductCSVImportColumnSchema!]!
  requiredColumns(columnIds: [ProductCSVImportColumnId!]): [ProductCSVImportColumnSchema!]!
  optionalColumns(restrictCountryShipping: Boolean, columnIds: [ProductCSVImportColumnId!]): [ProductCSVImportColumnSchema!]!
}

enum ProductCSVJobType {
  ADD_PRODUCTS
  CREATE_PRESALE_PRODUCT
  EDIT_WISH_EXPRESS_COUNTRIES
  SHOPIFY_CREATE_PRODUCTS
  UPSERT_PRODUCTS
  EDIT_FBW_SHIPPING
  EDIT_SHIPPING
  ADD_SIZE_COLOR
  UPDATE_PRODUCTS
}

type ProductCatalogMutations {
  upsertProduct(input: ProductUpsertInput): UpsertProduct
  removeProduct(input: RemoveProductInput!): RemoveProduct
  importProductCsvFile(input: ImportProductsFromCSVFileInput!): ImportProductsFromCSVFile
  upsertProductCsvFile(input: UpsertProductsFromCSVFileInput!): UpsertProductsFromCSVFile
  downloadAllProductsCsv(input: DownloadAllProductsCSVInput!): DownloadAllProductsCSV
  updateProductLogisticsMetadata(input: UpdateProductLogisticsMetadataInput!): UpdateProductLogisticsMetadata
}

type ProductCatalogSchema {
  product(id: String, sku: String): ProductSchema
  products(query: String, searchType: ProductSearchType, shippingProfileIds: [ObjectIdType!], merchantId: ObjectIdType, offset: Int = 0, limit: Int = 20, sort: ProductSort, productStatuses: [CommerceProductStatus!] = [0, 1], shippingTypes: [WarehouseShippingType!] = [1, 2], videoStates: [ProductVideoState!]): [ProductSchema!]!
  productCount(query: String, productStatuses: [CommerceProductStatus!] = [0, 1], merchantId: ObjectIdType, shippingTypes: [WarehouseShippingType!] = [1, 2], searchType: ProductSearchType, shippingProfileIds: [ObjectIdType!], videoStates: [ProductVideoState!]): Int!
  variation(id: String = "Id of the variation", sku: String = "Variation SKU of the variation"): VariationSchema
  variations(query: String, searchType: VariationSearchType, offset: Int = 0, sort: VariationSort, limit: Int = 20): [VariationSchema!]!
  variationCount(query: String, searchType: VariationSearchType): Int
  upcProductService: UPCProductServiceSchema!
  bulkCsvProductImportJobs(offset: Int! = 0, limit: Int! = 25): [CSVProductImportJobSchema!]!
  csvProductImportJobsCount: Int!
}

enum ProductCategoryDisputeAction {
  CREATE
  MARK_UPDATE
  MARK_UNCHANGE
}

enum ProductCategoryDisputeAdminUnchangedReason {
  IMAGE_MISMATCH
  PROPOSED_TAG_IS_INAPPROPRIATE
  OTHER
  CORRECT_TAGGED
}

enum ProductCategoryDisputeEligibility {
  OUT_OF_QUOTA
  INELIGIBLE
  ELIGIBLE
}

type ProductCategoryDisputeHub {
  disputeCount(searchType: ProductCategoryDisputeSearchType, query: String, states: [ProductCategoryDisputeStatus!]!, merchantId: ObjectIdType): Int
  disputes(offset: Int = 0, limit: Int = 50, searchType: ProductCategoryDisputeSearchType, query: String, states: [ProductCategoryDisputeStatus!]!, merchantId: ObjectIdType): [ProductCategoryDisputeSchema!]
  dispute(id: ObjectIdType!): ProductCategoryDisputeSchema
  reasons(source: ProductCategoryDisputeSource!): [ProductCategoryDisputeReasonSchema!]
}

type ProductCategoryDisputeMutations {
  upsertProductCategoryDispute(input: UpsertProductCategoryDisputeInput): UpsertProductCategoryDispute
}

enum ProductCategoryDisputeReason {
  INCORRECT_TAG
  OTHERS
}

type ProductCategoryDisputeReasonSchema {
  reason: ProductCategoryDisputeReason!
  text: String!
}

type ProductCategoryDisputeSchema {
  id: ObjectIdType!
  merchant: MerchantSchema!
  product: ProductSchema!
  status: ProductCategoryDisputeStatus!
  lastUpdate: Datetime
  adminActionId: ObjectIdType
  adminUnchangedReason: ProductCategoryDisputeAdminUnchangedReason
  reason: ProductCategoryDisputeReasonSchema
  source: ProductCategoryDisputeSource!
  adminUnchangedOtherReasonDetails: String
  merchantNote: String
  supportedFiles: [MerchantFileSchema!]
  trueTags(state: ProductCategoryDisputeTrueTagState): [TrueTagSchema!]
}

enum ProductCategoryDisputeSearchType {
  MERCHANT_ID
  PRODUCT_ID
  DISPUTE_ID
}

enum ProductCategoryDisputeSource {
  EU_COMPLIANCE
  PRODUCT_CATELOG
}

enum ProductCategoryDisputeStatus {
  RESOLVED_UNCHANGED
  RESOLVED_UPDATE
  PENDING_REVIEW
}

enum ProductCategoryDisputeTrueTagState {
  DISPUTED
  APPROVED
  PROPOSED
}

type ProductComplianceSchema {
  responsiblePersonCount(complianceType: ResponsiblePersonCompliance!, states: [ResponsiblePersonStatus!]): Int
  responsiblePersons(offset: Int = 0, limit: Int = 50, complianceType: ResponsiblePersonCompliance!, sort: ResponsiblePersonSort, states: [ResponsiblePersonStatus!]): [ResponsiblePersonSchema!]
  rpValidCountries: [EUComplianceResponsiblePersonCountriesAndRegions!]!
  linkCount(complianceTypes: [ResponsiblePersonCompliance!], states: [LinkProductComplianceState!], categories: [MSRCategory!], query: String, searchType: ProductComplianceSearchType, responsiblePersonIds: [ObjectIdType!]): Int
  links(offset: Int = 0, limit: Int = 50, complianceTypes: [ResponsiblePersonCompliance!], states: [LinkProductComplianceState!], categories: [MSRCategory!], query: String, searchType: ProductComplianceSearchType, responsiblePersonIds: [ObjectIdType!]): [LinkProductComplianceSchema!]
  allMsrCategories: [MSRCategory!]
  productDestinationCountries: [Country!]!
  responsiblePersonRejectReasons: [ResponsiblePersonRejectReasonSchema!]!
}

enum ProductComplianceSearchType {
  PRODUCT_ID
}

type ProductCountryBlockSchema {
  productId: ObjectIdType!
  countriesBlocked: [Country!]
}

type ProductListingFeeDetailsSchema {
  currentProductMax: Int
  snapshotDate: Datetime!
  priceBreakdownPerTier: [ProductTierPriceSchema!]
  productMetrics: ProductListingPlanMonthlyProductMetrics
  productMetricsBenchmark: ProductListingPlanMonthlyProductMetricsBenchmark
}

type ProductListingPlanHub {
  bill(date: DatetimeInput!): ProductListingFeeDetailsSchema!
  productTotal(startDate: DatetimeInput!, endDate: DatetimeInput!): [ProductListingPlanProductMetrics!]!
}

type ProductListingPlanMonthlyProductMetrics {
  date: Datetime!
  totalProductWithSale: Int!
  totalProductWithImpression: Int!
  totalProduct: Int!
  merchantId: ObjectIdType!
}

type ProductListingPlanMonthlyProductMetricsBenchmark {
  date: Datetime!
  avgSaleRatio: Float!
  avgImpressionRatio: Float!
}

type ProductListingPlanProductMetrics {
  date: Datetime!
  count: Int
}

enum ProductListingPlanTier {
  TIER_ONE
  TIER_TWO
  TIER_THREE
}

type ProductListingTierSchema {
  tier: ProductListingPlanTier!
  lowerBound: Int!
  higherBound: Int!
  price: CurrencyValue!
}

enum ProductPostErrorCode {
  NO_ERROR
  REQUEST_TOO_LARGE
  INVALID_PRODUCT_ID
  INVALID_MERCHANT_ID
  LIMIT_IS_ZERO
  INVALID_PRODUCT_VIDEO_ID
  VIDEO_NOT_FOUND
  INVALID_VIDEO
  MISSING_PARAMETER
  IDENTIFIER_ALREADY_IN_USE
  INVALID_RULES
  ILLEGAL_CHARACTER
  CONFLICTING_PARAMETERS
  INVALID_VIDEO_ID
  INVALID_PARAMETER
  RECORD_NOT_FOUND
}

type ProductPostsMutations {
  add(input: AddProductPostInput!): AddProductPostMutation!
  delete(input: DeleteProductPostsInput!): DeleteProductPostsMutation!
}

type ProductPromotionDailyStats {
  date: Datetime!
  impressions: Int
  sales: Int
  gmv: CurrencyValue
  promotionBudget: CurrencyValue
  promotionSpending: CurrencyValue
  promotionStatus: ProductPromotionStatus!
}

input ProductPromotionInput {
  productId: ObjectIdType!
  budget: CurrencyInput!
  intenseBoost: Boolean
}

type ProductPromotionLifetimeStats {
  sales: Int!
  gmv: CurrencyValue!
  spend: CurrencyValue!
}

type ProductPromotionPeriodStats {
  startDate: Datetime!
  endDate: Datetime!
  dailyStats: [ProductPromotionDailyStats!]!
  totalImpressions: Int!
  totalSales: Int!
  totalGmv: CurrencyValue!
  totalPromotionSpending: CurrencyValue!
}

type ProductPromotionRefundAssurance {
  topLevelStats: ProductPromotionRefundAssuranceStats!
  monthlyStats: [ProductPromotionRefundAssuranceStats!]!
}

enum ProductPromotionRefundAssuranceCreditReceivedStatus {
  DONE
  PENDING
}

type ProductPromotionRefundAssuranceStats {
  spend: CurrencyValue
  month: Datetime
  advancedLogisticsGmv: CurrencyValue
  refundAdvancedLogisticsGmv: CurrencyValue
  creditIssued: CurrencyValue
  creditIssuedStatus: ProductPromotionRefundAssuranceCreditReceivedStatus
  refundRate: Float
  advancedLogisticsOrdersCount: Int
  refundedAdvancedLogisticsOrdersCount: Int
}

enum ProductPromotionRefundAssuranceType {
  ELIGIBLE
  OTHER
}

type ProductPromotionSchema {
  productId: ObjectIdType!
  product: ProductSchema!
  promotionStatus: ProductPromotionStatus!
  dailyPromotionBudget: CurrencyValue!
  lastUpdateDate: Datetime
  periodStats(startTime: DatetimeInput!, endTime: DatetimeInput!): ProductPromotionPeriodStats!
  lifetimeStats: ProductPromotionLifetimeStats!
  refundAssurance: ProductPromotionRefundAssurance!
  intenseBoost: Boolean
}

enum ProductPromotionSearchType {
  ID
  NAME
  SKU
}

enum ProductPromotionStatus {
  ACTIVE
  OUT_OF_BALANCE
  INACTIVE
}

input ProductPromotionsInput {
  productBudgetInfo: [ProductPromotionInput!]!
}

type ProductSchema {
  id: ObjectIdType!
  sku: String
  name: String!
  smallPictureUrl: String!
  categories: [TrueTagSchema!]
  description: String!
  enabled: Boolean!
  variations: [VariationSchema!]!
  mainImage: ImageSchema!
  extraImages: [ImageSchema!]
  shipping(warehouseId: String): ShippingSchema!
  createTime: Datetime!
  lastUpdateTime: Datetime!
  sales: Int!
  totalInventory: Int!
  variationCount: Int!
  merchantId: ObjectIdType!
  tags: [String!]!
  reviewStatus: CommerceProductReviewStatus!
  wishes: Int!
  isUnityBlacklisted: Boolean!
  isUnityPendingStandardWarehouse: Boolean!
  unityEffectiveDateStandardWarehouse: Datetime
  isPromoted: Boolean!
  requestedBrandId: ObjectIdType
  requestedBrand: BrandSchema
  msrp: CurrencyValue
  upc: String
  shippingProfile: ShippingProfileSchema
  totalGmv: CurrencyValue!
  demoVideo: ProductVideo
  isRemovedByWish: Boolean!
  isRemovedByMerchant: Boolean!
  isRemoved: Boolean!
  isEuCompliant: Boolean!
  stats: ProductStats!
  condition: CommerceProductCondition
  trueTags: [TrueTagSchema!]
  eligibleForCategoryDispute: ProductCategoryDisputeEligibility
  referenceWeight: Weight
  referenceLength: Length
  referenceVolume: Volume
  referenceArea: Area
  referenceUnit: Count
  countryBlocks: [ProductCountryBlockSchema!]
  maxQuantity: Int
}

enum ProductSearchType {
  ID
  NAME
  SKU
}

input ProductSort {
  field: ProductSortField!
  order: SortOrderType!
}

enum ProductSortField {
  ID
  SALES
  SKU
  LAST_UPDATE
}

type ProductStats {
  totals(days: Int!, coreMetricsOnly: Boolean = false): ProductTotalStats!
  daily(days: Int!, coreMetricsOnly: Boolean = false): [ProductTotalStats!]!
}

type ProductTierPriceSchema {
  tier: ProductListingPlanTier!
  productCount: Int!
  price: CurrencyValue!
}

type ProductTotalStats {
  gmv: CurrencyValue!
  orders: Int!
  impressions: BigInt!
  startDate: Datetime!
  endDate: Datetime!
}

input ProductUpsertInput {
  id: ObjectIdType
  enabled: Boolean
  name: String
  description: String
  variations: [VariationInput!]
  images: [ImageInput!]
  defaultShipping: [DefaultShippingInput!]
  domesticShipping: [DomesticShippingInput!]
  sku: String
  upc: String
  requestedBrandId: ObjectIdType
  tags: [String!]
  warehouseId: ObjectIdType
  countryShipping: [WarehouseCountryShippingInput!]
  msrp: CurrencyInput
  shippingProfileId: ObjectIdType
  shippingProfile: ShippingProfileUpsertInput
  demoVideoSourceUrl: String
  condition: CommerceProductCondition
  referenceWeight: WeightInput
  referenceLength: LengthInput
  referenceVolume: VolumeInput
  referenceArea: AreaInput
  referenceUnit: CountInput
  maxQuantity: Int
}

type ProductVideo {
  merchantId: ObjectIdType!
  productId: ObjectIdType!
  lowQuality: RaccVideoAsset
  mediumQuality: RaccVideoAsset
  highQuality: RaccVideoAsset
  preview: RaccVideoAsset
  uploadTime: Datetime!
  source: RaccVideoAsset!
  state: ProductVideoState!
  rejectionReason: String
}

input ProductVideoContentReviewTraits {
  rotationIsIncorrect: Boolean
  isBlank: Boolean
  isImageSlideshow: Boolean
  isBlurry: Boolean
  isScreenRecording: Boolean
  hasEngravedText: Boolean
  hasHatefulSymbol: Boolean
  hasPartialNudity: Boolean
  hasEngravedNonEnglishText: Boolean
  hasObsceneGraphicContent: Boolean
  hasNudity: Boolean
  hasPersonTalking: Boolean
  hasMerchantBranding: Boolean
  hasMale: Boolean
  hasFemale: Boolean
  hasMinor: Boolean
  refersConsumerOffPlatform: Boolean
  containsMoreThanOneProduct: Boolean
  isFactoryVideo: Boolean
}

type ProductVideoContentTagMutations {
  submitProductVideoContentReview(input: SubmitProductVideoContentReviewInput!): SubmitProductVideoContentReview
}

type ProductVideoIPTagMutations {
  submitProductVideoIpReview(input: SubmitProductVideoIPReviewInput!): SubmitProductVideoIPReview
}

enum ProductVideoIPViolationReason {
  UNLICENSED_MEDIA
  BLURRED_INFORMATION
  COPYRIGHT_IMAGES
  UNKNOWN
  COMMERCIAL
  EMBEDDED_LOGO
  PICTURED_WITH_MAJOR_BRAND
  COUNTERFEIT_OR_IP_VIOLATION
}

enum ProductVideoState {
  UNKNOWN_STATE
  PENDING_TRANSCODE
  PENDING_REVIEW
  APPROVED
  REJECTED
  FAILED_TRANSCODE
  PENDING_AUTO_REVIEW
  FAILED_AUTO_REVIEW
  FAILED_OBJECT_DETECTION
  PENDING_REKOGNITION
  FAILED_REKOGNITION
}

type ProductVideoTaggerJobSchema {
  id: ObjectIdType!
  product: ProductSchema
}

type PromotableProduct {
  product: ProductSchema!
  isInTrendingCategory: Boolean!
}

type RaccVideoAsset {
  url: String!
  contentType: String!
}

enum RefundAmountType {
  PRICE
  SHIPPING
  GENERAL
}

type RefundAssuranceConstants {
  enabled: Boolean!
  spendDiscountFactor: Float!
  guaranteedRefundRate: Float!
}

type RefundDisputeHub {
  disputeCount(states: [DisputeState!]!, reasons: [DisputeReason!], searchType: RefundDisputeSearchType, query: String): Int
  disputes(offset: Int = 0, limit: Int = 50, states: [DisputeState!]!, reasons: [DisputeReason!], searchType: RefundDisputeSearchType, query: String, sort: DisputeSort): [RefundDisputeSchema!]
}

type RefundDisputeSchema {
  id: ObjectIdType!
  orderId: ObjectIdType!
  consumerId: ObjectIdType!
  disputeAmount: CurrencyValue!
  isReturnDispute: Boolean!
  reason: DisputeReasonSchema!
  merchant: MerchantSchema!
  state: DisputeState!
  lastUpdate: Datetime!
}

enum RefundDisputeSearchType {
  ORDER_ID
}

type RefundError {
  orderId: ObjectIdType!
  message: String!
}

input RefundOrderInput {
  orderId: ObjectIdType!
  reasonCategory: RefundReasonCategory!
  buyerFraudReasonCategory: BuyerFraudReasonCategory
  reasonNote: String
  source: RefundSource
  ticketId: ObjectIdType
  brandName: String
  partialQuantity: Int
  expectedRefunds: Int
  shouldRefundToCash: Boolean = false
  partialRefundAmount: Float
  partialAmountRefundType: RefundAmountType
  partialAmountNote: String
}

type RefundOrders {
  refundedCount: Int!
  errorMessages: [RefundError!]
}

enum RefundReasonCategory {
  FBW_FAILED_TO_FULFILL_DUE_TO_CARRIER_RETURN
  ITEM_DAMAGED
  EPC_OVERWEIGHT
  COMMERCEHUB_SUPPLIER_DETECTED_FRAUD
  DOES_NOT_FIT_USERS_FAULT
  CS_REFUND_FOR_USER_CANCEL
  DECLINED_GIFT
  INVALID_ADDRESS
  ORDER_ROUTING
  BLUE_FUSION_STORE_NOT_SCAN_IN
  ITEM_NEVER_ARRIVED
  INSUFFICIENT_INVENTORY
  ITEM_IS_DANGEROUS
  POOR_QUALITY
  MERCHANT_SENT_TO_WRONG_ADDRESS
  CONTENT_POLICY_VIOLATION_CANCELLATION
  ITEM_DOES_NOT_MATCH_LISTING
  NOT_QUALIFIED_SHIPPING_PROVIDER
  BLUE_FUSION_IN_TRANSIT_LOST
  UNABLE_TO_SHIP
  COMMERCEHUB_BAD_ADDRESS
  PRODUCT_MALFUNCTION
  COMMERCEHUB_BAD_SKU
  DOES_FIT_WRONG_SIZE
  WISHBLUE_EPC_LATE_FULFILLMENT
  ONEOFF_WISH_ERROR
  FBS_STORE_QUIT
  SUSPECTED_FRAUD
  REPLACEMENT_NEVER_RECEIVED
  CB_USER_CANCELLED_ORDER
  STORE_SENT_THE_WRONG_SIZE
  RECEIVED_NOTE_FROM_MERCHANT
  BLUE_FUSION_SENT_TO_WRONG_STORE
  INCOMPLETE_ORDER
  ITEM_HELD_AT_CUSTOMS
  USER_ENTERED_INVALID_ADDRESS
  CONSUMER_FRAUD
  ITEM_IS_DAMAGED
  LATE_OR_MISSING
  MERCHANT_REPORTED_BUYER_FRAUD
  MISLEADING_LISTING
  BLUE_STORE_QUIT
  ITEM_DID_NOT_MEET_EXPECTATIONS
  ITEM_DOES_NOT_WORK_AS_DESCRIBED
  PRODUCT_LISTING_MISSING_INFO
  IN_GRACE_PERIOD_DELAY_CANCEL
  USER_NO_LONGER_WANTS_ITEM
  SHOPIFY_MERCHANT_CANCELLED
  EPC_LAST_MILE_CARRIERS_UNABLE_TO_SHIP
  EPC_OVERSIZE
  INCORRECT_QUANTITY_OF_ITEMS
  ITEM_DOES_NOT_FIT
  EXPIRED_GIFT
  SHIPPING_TAKING_TOO_LONG
  MERCHANT_OUT_OF_STOCK
  FBW_WAREHOUSE_FAILED_TO_FULFILL
  CUSTOMER_REQUEST
  FAKE_OR_COUNTERFEIT
  DOES_NOT_FIT
  PRICE_MATCH
  EPC_OVERVALUE
  WRONG_ITEM
  BLUE_STORE_OUT_OF_STOCK
  COMMERCEHUB_OTHER
  ORDER_PLACED_BY_TECHNICAL_ERROR
  DOES_NOT_FIT_INCORRECT_SIZE
  BLUE_FUSION_STORE_LOST
  MERCHANT_FAILED_TO_FULFILL
  ITEM_RETURNED_TO_SENDER
  COMMERCEHUB_CANCELLED_AT_MERCHANTS_REQUEST
  WRONG_COLOR
  USER_CANCEL_CHANGE_PAYMENT
  CONFIRMED_FUSION_ITEM_NOT_PICKED_UP
  CIRCULAR_ROUTED_UNFULFILLED
  CUSTOMER_MANUFACTURER_COMPLAINT
  USER_CANCELLED_ORDER
  STORE_UPLOADED_INVENTORY_RETURN
  RIGHT_OF_WITHDRAWAL
  DOES_NOT_FIT_WRONG_SIZE
  EMPTY_PACKAGE
  MISSING_ITEM_OR_PARTS
  PRESALE_TIMELINE_CLOSED
  COMMERCEHUB_OUT_OF_STOCK
  FRAUDULENT_ACTIVITY
  RECEIVED_WRONG_ITEM
  BLUE_ADMIN_REFUND
  ITEM_MARKED_DELIVERED_BUT_DID_NOT_ARRIVE
  ITEM_IS_COUNTERFEIT
  USER_PLACED_ORDER_BY_MISTAKE
  PREORDER_NOT_FULFILLED
  OTHER
  ITEM_IS_POOR_QUALITY
  LIMBO_ORDER_UNFULFILLED
  CLEARING_LIMBO
  BLUE_DELIVERY_NOT_DELIVERED
  EXPIRED_GROUP_BUY
  USER_ENTERED_WRONG_ADDRESS
  ITEM_MARKED_DELIVERED_NOT_ALL_ITEMS_ARRIVED
  PICKUP_NOW_ITEM_NOT_PICKED_UP
}

enum RefundSource {
  MERCHANT
  WISH
  USER
  PAYMENT_PROVIDER
}

type Region {
  code: String!
  name: String!
  country: Country!
}

input RegionShippingInput {
  regionCode: String!
  enabled: Boolean
  price: CurrencyInput
  timeToDoor: Int
}

type RegionShippingSchema {
  region: Region!
  enabled: Boolean
  price: CurrencyValue
  timeToDoor: Int
}

enum RegulatorAction {
  UPSERT
}

enum RegulatorReportAction {
  CREATE
}

enum RegulatorReportReason {
  DANGEROUS_OR_UNSAFE
  OTHER_NON_COMPLIANCE
  HAZARDOUS
  POLICY_VIOLATION
}

type RegulatorSchema {
  id: ObjectIdType!
  country: Country!
  organization: String!
  website: String!
  name: String!
  emailAddress: String!
  phoneNumber: String
  title: String
}

input RejectTrademarkInput {
  id: ObjectIdType!
  rejectionReason: String
}

type RejectTrademarksAndBrandInfo {
  ok: Boolean!
  message: String
}

input RejectTrademarksAndBrandInfoInput {
  brandInfoId: ObjectIdType!
  trademarks: [RejectTrademarkInput!]!
  brandInfoRejectionReason: String
}

type ReleasePayoutRequest {
  releasePaymentRequestId: String
  canResetPayout: Boolean
}

type RemoveFromPlus {
  ok: Boolean
}

type RemoveProduct {
  ok: Boolean!
  message: String
}

input RemoveProductInput {
  productId: ObjectIdType!
}

type RemoveShippingProfile {
  ok: Boolean!
  message: String
}

type ReportAbuseHub {
  regulator(emailAddress: String!): RegulatorSchema
  regulatorReportReasons: [RegulatorReportReason!]
}

type ReportAbuseMutations {
  upsertRegulatorReport(input: UpsertRegulatorReportInput): UpsertRegulatorReport
  upsertRegulator(input: UpsertRegulatorInput): UpsertRegulator
}

type ResetPasswordMutation {
  error: String
  ok: Boolean!
}

input ResetPasswordMutationInput {
  rawPassword: String!
  comparePassword: String!
  username: String!
  token: String!
}

input ResetReleasePaymentRequestInput {
  requestId: ObjectIdType!
}

type ResetReleasePaymentRequestMutation {
  ok: Boolean!
  message: String
}

enum ResponsiblePersonAction {
  CREATE
  REJECT
  APPROVE
  UPDATE
  DELETE
}

type ResponsiblePersonAddressSchema {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  city: String!
  zipcode: String
  countryCode: EUComplianceResponsiblePersonCountriesAndRegionsCode!
  state: String
  county: String
  country: EUComplianceResponsiblePersonCountriesAndRegions!
  phoneNumber: String
}

enum ResponsiblePersonCompliance {
  EU_REGULATION_20191020_MSR
}

enum ResponsiblePersonFieldType {
  RISK_SCORE
}

type ResponsiblePersonRejectReasonSchema {
  reason: ResponsiblePersonRejectionReason!
  text: String!
}

enum ResponsiblePersonRejectionReason {
  INVALID_NAME
  INVALID_ADDRESS
  INVALID_PHONE_AND_EMAIL
}

type ResponsiblePersonSchema {
  id: ObjectIdType!
  merchantId: ObjectIdType!
  merchant: MerchantSchema!
  address: ResponsiblePersonAddressSchema
  email: String!
  status: ResponsiblePersonStatus
  rejectReason: ResponsiblePersonRejectionReason
  compliance: ResponsiblePersonCompliance
}

input ResponsiblePersonSort {
  field: ResponsiblePersonFieldType!
  order: SortOrderType!
}

enum ResponsiblePersonStatus {
  DELETED
  ADMIN_APPROVED
  COMPLETE
  REJECTED
  INREVIEW
}

input ResponsiblePersonUpsertInput {
  action: ResponsiblePersonAction!
  responsiblePersonId: ObjectIdType
  address: EUComplianceAddressInput
  email: String
  rejectReason: ResponsiblePersonRejectionReason
  compliance: ResponsiblePersonCompliance!
}

enum RestrictedProductCategory {
  UNVERIFIED_WARRANTIES
  VITAMINS_AND_SUPPLEMENTS
  FOOD
  PLANT_AND_PLANT_SEEDS
  CHILD_HARNESS
  BEVERAGES
  PET_FOOD
  OTC_MEDICATION
  CHILD_CARSEAT
  SEATBELTS
}

enum RestrictedProductCountryCode {
  BE
  FR
  BG
  CO
  DK
  HR
  TR
  CA
  DE
  JP
  IT
  HU
  CZ
  AR
  AU
  GB
  BR
  FI
  KR
  IE
  ES
  GR
  SK
  NL
  PT
  MT
  CH
  SI
  US
  LV
  EE
  LT
  LU
  SE
  RO
  UA
  MX
  PL
  AT
}

type RestrictedProductMutations {
  upsertRestrictedProductRequest(input: RestrictedProductRequestUpsertInput): UpsertRestrictedProductRequest
}

type RestrictedProductRegion {
  regionName: String!
  regionCode: RestrictedProductRegionCode!
  isACountry: Boolean!
}

enum RestrictedProductRegionCode {
  LA
  NA
  TR
  JP
  KR
  AU
  EU
}

type RestrictedProductRegionToCategory {
  regionCode: RestrictedProductRegionCode!
  categories: [RestrictedProductCategory!]!
}

enum RestrictedProductRequestAction {
  CREATE
  BATCH_APPROVE
  APPROVE
  BATCH_REJECT
  REJECT
}

enum RestrictedProductRequestFieldType {
  merchantId
  formattedCreateTime
}

type RestrictedProductRequestSchema {
  merchant: MerchantSchema
  id: ObjectIdType!
  merchantId: ObjectIdType!
  state: RestrictedProductRequestState!
  region: RestrictedProductRegion!
  productCategory: RestrictedProductCategory!
  rejectedReason: String
  ipAddress: String
  ipAddressCountry: Country
  decisionDate: Datetime
  decisionAdminId: ObjectIdType
  requestDate: Datetime
  evidenceIds: [ObjectIdType!]
  businessEntityName: String
  legalRepName: String
  legalRepTitle: String
  merchantWarrantyDoc: MerchantFileSchema
  licenseExpiryDate: Datetime
}

input RestrictedProductRequestSort {
  field: RestrictedProductRequestFieldType!
  order: SortOrderType!
}

enum RestrictedProductRequestState {
  AWAITING_ADMIN
  AWAITING_MERCHANT
  APPROVED
  REJECTED
}

input RestrictedProductRequestUpsertInput {
  action: RestrictedProductRequestAction!
  categories: [RestrictedProductCategory!]
  region: RestrictedProductRegionCode
  legalRepName: String
  legalRepTitle: String
  businessEntityName: String
  warrantyFileUrl: String
  warrantyFilename: String
  id: ObjectIdType
  ids: [ObjectIdType!]
  rejectedReason: String
}

type RestrictedProductSchema {
  restrictedProductRequestsCount(states: [RestrictedProductRequestState!], categories: [RestrictedProductCategory!], regions: [RestrictedProductRegionCode!], merchantId: ObjectIdType): Int
  restrictedProductRequests(offset: Int = 0, limit: Int = 20, states: [RestrictedProductRequestState!], categories: [RestrictedProductCategory!], regions: [RestrictedProductRegionCode!], sort: RestrictedProductRequestSort, merchantId: ObjectIdType): [RestrictedProductRequestSchema!]
  restrictedProductCategories(region: RestrictedProductRegionCode!): [RestrictedProductCategory!]
  restrictedProductCountryCodes: [RestrictedProductCountryCode!]
  restrictedProductEuropeCountries: [Country!]
  allRegionRestrictedProductCategories: [RestrictedProductRegionToCategory!]
  restrictedProductRegions: [RestrictedProductRegion!]
  allRestrictedProductCategories: [RestrictedProductCategory!]
}

type RevShareInfoSchema {
  sourceRegion: RevShareRegion
  destRegion: RevShareRegion
  entityRegion: RevShareRegion
  productCategory: OrderRevShareProductCategory
  qualifiers: [RevShareQualifier!]
  isRevShareFromMerchant: Boolean
}

enum RevShareQualifier {
  ENTITY_EU
  CATEGORY_SEX_TOY
  ENTITY_NA
  SOURCE_NA
  DEST_EU
  IS_WISH_EXPRESS
  DEST_NA
  CATEGORY_HOUSEHOLD
  SOURCE_EU
}

enum RevShareRegion {
  EU
  NA
  OTHER
}

type RoleSchema {
  id: RoleType!
  name: String!
  description: String
}

enum RoleType {
  BD
  WISH_BLUE_OPERATOR
  LEGAL_TEAM
  ALORICA_WORKER
  USER
  ACCENTURE_DETAIL_LEAD
  SALES_REP
  MERCHANT_LEAD
  LOGISTICS_TRACKING_ADMIN
  TASKUS_TAGGER_LEAD
  BOOST_DASHBOARD
  WAREHOUSE
  TASKUS_CS_LEAD
  ACCENTURE_TAGGER_WORKER
  BRAND_PROTECTION_WORKER
  TRUSTED_TAGGER
  BRAND_PROTECTION_LEAD
  TASKUS_DETAIL_LEAD
  REQUEST_INFO_USER
  TASKUS_MC_WORKER
  MERCHANT_SUPPORT_LEAD
  CS_REP_INTERNAL
  INSURANCE_PROVIDER
  FINANCE
  COURIER
  SHIP_PROVIDER
  TEST_USER
  TRANSCOSMOS_LEAD
  TAGGER_LEAD
  CS_ADMIN
  FRAUD_TEAM_LEAD
  IN_HOUSE_TAGGER
  SUPPLY_CHAIN
  STORE_USER
  SHIP_TO_STORE_PARTNER
  CS_REP_EXTERNAL
  FRAUD_TEAM
  ACCENTURE_TAGGER_LEAD
  TASKUS_TAGGER_WORKER
  ACCENTURE_FRAUD_LEAD
  ZENDESK_SUPPORT
  SUB_USER
  TELEPERFORMANCE_BOGOTA_WORKER
  ADMIN
  DEP_IT_ADMIN
  TASKUS_DETAIL_WORKER
  TELEPERFORMANCE_WORKER
  WAREHOUSE_OPERATOR
  WISHCHAIN
  BD_LEAD
  META_USER
  TAGGER
  LOAN_PROVIDER
  TRUST_SAFETY
  ALORICA_LEAD
  WISH_BLUE_AMBASSADOR
  LEGAL_TEAM_LEAD
  ACCENTURE_DETAIL_WORKER
  OUTSOURCED_MERCHANT_SUPPORT
  TASKUS_MC_LEAD
  PAYMENT_PROVIDER
  MERCHANT_SUPPORT
  ACCENTURE_WORKER
  DEP_PRODUCT_API_USER
  TRANSCOSMOS_WORKER
  ACCENTURE_FRAUD_WORKER
  CS_REP_INTERNAL_LEAD
  QA
  ACCESS_CONTROL_MANAGER
  WISH_HR
  EPC_SUPPORT
  PENDING_USER
  TELEPERFORMANCE_BOGOTA_LEAD
  PARTNER
  WISHPOST
  TELEPERFORMANCE_LEAD
  BRAND_PARTNER
  WISH_EXPRESS_SUPPORT
  TASKUS_CS_WORKER
}

type RootMutation {
  currentUser: UserMutation
  currentMerchant: MerchantMutation
  payments: MerchantPaymentsMutation
  fulfillment: FulfillmentMutation!
  productCatalog: ProductCatalogMutations!
  shippingProfileCollection: ShippingProfileMutations!
  logistics: LogisticsMutations
  plus: PlusAdminServiceMutations
  analytics: AnalyticsServiceMutations
  marketing: MarketingServiceMutations
  policy: PolicyMutations
  authentication: AuthenticationMutations
  uploads: UploadMutations
  localOnboarding: WishLocalOnboardingMutations
  webhook: WebhookMutations
  brandPartner: BrandPartnerMutations
  identity: IdentityMutations
  tagging: TaggingMutations
  video: VideoMutations
  gating: MerchantUserGateMutations
}

type RootQuery {
  currentUser: UserSchema
  currentMerchant: MerchantSchema
  su: UserSchema
  productCatalog: ProductCatalogSchema
  shippingProfileCollection: ShippingProfileCollectionSchema
  fulfillment: FulfillmentSchema
  brand: BrandServiceSchema
  platformConstants: PlatformConstants
  merchantTermsOfService: MerchantTermsOfServiceSchema!
  tos: TosServiceSchema!
  merchants: MerchantServiceSchema
  authentication: AuthenticationServiceSchema!
  announcements: AnnouncementsService!
  marketing: MarketingServiceSchema
  logistics: LogisticsSchema
  policyPublic: PolicyPublicSchema
  payments: MerchantPaymentsService
  policy: PolicySchema
  tagging: TaggingServiceSchema
  webhook: WebhookSchema
  currentBrandPartner: BrandPartnerInfoSchema
  currentCountry: Country
  identity: IdentityServiceSchema
  cs: CustomerSupportServiceSchema
  notifications: NotificationsServiceSchema
  storefront: StorefrontServiceSchema
}

type SalesforceLeadInfo {
  valid: Boolean!
  firstName: String
  lastName: String
  email: String
  company: String
}

type ScheduledAddBudgetSchema {
  enabled: Boolean!
  amount: CurrencyValue!
  days: [Int!]!
}

input ScreenCoordinates {
  x: Float!
  y: Float!
}

input SelectWPSShippingOptionInput {
  orderId: ObjectIdType!
  shippingOptionId: String!
  additionalServiceOptions: [WPSAvailableServices!]
}

type SelectWPSShippingOptionMutation {
  ok: Boolean!
  errorMessage: String
  wpsShipmentId: String
  trackingId: String
  providerId: Int
}

enum SellerProfileVerificationDocType {
  permanent_resident_card
  business_license
  vat_registration_certificate
  passport
  certificate_of_incorporation
  national_id
  partnership_agreement
  citizenship_card
  articles_of_incorporation
  driver_license
  state_id
  social_security_card
  recent_business_returns
}

enum SellerProfileVerificationStatus {
  REVIEWING
  REJECTED
  APPROVED
  INCOMPLETE
  COMPLETE
}

type SellerVerificationFeedback {
  businessAddressIssue: String
  proofOfIdentificationIssue: String
  entityTypeIssue: String
  firstNameIssue: String
  middleNameIssue: String
  lastNameIssue: String
  phoneNumberIssue: String
  dateOfBirthIssue: String
  countryOfDomicileIssue: String
  companyNameIssue: String
  proofOfIdDocTypeIssue: String
}

type SellerVerificationSchema {
  hasCompleted: Boolean!
  isKycVerification: Boolean!
  status: SellerProfileVerificationStatus
  kycVerification: KycVerificationSchema!
  gmvCapReached: Boolean!
  gmvCapGracePeriodDays: Int
  gmvCapGracePeriodEndDate: Datetime
  impressionsPaused: Boolean!
  paymentsBlocked: Boolean!
  gmvCap: CurrencyValue
  actionRequired: Boolean!
  lastUpdateTime: Datetime
  adminFeedback: SellerVerificationFeedback
  canStart: Boolean!
  firstName: String
  middleName: String
  lastName: String
  phoneNumber: String
  businessAddress: AddressSchema
  domicileCountry: Country
  dateOfBirth: Datetime
  entityType: UserEntityType
  companyName: String
  proofOfIdFiles: [MerchantFileSchema!]
  proofOfIdDocType: SellerProfileVerificationDocType
}

type SendTestMessage {
  ok: Boolean!
  message: String
}

input SendTestMessageInput {
  subscription: WebhookSubscriptionInput!
}

enum SentimentType {
  INFO
  WARNING
  NEGATIVE
}

type SetMerchantFulfillmentExtension {
  ok: Boolean!
  errorMessage: String
}

input SetMerchantFulfillmentExtensionInput {
  extensionDays: Int
  extensionDeadlineDate: DatetimeInput
}

type SetStoreHoursMutation {
  ok: Boolean!
  message: String
}

type SetStorePhotoMutation {
  ok: Boolean!
  message: String
}

input SetWPSPackageTypeInput {
  orderId: ObjectIdType!
  packageType: WPSPackageType!
}

type SetWPSPackageTypeMutation {
  ok: Boolean!
  errorMessage: String
}

enum ShippableCountryCode {
  BD
  BE
  FR
  BG
  BA
  BB
  BM
  BO
  JP
  KZ
  BT
  JM
  ZA
  JO
  TO
  BR
  BS
  FI
  FJ
  BZ
  RU
  NL
  NO
  NA
  KY
  NG
  RE
  NZ
  PA
  MN
  NP
  RO
  NU
  CH
  CO
  GR
  CL
  BH
  CA
  SH
  GY
  CZ
  CY
  GD
  GB
  GA
  VN
  CR
  NI
  GI
  GH
  SZ
  OM
  TN
  KG
  KE
  SR
  KH
  SV
  SK
  KR
  SI
  BW
  KW
  SM
  SC
  DZ
  SA
  SG
  SE
  DO
  DM
  DK
  HR
  DE
  HU
  GT
  HN
  US
  JE
  AD
  PR
  MU
  LC
  PT
  TW
  TT
  PY
  TR
  LK
  LI
  LV
  AI
  LT
  LU
  UY
  TH
  PE
  PK
  PH
  IS
  PL
  ZM
  AE
  VE
  AG
  VG
  EE
  VI
  EG
  AM
  AL
  EC
  IT
  AR
  AU
  AT
  AW
  IN
  AZ
  IE
  ID
  ES
  ME
  MD
  MA
  MC
  UZ
  MM
  UA
  RS
  GE
  MK
  QA
  MT
  MV
  MS
  MY
  MX
  IL
}

type ShippingDetailsSchema {
  name: String!
  streetAddress1: String!
  streetAddress2: String
  streetAddress3: String
  city: String!
  zipcode: String
  phoneNumber: String
  trackingId: String
  countryCode: CountryCode!
  state: String
  region: String
  shipNote: String
  providerId: Int
  neighborhood: String
  country: Country
  provider: ShippingProviderSchema
  verificationState: AddressVerificationState!
}

type ShippingOriginSettings {
  destinationRegion: String!
  shippingType: String!
  originCountryCode: String!
  originCountryName: String
}

input ShippingPlanInput {
  warehouseId: ObjectIdType!
  skus: [ShippingPlanSKUInput!]!
}

input ShippingPlanSKUInput {
  variationId: ObjectIdType!
  quantity: Int!
  dimensions: PackageDimensionsInput!
}

type ShippingPlanSKUSchema {
  sku: String!
  quantity: Int!
  variationId: ObjectIdType!
  dimensions: VariationDimensions!
  weight: Weight!
}

type ShippingPlanSchema {
  id: ObjectIdType!
  warehouseId: ObjectIdType!
  skus: [ShippingPlanSKUSchema!]
}

type ShippingProfileCollectionSchema {
  shippingProfiles(query: String, searchType: ShippingProfileSearchType, offset: Int = 0, limit: Int = 20): [ShippingProfileSchema!]!
  shippingProfileCount(query: String, searchType: ShippingProfileSearchType): Int!
}

input ShippingProfileLinkInput {
  shippingProfileId: ObjectIdType
  productIds: [ObjectIdType!]!
}

type ShippingProfileMutations {
  upsertShippingProfile(input: ShippingProfileUpsertInput): UpsertShippingProfile
  removeShippingProfile(input: ShippingProfileRemoveInput): RemoveShippingProfile
  linkShippingProfile(input: ShippingProfileLinkInput): LinkShippingProfile
}

input ShippingProfileRemoveInput {
  idsToRemove: [ObjectIdType!]
}

type ShippingProfileSchema {
  id: ObjectIdType!
  name: String!
  shippingDetailsPerDestination: [DestinationShippingProfileSchema!]
  linkedProductCount: Int!
  description: String!
}

enum ShippingProfileSearchType {
  PROFILE_ID
  PRODUCT_ID
  PROFILE_NAME
}

input ShippingProfileUpsertInput {
  id: ObjectIdType
  name: String
  shippingDetailsPerDestination: [DestinationShippingProfileInput!]
}

input ShippingProviderCountryInput {
  countryCode: CountryCode!
  timelineOperations: [ShippingProviderOperationInput!]
}

type ShippingProviderCountrySchema {
  country: Country!
  timelineOperations: [ShippingProviderOperationSchema!]
}

input ShippingProviderInput {
  providerId: Int!
  name: String!
  trackingUrl: String!
  providerUrl: String!
  originCountry: CountryCode
  inputTrackingSources: [ShippingProviderTrackerInput!]
  inputReleaseTime: DatetimeInput
  inputReleaseType: ShippingProviderOperationTypeEnum
  inputRestrictCountries: [ShippingProviderCountryInput!]
  postalCodeRequired: Boolean
  countryRequired: Boolean
  trackingShipDateRequired: Boolean
  isCnProvider: Boolean
  shippingProviderType: ShippingProviderState
  needAddTimelineOperation: Boolean
}

input ShippingProviderOperationInput {
  dateTime: DatetimeInput
  type: ShippingProviderOperationTypeEnum
}

type ShippingProviderOperationSchema {
  dateTime: Datetime
  type: ShippingProviderOperationTypeEnum
}

enum ShippingProviderOperationTypeEnum {
  REMOVE_SHIPPING_PROVIDER
  ADD_SHIPPING_PROVIDER
}

type ShippingProviderSchema {
  id: Int!
  name: String!
  trackingUrl: String!
  providerUrl: String!
  originCountry: Country
  trackers: [ShippingProviderTrackerSchema!]
  timelineOperations: [ShippingProviderOperationSchema!]
  restrictionCountries: [ShippingProviderCountrySchema!]
  status: Boolean!
  lastUpdate: Datetime
  postalCodeRequired: Boolean
  countryRequired: Boolean
  trackingShipDateRequired: Boolean
  isCnProvider: Boolean
  shippingProviderType: ShippingProviderState
  isQualified: Boolean
  qualifiedNote: String
}

enum ShippingProviderSearchType {
  PROVIDER_ID
  NAME
}

enum ShippingProviderState {
  NON_TEST_SERVICE
  TEST_SERVICE
  UNREGISTER_TEST_SERVICE
  ACTIVE
  DELETED
}

input ShippingProviderTrackerInput {
  trackingSource: TrackingSourceEnum!
  trackingSlug: String!
  ratio: Int!
}

type ShippingProviderTrackerSchema {
  trackingSource: TrackingSourceEnum!
  trackingName: String!
  trackingSlug: String
  ratio: Int!
}

type ShippingSchema {
  defaultShipping: [DefaultShippingSchema!]
  domesticShipping: [DomesticShippingSchema!]
  warehouseCountryShipping(shippingTypes: [WarehouseShippingType!] = [1, 2]): [WarehouseCountryShippingSchema!]
}

type ShippingSettingMutations {
  updateShippingSetting(useShopifyShippingRate: Boolean, countryShipping: [CountryShippingSetting!], otherCountriesShipping: OtherCountriesShippingSetting, isUpsert: Boolean = false): UpdateShippingSetting
}

type ShippingSettingsSchema {
  country: Country!
  enabled: Boolean!
  price: CurrencyValue
}

type ShopifyOnboardingAuthInfo {
  shopUrl: String
  apiKey: String!
  authToken: String
}

type ShopifySchema {
  apiKey: String
  shopUrl: String!
  shippingProfileId: String!
  hasFlatRates: Boolean!
  eligibleProductCount: Int!
  onboardingAuthToken: String!
  preorderCount: Int!
}

enum SignupSource {
  SIGNUP_GREEN_CHANNEL
  SIGNUP_V4
  SIGNUP_V5
  SIGNUP_V3
  SIGNUP_MOBILE
  SIGNUP_MERCHANT_PLUS
  SIGNUP_EXPRESS
}

enum SortOrderType {
  ASC
  DESC
}

type SpecialOrderProgramSchema {
  name: String!
  taskLink: String
}

type StaticFines {
  cancellationFine: CurrencyValue!
}

input StoreHoursDuration {
  startTime: DatetimeInput!
  endTime: DatetimeInput!
}

input StoreHoursInput {
  storeHours: [DayStoreHoursConfiguration!]!
}

input StorePhotoInput {
  photoUrl: String!
}

type StoreReviewSummarySchema {
  count: Int!
  averageRating: Float!
}

input StoreSignupAutocompleteInput {
  placeId: String
  detailsResult: JSONString
  attributions: [String!]
  storeNameValidated: Boolean
}

input StoreSignupInput {
  emailAddress: String!
  password: String!
  firstName: String!
  lastName: String!
  storeName: String!
  phoneNumber: String!
  storeAddressLine1: String!
  storeAddressLine2: String
  city: String!
  countryName: String!
  stateOrProvince: String!
  zipOrPostalCode: String!
  hasRetailStorefront: Boolean!
  storeCategory: Int
  referralCode: String
  autocomplete: StoreSignupAutocompleteInput
}

type StoreSignupMutation {
  ok: Boolean!
  message: String
}

type StorefrontCustomizationSchema {
  id: ObjectIdType!
  feeds: [StorefrontFeedSchema!]!
  visualTheme: StorefrontVisualThemeSchema!
}

type StorefrontFeedSchema {
  id: ObjectIdType!
  name: String!
}

type StorefrontSchema {
  name: String!
  creationDate: Datetime!
  reviewSummary: StoreReviewSummarySchema!
  location: Country
  customization: StorefrontCustomizationSchema
}

type StorefrontServiceSchema {
  serviceEnabled: Boolean!
  merchantEnabled(id: ObjectIdType!): Boolean!
  forMerchant(id: ObjectIdType!): StorefrontSchema
}

type StorefrontVisualThemeSchema {
  name: String!
  primaryColor: String!
  secondaryColor: String!
}

type SubmitProductVideoContentReview {
  ok: Boolean!
  message: String
}

input SubmitProductVideoContentReviewInput {
  jobId: ObjectIdType!
  videoTraits: ProductVideoContentReviewTraits!
  videoRelatesToProduct: Boolean!
  videoQuality: VideoQualityLevel!
}

type SubmitProductVideoIPReview {
  ok: Boolean!
  message: String
}

input SubmitProductVideoIPReviewInput {
  jobId: ObjectIdType!
  ipViolationReason: ProductVideoIPViolationReason
  ipInfringedBrandId: ObjectIdType
  blurredInformationCategory: BlurredInformationCategory
}

input SubmitWarehouseVerificationRequestInput {
  warehouseId: ObjectIdType!
  documentUrls: [String!]!
}

type SubmitWarehouseVerificationRequestMutation {
  ok: Boolean!
  message: String
}

enum SubscriptionEndpointType {
  URL
  ARN
}

type SwedenConfirmedDeliveredCarrierTypes {
  carrierId: Int!
  swedenDeliveredCarrierTypes: [SwedenDeliveredCarrierType!]!
}

enum SwedenDeliveredCarrierType {
  IntraEUCarrier
  IntlEUCarrier
}

type TaggingMutations {
  productVideoContentTag: ProductVideoContentTagMutations
  productVideoIpTag: ProductVideoIPTagMutations
  platformSweeps: PlatformSweepMutations
}

type TaggingServiceSchema {
  ipViolationTaggingManagement: IPViolationTaggingManagement
  productVideoContentTaggerJob: ProductVideoTaggerJobSchema
  productVideoIpTaggerJob: ProductVideoTaggerJobSchema
  counterfeitTaggingManagement: CounterfeitTaggingManagement
}

type TaggingViolationReason {
  reason: CounterfeitReasonCode!
  internalDisplayName: String!
  displayName: String
  subcategories: [TaggingViolationSubcategory!]
  isBrandTaggingReason: Boolean!
}

enum TaggingViolationSubReasonCode {
  BRAND_DISCREPANCY
  CONFEDERATE_FLAG
  SUBSCRIPTIONS_OR_MEMBERSHIPS
  DOMESTIC_TERRORISTS_MEMORABILIA
  VAPE_LIQUID
  PLANT_SEED_WITH_IMPOSSIBLE_CLAIM
  DANGEROUS_NON_CPA_VIOLATION
  LASER_DISC
  RECREATIONAL_DRUGS_AND_CHEMICALS
  PRESCRIPTION_STRENGTH_ITEMS
  NOT_FOCUS_OF_MAIN_IMAGE
  REVIEW_SHOW_WRONG_PRODUCT
  SPY_CAMERAS
  TERRORIST_PROMOTION_GROUPS
  EURO_CURRENCY
  UNCENSORED_EROTIC_ANIME
  PROHIBITED_CUSTOMS_CN
  ASSAULT_WEAPON_CONVERSION_PIECES
  SIZE_MISREPRESENTATION_MAIN_IMAGE
  SIZE_NOT_AS_ADVERTISED
  PENICILLIN
  VHS_TAPE
  VIDEO_GAME
  EPA_EMMISIONS_DEFEAT_US
  RATING_SHOW_WRONG_PRODUCT
  HUMAN_GROWTH_HORMONE
  BLURRED_LOGOS
  SEATBELTS
  FULLY_LOADED_TV_BOXES
  GUN_SILENCER_COMPONENTS
  ANIME_PRODUCTS
  LIVE_ANIMAL
  UNVERIFIED_WARRANTIES
  ALCOHOL
  TOBACCO
  SIZE_MISPRESENTATION
  POPPERS_AND_MUSCLE_RELAXANTS
  HATEFUL_IMAGERY
  NOT_FOCUS_MAIN_IMAGE
  UNVERIFIED_FREE_SHIPPING
  GUN_SILENCER_MISUSE
  METAL_NINJA_STARS
  CN_PROHIBITED_PRODUCT_STUN_GUNS
  FULLY_EXPOSED_NIPPLE
  HOUSEKEEPING_TOUR_PACKAGES
  RECORDS
  UNVERIFIED_LOGO
  NUDE_MINOR_IN_NON_SEXUAL_CONTEXT
  MERCAHNT_CONTACT_OR_REFERAL
  RACIAL_CLEANSING
  PLANTS
  HOOKAH_PEN
  VITAMINS_AND_SUPPLEMENTS
  FOOD
  ENDANGERED_SPECIES
  MOD_BOXES
  UNSUPPORTED_MEDICAL_CLAIMS
  BULLYING
  PURCHANSED_FOLLOWERS
  EROTIC_SETUPS
  OTC_MEDICATION
  HOVERBOARDS
  EPA_PESTICIDES_US
  HUMAN_BY_PRODUCTS
  COUNTERFEIT_CURRENCY
  VIRTUAL_MONEY
  MARIJUANA
  TIRE_SPIKES
  BLUE_RAY
  PET_FOOD
  ECIGARETTE_VAPE
  IMAGE_OF_MASTURBATION
  DVD
  CHLOROFORM
  ANTI_GAY
  UNVERFIED_PRICE_INFORMATION
  TOBACCO_SEEDS
  MODELS_IN_LINGERIE
  BLURRED_WATERMARKS
  COMPETITOR_WATERMARK
  ODOMETER_CORRECTION_TOOLS
  PROUD_BOY_MEMORABILIA
  MISLEADING_KEY_FEATURE
  CHILD_HARNESS
  PILL_PRESSES
  HITLER_IMAGERY
  OTHER_WHITE_SUPREMACY_MEMORABILIA
  PESTICIDES
  BLURRED_TAGS
  UNAUTHROIZED_USE_WISH
  NAZI_MEMORABILIA
  HATE_SPEECH
  MAGNETS_AS_TOYS
  IMITATION_CURRENCY
  EXPLOSIVE_WEAPONS
  CD
  US_PROP_MONEY
  PRICE_POINT_UNREASONABLE
  CONTACT_LENS_SOLUTION
  KKK_PARAPHERNALIA
  FULLY_EXPOSED_ANUS
  BEVERAGES
  CPSC_VIOLATION
  UNVERIFIED_SHIPPING_TIME_FRAME
  IMAGE_OF_PENETRATION
  CASSETTE_TAPE
  GLYPHOSATE
  CN_PROHIBITED_PRODUCT_TASERS
  GIFT_CARDS_OR_ACCESS_CODES
  PLANT_SEEDS
  FULLY_EXPOSED_GENITAL
  LASER_POINTERS
  VALUE_VARIANCE
  JAMMERS
  FIREARMS_AND_GUNS
  CHILD_CARSEAT
  CN_PROHIBITED_PRODUCT_IMITATION_FIREARMS
  SEXUAL_CONTENT_INCLUDING_MINOR
  GUN_BUILDING_KITS
  PLANT_SEED_WITH_IMPOSSIBLE_CLAIM_V2
  PRODUCT_VARIANCE
  IMAGE_NOT_PRODUCT
  EYELASH_GROWTH_SERUM
  FEEDBACK_ABOUT_NO_PRODUCT
  CIGARETTE
  CN_PROHIBITED_PRODUCT_BB_GUNS
  NOT_DESCRIBE_AVAILABLE_QUANTITY
  CN_PROHIBITED_PRODUCT_AIRSOFT
  HATEFUL_CORONAVIRUS_PRODUCTS
  INJECTABLE_ITEMS
  SOFTWARE
  SIZE_COLOR_OPTION_GAMING
  HATE_GROUPS
  QANON_MEMORABILIA
  SURPRISE_BOX
  CUSTOMER_FEEDBACK_ABOUT_FALSE_SPEC
  BUTANE
  SEXUALLY_EXPLICIT_MATERIAL
  GUN_SILENCERS
  CONTACTS
  TITLE_IMAGE_MISMATCH
  COCKROACH_CHALK
  MISLEADING_WIG
  DANGEROUS_CPA_VIOLATION
  AMMUNITION
}

type TaggingViolationSubcategory {
  subcategory: TaggingViolationSubReasonCode!
  internalDisplayName: String!
  displayName: String
}

type TakedownRequestContestSchema {
  contestId: ObjectIdType!
  state: TakedownRequestContestState!
  source: TakedownRequestContestSource!
  product: ProductSchema!
  merchant: MerchantSchema
}

enum TakedownRequestContestSource {
  REPORTED
  NONE
  IMAGE_MATCH
}

enum TakedownRequestContestState {
  REJECTED
  APPROVED
  PENDING_REVIEW
}

type TakedownRequestMutations {
  createTakedownRequest(input: CreateTakedownRequestInput): CreateTakedownRequest
}

type TakedownRequestSchema {
  id: ObjectIdType!
  reportedDate: Datetime!
  brand: BrandSchema!
  typeOfInfringement: TypeOfInfringement!
  state: TakedownRequestState!
  notes: String
  products(offset: Int = 0, count: Int = 10, states: [TakedownRequestContestState!]): [TakedownRequestContestSchema!]!
  numProducts(states: [TakedownRequestContestState!]): Int!
}

enum TakedownRequestState {
  ACTIVE
  COMPLETE
  PENDING
}

type TaxAuthoritySchema {
  id: String!
  name: String!
  type: TaxAuthorityType!
  officialName: String
}

enum TaxAuthorityType {
  FCP_ST
  COUNTY_SALES_USE
  DISTRICT_FOOD_BEVERAGE
  MWST
  GST
  CITY_AMUSEMENT
  HST
  PIS
  STATE_FOOD_BEVERAGE
  GIT
  IGST
  ICMS_RD
  VAT
  IPI
  DISTRICT_SALES_USE
  DISTRICT_FEES
  TOURISM_TAX_ADDITIONAL
  COUNTY_AMUSEMENT
  NHIL
  COUNTY_RENTAL
  CITY_RENTAL
  CITY_FOOD_BEVERAGE
  ITBMS
  EEE
  CITY_FEES
  ICMS_ST_CNAE_IVA
  BMP
  SCT
  IGV
  TOURISM_TAX
  GCT
  CSU
  CST
  THSBT
  STATE_SALES_USE
  IGI
  IVA
  MOT
  CBT
  PST
  ISS
  ISV
  IST
  ICMS
  SUT
  COF
  COM
  ICMS_ST
  FCP
  STATE_AMUSEMENT
  COMPENSATION_CESS
  KDV
  PVM
  ICMS_ST_CNAE
  FEE
  IMI
  PDV
  ICMS_PMC
  CLT
  OMB
  TVA
  SGST
  ST
  SUFRAMA
  EXC
  MRDT
  PCL
  IGIC
  UTGST
  DISTRICT_AMUSEMENT
  IPSI
  ITBIS
  DPH
  TT
  DISTRICT_RENTAL
  COUNTY_FEES
  COUNTY_FOOD_BEVERAGE
  CGST
  CITY_SALES_USE
  CONSUMPTION_TAX
  II
  ICMS_PF
  MVA
  TELECOM
  STATE_FEES
  ICMS_CR
  QST
  STATE_RENTAL
}

type TaxConstants {
  us: USTaxConstants!
  ca: CATaxConstants!
  marketplaceCountries(includeUpcoming: Boolean = true): [TaxMarketplaceCountry!]!
  marketplaceUnions(includeUpcoming: Boolean = true): [TaxMarketplaceUnion!]!
  ukVatInfo: UKVatInfoSchema!
}

type TaxLiabilitySchema {
  userEntityTypeForRemit: KYCMerchantType
  remitType: CommerceTransactionTaxRemitType
  remitPercentage: Float
}

type TaxMarketplaceCountry {
  country: Country!
  launchDate: Datetime
}

type TaxMarketplaceUnion {
  union: Union!
  launchDate: Datetime
}

type TaxSetting {
  id: ObjectIdType!
  authority: TaxSettingAuthority!
  taxNumber: String
  taxNumberType: TaxSettingTaxNumberType
  merchantId: ObjectIdType!
  lastUpdated: Datetime!
  status: CommerceMerchantTaxInfoStatus!
  reviewStatus: CommerceMerchantReviewStatus
  certificateFileUrl: String
  taxCertificateFile: MerchantFileSchema
  ossRegistrationCountry: Country
  germanyDetails: TaxSettingGermanyDetails
  mexicoDetails: TaxSettingMexicoDetails
  taxLiability(whenShippingFromDomicileCountry: Boolean = true): [TaxLiabilitySchema!]
  euDetails: TaxSettingEUDetails
}

type TaxSettingAuthority {
  displayName: String
  stateCode: String
  country: Country!
  level: TaxSettingAuthorityLevel!
}

enum TaxSettingAuthorityLevel {
  COUNTY
  CITY
  STATE
  DISTRICT
  COUNTRY
}

type TaxSettingEUDetails {
  ustSt1T1Number: String
}

type TaxSettingGermanyDetails {
  noNumberReason: CommerceMerchantTaxInfoGermanyNoNumberReason
}

type TaxSettingMexicoDetails {
  defaultShipFromIsMx: Boolean
}

enum TaxSettingTaxNumberType {
  VALUE_ADDED_TAX
  NATIONAL_INSURANCE_NUMBER
  OSS
  OTHER
  COMPANY_REGISTRITION_NUMBER
  TAX_IDENTIFICATION_NUMBER
}

input TaxSettingsInput {
  taxNumber: String
  countryCode: CountryCode!
  ossRegistrationCountryCode: CountryCode
  authorityLevel: TaxSettingAuthorityLevel!
  stateCode: String
  displayName: String
  taxNumberType: TaxSettingTaxNumberType
  certificateFileUrl: String
  mxDefaultShipFromIsMx: Boolean
  ustSt1T1Number: String
}

type TaxSettingsMutations {
  upsertTaxSettings(input: UpsertTaxSettingsInput!): UpsertTaxSettingsMutation!
}

enum TaxTargetCurrency {
  CUSTOMER
  MERCHANT
  AUTHORITY
}

enum TaxType {
  US_SC
  US_IM
  US_SA
  INTERNATIONAL_EXC
  INTERNATIONAL_ES
  US_VG
  US_MVT
  US_SV
  INTERNATIONAL_EC
  US_US
  US_UU
  INTERNATIONAL_CA1
  INTERNATIONAL_ER
  US_CU
  INTERNATIONAL_NL
  INTERNATIONAL_UN
  INTERNATIONAL_MVT
  INTERNATIONAL_SN
  US_CA
  US_BO
  INTERNATIONAL_NR
  US_UN
  INTERNATIONAL_TR
  INTERNATIONAL_US
  INTERNATIONAL_SA
  INTERNATIONAL_ZI
  INTERNATIONAL_DS
  US_S
  INTERNATIONAL_ZC
  INTERNATIONAL_SI
  INTERNATIONAL_ZE
  INTERNATIONAL_RC
  US_IC
  US_RC
  US_CA1
  US_GR
  US_STK
  US_RU
  INTERNATIONAL_ZR
  INTERNATIONAL_TE
  US_LT
  US_RS
  US_ZE
  INTERNATIONAL_IR
  INTERNATIONAL_IS
  INTERNATIONAL_VG
  INTERNATIONAL_AC
  INTERNATIONAL_MP
  INTERNATIONAL_CA
  INTERNATIONAL_IC
  INTERNATIONAL_STK
  INTERNATIONAL_S
  US_ZR
  US_EXC
  US_NL
  INTERNATIONAL_IM
  INTERNATIONAL_MA
}

enum TermsOfServiceRegionType {
  EU
  CN
  US
}

type TermsOfServiceSchema {
  tosType: TermsOfServiceType!
  version: Int!
  region: TermsOfServiceRegionType
  releaseDate: Datetime!
  canAccept: Boolean!
  merchantTermsOfServiceAgreement: MerchantTermsOfServiceAgreementSchema
}

enum TermsOfServiceType {
  MERCHANT
  PAYMENT_REAL_NAME_AUTH
  MERCHANT_PARTNER
  PRODUCT_BOOST
  WISH_EXPRESS
  UPS
  WISH_EXPRESS_RETURN
  WPS
  EPC
}

enum TicketSearchType {
  PRODUCT_ID
  ID
  TRANSACTION_ID
  USER_NAME
  ORDER_ID
  SKU
}

enum TicketSortFieldType {
  CREATED_TIME
  LAST_UPDATE
}

type Timedelta {
  seconds: Int!
  minutes: Float!
  hours: Float!
  days: Float!
}

type TodoItem {
  id: ObjectIdType!
  type: MerchantTodoItemType!
  sentiment: MerchantTodoItemSentiment!
  completed: Boolean!
  snoozeOptionText: String
  canSnooze: Boolean!
  snoozeCount: Int!
  snoozeHours: Int
  pinned: Boolean!
}

type TodoSchema {
  items: [TodoItem!]!
}

type TosServiceSchema {
  termsOfService(tosType: TermsOfServiceType!, version: Int, country: CountryCode): TermsOfServiceSchema
}

type TrackingCheckpointLocationSchema {
  city: String
  state: String
  country: Country
  zipcode: String
  coordinates: GeoCoordinates
}

type TrackingCheckpointSchema {
  date: Datetime!
  resultingTrackingState: CheckpointAfterActionState!
  message: String
  wishpostAction: String
  type: TrackingInfoCheckpointType
  location: TrackingCheckpointLocationSchema!
}

type TrackingDisputeHub {
  disputeCount(states: [TrackingDisputeState!]!, searchType: TrackingDisputeSearchType, query: String, creationDateStart: DatetimeInput, creationDateEnd: DatetimeInput): Int
  disputes(offset: Int = 0, limit: Int = 50, states: [TrackingDisputeState!]!, searchType: TrackingDisputeSearchType, query: String, creationDateStart: DatetimeInput, creationDateEnd: DatetimeInput, sort: DisputeSort): [TrackingDisputeSchema!]
}

type TrackingDisputeSchema {
  id: ObjectIdType!
  state: TrackingDisputeState!
  orderId: ObjectIdType!
  trackingId: String
  requestReason: String!
  merchant: MerchantSchema!
  lastUpdate: Datetime
  isWishExpressLate: Boolean!
}

enum TrackingDisputeSearchType {
  ORDER_ID
}

enum TrackingDisputeState {
  AWAITING_ADMIN
  CANCELLED
  AWAITING_MERCHANT
  APPROVED
  DECLINED
}

enum TrackingInfoCheckpointType {
  SOURCE
  DESTINATION
  WISHPOST_DELEGATE
  UNKNOWN
}

enum TrackingSourceEnum {
  TRACKINGMORE
  DHL
  GENERIC
  TIS
  EASYPOST
  NO_OP
  TRACK17
  WOSP
  USER
  EMS
  AFTERSHIP
  WISHPOST
  CHINAPOST
}

enum TrademarkCountryCode {
  US
  EU
  CA
  GB
  MX
  FR
  CN
  IT
  JP
  DE
  SG
  NL
  IN
  CH
  AU
  ES
  BR
  TR
  AE
}

enum TransactionPaymentType {
  BRAINTREE_FB
  UNKNOWN
  PAYPAL
  SHOPIFY_CHECKOUT
  PAYTM
  TWITTERDIRECTBUY
  KLARNA_PAYLATER
  NONE
  AFFIRM
  EBANX
  STRIPE_SAMSUNG_PAY
  KLARNA
  BRAINTREE
  PIX
  PAYNEARME
  BRAINTREE_ACH
  BRAINTREE_GOOGLE
  AFTERPAY
  XENDIT_INVOICE
  STRIPE
  BRAINTREE_PAYPAL
  OXXO
  BOKU
  ADYEN
  COMMERCE_LOAN
  OFFLINE_CASH
  STRIPE_GOOGLE
  FB_CHECKOUT
  ADYEN_BANKING
  BOLETO
  STRIPE_APPLE_PAY
  STRIPE_IDEAL
  BRAINTREE_VENMO
}

type TrueTagSchema {
  id: ObjectIdType!
  name: String!
  topLevel: TrueTagSchema
}

enum TwoFactorCodeState {
  EXPIRED
  INVALID
  OK
}

type TwoFactorMutations {
  sendCode: TwoFactorSendCodeMutation!
  verifyCode(input: TwoFactorVerifyCodeInput!): TwoFactorVerifyCodeMutation!
  turnOn(input: TwoFactorTurnOnInput!): TwoFactorTurnOnMutation!
  turnOff(input: TwoFactorTurnOffInput!): TwoFactorTurnOffMutation!
}

type TwoFactorSendCodeMutation {
  error: String
  sent: Boolean
  sentTime: Datetime
}

input TwoFactorTurnOffInput {
  code: String!
}

type TwoFactorTurnOffMutation {
  error: String
  codeState: TwoFactorCodeState
  isOn: Boolean
}

input TwoFactorTurnOnInput {
  code: String!
}

type TwoFactorTurnOnMutation {
  error: String
  codeState: TwoFactorCodeState
  isOn: Boolean
  backupCodes: [String!]
}

input TwoFactorVerifyCodeInput {
  code: String!
}

type TwoFactorVerifyCodeMutation {
  error: String
  codeState: TwoFactorCodeState
}

enum TypeOfInfringement {
  TRADEMARK_INFRINGEMENT
  COPYRIGHT
  EU_COMMUNITY_DESIGN_VIOLATION
  BRAND_PROTECTION
  RIGHT_OF_PUBLICITY
  COUNTERFEIT
}

type UIStateMutations {
  clear(input: UpdateUIStateInput!): ClearUIState!
  update(input: UpdateUIStateInput!): UpdateUIState!
  clearAll: ClearAllUIState!
}

type UIStateSchema {
  string(state: UserUIState!): String
  int(state: UserUIState!): Int
  bool(state: UserUIState!): Boolean
  stringArray(state: UserUIState!): [String!]
  intArray(state: UserUIState!): [Int!]
}

type UKVatInfoSchema {
  name: String!
  number: String!
  eoriNumber: String!
}

type UPCProductSchema {
  upc: String!
  name: String
  description: String
  variations: [UPCVariationSchema!]
  images: [String]
  brandName: String
}

type UPCProductServiceSchema {
  product(upc: String! = "Barcode of the product"): UPCProductSchema
}

type UPCVariationSchema {
  upc: String!
  size: String
  color: String
  price: CurrencyValue
  images: [String]
  productName: String
}

type USTaxConstants {
  marketplaceStates: [String!]!
  marketplaceMunicipalities: [USTaxMarketplaceMunicipalities!]!
  nomadStates: [String!]!
  homeRuleStates: [String!]!
}

type USTaxMarketplaceMunicipalities {
  stateCode: String!
  cities: [String!]!
  counties: [String!]!
  districts: [String!]!
}

type Union {
  code: String!
  name(localized: Boolean = true): String!
  countries: [Country!]
}

type UpdateAuditQueueWarning {
  ok: Boolean!
  message: String
}

input UpdateAuditQueueWarningInput {
  action: MerchantWarningAuditAction!
  id: ObjectIdType!
  auditRevertReason: MerchantWarningAuditRevertReason
}

type UpdateMerchantFinalSale {
  ok: Boolean!
  message: String
}

type UpdateMerchantGamingReviewTicket {
  ok: Boolean!
  message: String
}

type UpdateOffsiteBoost {
  ok: Boolean!
  message: String
}

type UpdateOrderDeliveryConfirmation {
  ok: Boolean!
  errorMessage: String
}

input UpdateOrderDeliveryConfirmationInput {
  orderId: ObjectIdType!
  dateDelivered: DatetimeInput!
  trackingUrl: String
  deliveryReceiptFileUrl: String
}

input UpdatePayPalSettingInput {
  email: String!
  personalName: String!
  personalPhoneNumber: String!
  personalId: String
  businessName: String
  businessId: String
  collectorType: MerchantPaymentCollectorType!
}

type UpdatePayPalSettingMutation {
  ok: Boolean!
  message: String
  newNextPayoutTime: Datetime
}

input UpdatePayoneerSettingInput {
  personalName: String!
  personalPhoneNumber: String!
  personalId: String
  businessName: String
  businessId: String
  collectorType: MerchantPaymentCollectorType!
}

type UpdatePayoneerSettingMutation {
  ok: Boolean!
  message: String
  newNextPayoutTime: Datetime
}

input UpdatePermissionInput {
  id: String!
  permission: PermissionType!
  status: PermissionStatusType!
}

type UpdatePermissionMutation {
  ok: Boolean!
  error: String
}

type UpdateProductLogisticsMetadata {
  success: Boolean!
  errorMessage: String
}

input UpdateProductLogisticsMetadataInput {
  productId: ObjectIdType!
  variationId: ObjectIdType
  packageDimensions: PackageDimensionsInput!
}

input UpdateRoleInput {
  id: String!
  role: RoleType!
  assigned: Boolean!
}

type UpdateRoleMutation {
  ok: Boolean!
  error: String
}

type UpdateShippingProvider {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

type UpdateShippingProviderName {
  ok: Boolean!
  message: String
  shippingProvider: ShippingProviderSchema
}

input UpdateShippingProviderNameInput {
  providerId: Int!
  name: String!
}

type UpdateShippingSetting {
  ok: Boolean
  message: String
  useShopifyShippingRate: Boolean
}

type UpdateUIState {
  ok: Boolean!
  message: String
}

input UpdateUIStateInput {
  state: UserUIState!
  intValue: Int
  boolValue: Boolean
  stringValue: String
  stringArrayValue: [String!]
  intArrayValue: [Int!]
}

input UpdateUserInfoInput {
  id: ObjectIdType!
  firstName: String
  lastName: String
  email: String
  bdMerchantCountry: BDMerchantCountryCodeType
  manager: ObjectIdType
  enabled: Boolean
}

type UpdateUserInfoMutation {
  ok: Boolean!
  error: String
}

input UpdateUserQueuesInput {
  id: ObjectIdType!
  queueId: ObjectIdType!
  assigned: Boolean!
}

type UpdateUserQueuesMutation {
  ok: Boolean!
  error: String
}

type UploadEUVATTaxQuestionnaire {
  ok: Boolean!
  errorMessage: String
}

type UploadMutations {
  initiateUpload(input: InitiateUploadInput!): InitiateUploadMutation
}

type UpsertConfirmedDeliveryCarrier {
  ok: Boolean!
  message: String
}

type UpsertLinkProductCompliance {
  ok: Boolean!
  message: String
}

input UpsertMerchantSenderAddressInput {
  merchantSenderAddressId: ObjectIdType
  warehouseName: String!
  address: AddressInput!
  isDefault: Boolean!
}

type UpsertMerchantSenderAddressMutation {
  ok: Boolean!
  message: String
  id: ObjectIdType
}

type UpsertMerchantWarehouseMutation {
  ok: Boolean!
  message: String
  id: ObjectIdType
}

type UpsertProduct {
  ok: Boolean!
  message: String
  productId: ObjectIdType
}

type UpsertProductCategoryDispute {
  ok: Boolean!
  message: String
  nextId: ObjectIdType
}

input UpsertProductCategoryDisputeInput {
  action: ProductCategoryDisputeAction!
  productId: ObjectIdType
  proposedTopCategoryTagId: ObjectIdType
  merchantNote: String
  uploadFiles: [FileInput!]
  source: ProductCategoryDisputeSource
  adminUnchangedReason: ProductCategoryDisputeAdminUnchangedReason
  reason: ProductCategoryDisputeReason
  adminUnchangedOtherReasonDetails: String
  id: ObjectIdType
}

type UpsertProductPromotions {
  ok: Boolean!
  message: String
  maxAllowedSpending: CurrencyValue
}

type UpsertProductsFromCSVFile {
  ok: Boolean!
  message: String
  jobId: ObjectIdType
}

input UpsertProductsFromCSVFileInput {
  fileUrl: String!
  columnIdList: [ProductCSVImportColumnId!]
  feedType: ProductCSVJobType!
}

type UpsertRegulator {
  ok: Boolean!
  message: String
}

input UpsertRegulatorInput {
  action: RegulatorAction!
  countryRegionCode: CountryCode!
  organization: String!
  website: String!
  name: String!
  emailAddress: String!
  phoneNumber: String
  title: String
}

type UpsertRegulatorReport {
  ok: Boolean!
  message: String
}

input UpsertRegulatorReportInput {
  action: RegulatorReportAction!
  reason: RegulatorReportReason!
  description: String!
  supportingFiles: [FileInput!]!
  urls: [String!]!
  emailAddress: String!
  caseNumber: String
}

type UpsertResponsiblePerson {
  ok: Boolean!
  message: String
}

type UpsertRestrictedProductRequest {
  ok: Boolean!
  message: String
}

type UpsertShippingProfile {
  ok: Boolean!
  message: String
  id: ObjectIdType
}

input UpsertTaxSettingsInput {
  settings: [TaxSettingsInput!]!
  countryOfDomicile: CountryCode!
  euStandardShipFromCc: CountryCode
  euWishExpressShipFromCc: CountryCode
}

type UpsertTaxSettingsMutation {
  ok: Boolean!
  errorMessage: String
}

input UpsertWarehouseInput {
  id: ObjectIdType
  enabledCountries: [CountryCode!]
  address: AddressInput
  name: String
}

type UpsertWebhookSubscription {
  ok: Boolean!
  message: String
}

input UpsertWebhookSubscriptionInput {
  subscriptionId: ObjectIdType
  topicId: ObjectIdType
  endpoint: String!
}

enum UserBackToOnboardingReason {
  DORMANT
  FAKE_NON_CN_NO_REAL_NAME
  REVERT_REVIEW_RESULT
}

enum UserEntityType {
  COMPANY
  INDIVIDUAL
}

type UserGateSchema {
  isAllowed(name: String!): Boolean!
}

type UserMutation {
  merchant: MerchantMutation
  uiState: UIStateMutations
  changeEmail(input: ChangeEmailInput!): ChangeEmailMutation
  password: PasswordMutations!
  twoFactorAuthentication: TwoFactorMutations!
  onboarding: UserOnboardingMutations!
  changePhoneNumber: ChangePhoneNumberMutation!
  deleteDevice(input: DeleteDeviceInput!): DeleteDeviceMutation!
  deleteAllDevices: DeleteAllDevicesMutation!
  changeLocale(input: ChangeLocaleInput!): ChangeLocaleMutation!
}

input UserOnboardingBusinessInfo {
  existingSellingLocations: ExistingSellingLocations!
  merchantStartYear: Int!
  annualRevenueRange: String!
  skuQuantity: Int!
  primaryProductCategory: String!
  wishLocalInterested: Boolean
  existingStoreUrl: String
  topPerformingWebsite: String
  hasErpPartners: Boolean
  countryOfDomicile: CountryCode
  businessRegistrationName: String
  businessRegistrationNumber: Int
}

input UserOnboardingContactInfo {
  firstName: String!
  lastName: String!
  streetAddress1: String!
  streetAddress2: String
  city: String!
  state: String
  zipcode: String!
  country: CountryCode!
  phoneNumber: String!
}

type UserOnboardingMutations {
  setContactInfo(input: UserOnboardingContactInfo!): UserOnboardingSetContactInfoMutation
  setBusinessInfo(input: UserOnboardingBusinessInfo!): UserOnboardingSetBusinessInfoMutation
}

type UserOnboardingSetBusinessInfoMutation {
  ok: Boolean!
  message: String
}

type UserOnboardingSetContactInfoMutation {
  ok: Boolean!
  message: String
}

type UserSchema {
  id: ObjectIdType!
  name: String
  lastName: String
  firstName: String
  email: String!
  confirmEmailPath: String
  merchantId: ObjectIdType
  phoneNumber: String
  canEditPhoneNumber: Boolean!
  canHandleEscalatedMerchantGamingReview: Boolean!
  twoFactorEnabled: Boolean!
  businessAddress: AddressSchema
  isStoreOrMerchantUser: Boolean!
  onboarding: OnboardingSchema
  uiState: UIStateSchema
  alerts: [AlertSchema!]
  username: String!
  accountManager: UserSchema
  numCurrentDevices: Int
  currentDevices(limit: Int, skip: Int): [DeviceSchema!]!
  canAcceptMerchantTos: Boolean!
  gating: UserGateSchema!
  todo: TodoSchema!
  tfaTokenSentTime: Datetime
  entityType: UserEntityType
  isAdmin: Boolean!
  isOnCsTeam: Boolean!
  hasPermission(permissions: [PermissionType!]!): Boolean!
  hasTfaBackupCodes: Boolean!
  companyName: String
  permissions(status: PermissionStatusType!): [PermissionSchema!]
  roles: [RoleSchema!]
  bdMerchantCountry: BDMerchantCountryCodeType
  manager: UserSchema
  isEnabled: Boolean!
  isSalesRep: Boolean!
  hasSeenFbwTos: Boolean!
  serviceTypes: [UserServiceType!]
  possibleManagers: [UserSchema!]
  queues(assigned: Boolean = false): [LogicalQueueSchema!]
  backToOnboardingReason: UserBackToOnboardingReason
  utmSource: String
  qqGroupNumber: String
}

enum UserServiceType {
  TICKET
  EMAIL
  TAGGING
}

enum UserUIState {
  DISMISSED_FULFILLMENT_SLA_INSIGHT
  DISMISSED_FULFILLMENT_PENALTY_INSIGHT
  DISMISSED_HOW_TO_FULFILL_INSIGHT
  HAS_COMPLETED_CS_SURVEY
  STORE_TIME_SEEN_SELL_ON_WISH_BANNER
  HAS_SEEN_KYC_VERIFICATION_SUCCESS_MESSAGE
  DISMISSED_KYC_VERIFICATION_INTRO_BANNER
  DISMISSED_WISH_EXPRESS_INTRO_BANNER
  PREFERS_NEW_NAV
  FULFILLMENT_MOST_RECENT_ORIGIN_COUNTRIES
  DISMISSED_SWITCH_NAV_BACK_TUTORIAL
  DISMISSED_SELLER_VERIFICATION_INTRO_BANNER
  HAS_SEEN_SELLER_VERIFICATION_SUCCESS_MESSAGE
  FULFILLMENT_MOST_RECENT_SHIPPING_PROVIDERS
}

enum UsersSortFieldType {
  USERNAME
  ID
  EMAIL
}

type VacationSchema {
  startDate: Datetime
  endDate: Datetime
  isActive: Boolean!
  vacationStatus: CommerceMerchantState
}

type VariationDimensions {
  length: Length!
  width: Length!
  height: Length!
}

input VariationInput {
  id: ObjectIdType
  enabled: Boolean
  sku: String
  inventory: [InventoryInput!]
  price: CurrencyInput
  cost: CurrencyInput
  size: String
  color: String
  gtin: String
  originCountry: CountryCode
  declaredValue: String
  declaredName: String
  declaredLocalName: String
  pieces: Int
  image: ImageInput
  weight: WeightInput
  height: LengthInput
  length: LengthInput
  width: LengthInput
  hasPowder: Boolean
  hasLiquid: Boolean
  hasBattery: Boolean
  hasMetal: Boolean
  customsHsCode: String
  quantityWeight: WeightInput
  quantityLength: LengthInput
  quantityVolume: VolumeInput
  quantityArea: AreaInput
  quantityUnit: CountInput
}

type VariationSchema {
  id: ObjectIdType!
  sku: String!
  size: String
  color: String
  productId: String!
  weight: Weight
  height: Length
  length: Length
  width: Length
  customsHsCode: String
  gtin: String
  originCountry: Country
  declaredValue: String
  declaredName: String
  declaredLocalName: String
  pieces: Int
  hasPowder: Boolean
  hasLiquid: Boolean
  hasBattery: Boolean
  hasMetal: Boolean
  inventory: [InventorySchema!]!
  fbwInventory: [FBWInventorySchema!]!
  price: CurrencyValue!
  msrp: CurrencyValue
  image: ImageSchema
  enabled: Boolean
  totalInventory(shippingType: WarehouseShippingType): Int
  productName: String!
  logisticsMetadata: LogisticsMetadataSchema!
  quantityWeight: Weight
  quantityLength: Length
  quantityVolume: Volume
  quantityArea: Area
  quantityUnit: Count
}

enum VariationSearchType {
  PRODUCT_ID
  PRODUCT_NAME
  SKU
}

input VariationSort {
  field: VariationSortField!
  order: SortOrderType!
}

enum VariationSortField {
  ID
  INVENTORY
  SKU
}

input VideoCaptionSpec {
  text: String!
  location: ScreenCoordinates!
}

enum VideoMotion {
  UNKNOWN_ANIMATION
  SLOW_EXPAND
  PAN_LEFT
  PAN_RIGHT
}

type VideoMutations {
  generateVideo(input: GenerateVideoInput!): GenerateVideoMutation
  posts: ProductPostsMutations
}

enum VideoQualityLevel {
  UNKNOWN_LEVEL
  AVERAGE
  GOOD
  BAD
}

input VideoSlideSpec {
  inputUrl: String!
  isVideo: Boolean!
  caption: VideoCaptionSpec!
  duration: Int!
  imageMotion: VideoMotion
}

type ViewTermsOfService {
  ok: Boolean!
  message: String
}

type Volume {
  value(targetUnit: VolumeUnit): Float!
  unit: VolumeUnit!
}

input VolumeInput {
  value: Float!
  unit: VolumeUnit!
}

enum VolumeUnit {
  LITER
  CENTILITER
  CUBICMETER
  FLUID_OUNCE
  GALLON
  MILLILITER
  PINT
  QUART
}

enum WFPOrderDeliveryState {
  LATE
  SIGNIFICANTLY_LATE
  UNKNOWN
  ON_TIME
  NOT_DELIVERED
}

type WPSAdditionalTrackingService {
  type: WPSAvailableServices!
  name: String!
  fee: CurrencyValue
}

enum WPSAvailableServices {
  SATURDAY_DELIVERY
  ADDITIONAL_HANDLING
  BASE_SERVICE
  SIGNATURE_REQUIRED
}

type WPSFee {
  totalFee: CurrencyValue!
  itemizedCharges: [WPSItemizedCharge!]!
}

type WPSFeeAdjustment {
  creationDate: Datetime!
  amount: CurrencyValue!
  paymentId: ObjectIdType
  paymentProcessedDate: Datetime
  reason: String
}

type WPSFulfillmentInfoSchema {
  shippingOptionId: ObjectIdType
  shippingLabelDownloadLink: String
  shipmentFee: WPSFee!
  shipmentState: WPSShipmentState!
  purchaseDate: Datetime
  paymentId: ObjectIdType
  paymentProcessedDate: Datetime
  feeAdjustments: [WPSFeeAdjustment!]
}

type WPSGetShippingOptionsSchema {
  ok: Boolean!
  errorMessage: String
  shippingOptions: [WPSShippingOptionSchema!]
}

type WPSItemizedCharge {
  type: WPSAvailableServices!
  name: String!
  fee: CurrencyValue!
}

enum WPSPackageType {
  BOX
  ENVELOPE
}

enum WPSShipmentState {
  CANCEL_PENDING
  COMPLETE
  CREATED
  PAID_PENDING
  ADJUSTMENT_PENDING
  PAID
  ERROR
  CANCELLED
  EXPIRED
}

type WPSShippingOptionSchema {
  id: ObjectIdType!
  name: String!
  price: CurrencyValue!
  provider: WPSShippingProviderSchema!
  daysToDeliver: Int!
  includesTracking: Boolean!
  isRegistered: Boolean!
  availableAdditionalServiceOptions: [WPSAdditionalTrackingService!]!
}

type WPSShippingProviderSchema {
  id: String!
  name: String!
  wpsId: ObjectIdType!
}

enum WPSTermsTypeEnum {
  UPS
  WPS
}

input WarehouseCountryShippingInput {
  shippingType: WarehouseShippingType!
  countryShipping: [CountryShippingInput!]
}

type WarehouseCountryShippingSchema {
  shippingType: WarehouseShippingType!
  countryShipping: [CountryShippingSchema!]
}

enum WarehouseShippingType {
  MERCHANT_TTD_13_DAY
  REGULAR
  MERCHANT_TTD_40_DAY
  MERCHANT_TTD_38_DAY
  MERCHANT_TTD_3_DAY
  MERCHANT_TTD_17_DAY
  MERCHANT_TTD_20_DAY
  MERCHANT_TTD_7_DAY
  MERCHANT_TTD_35_DAY
  MERCHANT_TTD_44_DAY
  MERCHANT_TTD_23_DAY
  WISH_EXPRESS_2_DAY
  MERCHANT_TTD_27_DAY
  FBW_V1_WLC
  WISH_EXPRESS
  MERCHANT_TTD_19_DAY
  MERCHANT_TTD_9_DAY
  WISH_BLUE
  MERCHANT_TTD_15_DAY
  MERCHANT_TTD_25_DAY
  MERCHANT_TTD_31_DAY
  FBW_V2_REGULAR
  MERCHANT_TTD_11_DAY
  MERCHANT_TTD_16_DAY
  MERCHANT_TTD_33_DAY
  MERCHANT_TTD_21_DAY
  MERCHANT_TTD_12_DAY
  MERCHANT_TTD_42_DAY
  MERCHANT_TTD_4_DAY
  MERCHANT_TTD_41_DAY
  FBW_V2
  MERCHANT_TTD_45_DAY
  MERCHANT_TTD_37_DAY
  FBW_V1
  MERCHANT_TTD_39_DAY
  MERCHANT_TTD_2_DAY
  MERCHANT_TTD_22_DAY
  MERCHANT_TTD_18_DAY
  MERCHANT_TTD_34_DAY
  WISH_EXPRESS_7_DAY
  FBW_V2_CALCULATED
  MERCHANT_TTD_30_DAY
  MERCHANT_TTD_10_DAY
  FBW_V2_EXPRESS
  MERCHANT_TTD_43_DAY
  MERCHANT_TTD_32_DAY
  MERCHANT_TTD_26_DAY
  MERCHANT_TTD_14_DAY
  WAIT_AND_SAVE
  MERCHANT_TTD_6_DAY
  MERCHANT_TTD_8_DAY
  MERCHANT_TTD_24_DAY
  MERCHANT_TTD_36_DAY
  MERCHANT_TTD_28_DAY
  MERCHANT_TTD_5_DAY
  MERCHANT_TTD_29_DAY
  MERCHANT_TTD_1_DAY
}

type WarehouseVerificationRequestSchema {
  id: ObjectIdType!
  documentUrls: [String!]!
  submitTime: Datetime!
  reviewTime: Datetime
  reviewerComment: String
}

enum WarehouseVerificationState {
  VERIFIED
  REJECTED
  PENDING_VERIFICATION
  INELIGIBLE
  UNSET
  UNVERIFIED
}

enum WebhookApiVersion {
  V3
}

type WebhookMutations {
  upsertSubscription(input: UpsertWebhookSubscriptionInput!): UpsertWebhookSubscription
  deleteSubscription(input: DeleteWebhookSubscriptionInput!): DeleteWebhookSubscription
  sendTestMessage(input: SendTestMessageInput!): SendTestMessage
}

type WebhookSchema {
  topics(apiVersion: WebhookApiVersion): [WebhookTopicSchema!]!
  subscriptions: [WebhookSubscriptionSchema!]
  allowWebhookUi: Boolean!
}

input WebhookSubscriptionInput {
  id: ObjectIdType!
  topic: WebhookTopicInput!
  endpoint: String!
  endpointType: SubscriptionEndpointType!
}

type WebhookSubscriptionSchema {
  id: ObjectIdType!
  topic: WebhookTopicSchema!
  endpoint: String!
  deactivated: Boolean!
  deactivateReasonBrief: String
  deactivateReasonDetail: String
}

input WebhookTopicInput {
  id: ObjectIdType!
  name: WebhookTopicName!
  apiVersion: WebhookApiVersion!
}

enum WebhookTopicName {
  ORDER_ALL
  ORDER_RELEASE
  ORDER_FULFILLMENT_DEADLINE
  ORDER_ADDRESS_CHANGE
  ORDER_PENALTY
  ORDER_TRACKING_UPDATE
  ORDER_REFUND
  ORDER_TAX
  POLICY_PENALTY_ISSUE
  POLICY_PENALTY_REVERSE
  POLICY_PENALTY_CANCEL
  TICKET_AWAITING_MERCHANT
  PRODUCT_BOOST_CAMPAIGN_STATS_UPDATE
  PRODUCT_BOOST_CAMPAIGN_CREATION
  PRODUCT_BOOST_CAMPAIGN_ATTRIBUTE_UPDATE
  PRODUCT_BOOST_CAMPAIGN_PRODUCT_STATS_UPDATE
  PRODUCT_BOOST_CAMPAIGN_PRODUCT_LOW_PERFORMANCE
  PRODUCT_BOOST_TRENDING_CATEGORIES
  PRODUCT_BOOST_ACCOUNT_BALANCE_UPDATE
  PRODUCT_UPDATE
  PRODUCT_IMAGE_JOB_STATUS_UPDATE
}

type WebhookTopicSchema {
  id: ObjectIdType!
  name: WebhookTopicName!
  apiVersion: WebhookApiVersion!
}

type Weight {
  value(targetUnit: WeightUnit): Float!
  unit: WeightUnit!
}

input WeightInput {
  value: Float!
  unit: WeightUnit!
}

enum WeightUnit {
  GRAM
  KILOGRAM
  MILLIGRAM
  OUNCE
  POUND
}

type WishCompanyInfo {
  hqAddress: AddressSchema!
  companyOperatorName: String!
}

type WishEUVATPayerInfo {
  address: AddressSchema!
  iossNumber: String!
}

type WishExpressCountryDetails {
  supportsWishExpress: Boolean!
  expectedTimeToDoor: Int
}

type WishExpressInfoSchema {
  fulfillmentDeadline: Timedelta!
}

type WishLocalOnboardingMutations {
  storePhoto(input: StorePhotoInput!): SetStorePhotoMutation
  storeHours(input: StoreHoursInput!): SetStoreHoursMutation
}

type WishPostShippingUpdatesSchema {
  orderId: ObjectIdType!
  amount: CurrencyValue!
  date: Datetime!
  paymentDate: Datetime
  reason: String!
}

type WishUserSchema {
  id: ObjectIdType!
  name: String!
  email: String
  signupMethod: WishUserSignupMethod
  isVerified: Boolean
  emailBouncedReason: String
}

enum WishUserSignupMethod {
  GOOGLE_PLUS
  FACEBOOK
  APPLE
  EMAIL
}
